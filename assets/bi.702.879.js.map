{"version":3,"file":"bi.702.879.js","sources":["../frontend-dev/src/components/AllIntegrations/Mailify/MailifyCommonFunc.js"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { __ } from \"@wordpress/i18n\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\n\nexport const handleInput = (e, mailifyConf, setMailifyConf) => {\n  const newConf = { ...mailifyConf };\n  newConf.name = e.target.value;\n  setMailifyConf({ ...newConf });\n};\n\n// refreshMappedLists\nexport const refreshMailifyList = (\n  mailifyConf,\n  setMailifyConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  const refreshListsRequestParams = {\n    account_id: mailifyConf.account_id,\n    api_key: mailifyConf.api_key,\n  };\n  bitsFetch(refreshListsRequestParams, \"mailify_lists\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...mailifyConf };\n        if (result.data) {\n          if (!newConf.default) {\n            newConf.default = {};\n          }\n          newConf.default.mailifyLists = result.data;\n          setSnackbar({\n            show: true,\n            msg: __(\"Mailify lists refreshed\", \"bit-integrations\"),\n          });\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              \"No Mailify lists found. Try changing the header row number or try again\",\n              \"bit-integrations\"\n            ),\n          });\n        }\n\n        setMailifyConf({ ...newConf });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Mailify lists refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\n// refreshMappedFields\nexport const refreshMailifyHeader = (\n  mailifyConf,\n  setMailifyConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  const refreshListsRequestParams = {\n    account_id: mailifyConf.account_id,\n    api_key: mailifyConf.api_key,\n    list_id: mailifyConf.listId,\n  };\n\n  bitsFetch(refreshListsRequestParams, \"mailify_headers\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...mailifyConf };\n        if (result.data.mailifyField) {\n          if (!newConf.default) {\n            newConf.default = {};\n          }\n          newConf.default.fields = result.data.mailifyField;\n          const { fields } = newConf.default;\n          newConf.field_map = Object.values(fields)\n            .filter((f) => f.required)\n            .map((f) => ({\n              formField: \"\",\n              mailifyField: f.fieldValue,\n              required: true,\n            }));\n          setSnackbar({\n            show: true,\n            msg: __(\"Mailify fields refreshed\", \"bit-integrations\"),\n          });\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              \"No Mailify fields found. Try changing the header row number or try again\",\n              \"bit-integrations\"\n            ),\n          });\n        }\n        setMailifyConf({ ...newConf });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Mailify fields refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const checkMappedFields = (mailifyConf) => {\n  const mappedFields = mailifyConf?.field_map\n    ? mailifyConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField &&\n          mappedField.mailifyField &&\n          mappedField.required\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n"],"names":["bitsFetch","__","handleInput","mailifyConf","setMailifyConf","newConf","__spreadValues","refreshMailifyList","setIsLoading","setSnackbar","refreshListsRequestParams","result","refreshMailifyHeader","fields","f","checkMappedFields","mappedField"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,MAAA,iBAIY,MAACC,EAAc,CAAC,EAAGC,EAAaC,IAAmB,CAC7D,MAAMC,EAAUC,EAAA,GAAKH,GACrBE,EAAQ,KAAO,EAAE,OAAO,MACxBD,EAAeE,EAAA,GAAKD,EAAS,CAC/B,EAGaE,EAAqB,CAChCJ,EACAC,EACAI,EACAC,IACG,CACH,MAAMC,EAA4B,CAChC,WAAYP,EAAY,WACxB,QAASA,EAAY,OACzB,EACEH,EAAUU,EAA2B,eAAe,EACjD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACjBQ,EAAO,MACJN,EAAQ,UACXA,EAAQ,QAAU,IAEpBA,EAAQ,QAAQ,aAAeM,EAAO,KACtCF,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,0BAA2B,kBAAkB,CACjE,CAAW,GAEDQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,0EACA,kBACD,CACb,CAAW,EAGHG,EAAeE,EAAA,GAAKD,EAAS,CACrC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,iDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAGaI,EAAuB,CAClCT,EACAC,EACAI,EACAC,IACG,CACH,MAAMC,EAA4B,CAChC,WAAYP,EAAY,WACxB,QAASA,EAAY,QACrB,QAASA,EAAY,MACzB,EAEEH,EAAUU,EAA2B,iBAAiB,EACnD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACrB,GAAIQ,EAAO,KAAK,aAAc,CACvBN,EAAQ,UACXA,EAAQ,QAAU,IAEpBA,EAAQ,QAAQ,OAASM,EAAO,KAAK,aACrC,KAAM,CAAE,OAAAE,CAAM,EAAKR,EAAQ,QAC3BA,EAAQ,UAAY,OAAO,OAAOQ,CAAM,EACrC,OAAQC,GAAMA,EAAE,QAAQ,EACxB,IAAKA,IAAO,CACX,UAAW,GACX,aAAcA,EAAE,WAChB,SAAU,EACX,EAAC,EACJL,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,2BAA4B,kBAAkB,CAClE,CAAW,CACX,MACUQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,2EACA,kBACD,CACb,CAAW,EAEHG,EAAeE,EAAA,GAAKD,EAAS,CACrC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,kDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAEaO,EAAqBZ,GAS5B,GARiBA,GAAA,MAAAA,EAAa,UAC9BA,EAAY,UAAU,OACnBa,GACC,CAACA,EAAY,WACbA,EAAY,cACZA,EAAY,QACf,EACD,IACa,OAAS"}