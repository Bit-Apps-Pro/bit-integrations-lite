{"version":3,"file":"bi.386.743.js","sources":["../frontend-dev/src/components/AllIntegrations/GoogleDrive/GoogleDriveCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, googleDriveConf, setGoogleDriveConf) => {\n  const newConf = { ...googleDriveConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setGoogleDriveConf({ ...newConf })\n}\n\nexport const getAllGoogleDriveFolders = (flowID, googleDriveConf, setGoogleDriveConf) => {\n  const queryParams = {\n    flowID: flowID ?? null,\n    clientId: googleDriveConf.clientId,\n    clientSecret: googleDriveConf.clientSecret,\n    tokenDetails: googleDriveConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(queryParams, 'googleDrive_get_all_folders')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...googleDriveConf }\n        if (result.data.googleDriveFoldersList) {\n          newConf.foldersList = result.data.googleDriveFoldersList\n          newConf.tokenDetails = result.data.tokenDetails\n        }\n\n        setGoogleDriveConf(newConf)\n        return 'GoogleDrive Folders List refreshed successfully'\n      } else {\n        return 'GoogleDrive Folders List refresh failed. please try again'\n      }\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading GoogleDrive Folders List...', 'bit-integrations'),\n  })\n}\n\nexport const handleAuthorize = (confTmp, setConf, setIsAuthorized, setIsLoading, setError) => {\n  if (!confTmp.clientId || !confTmp.clientSecret) {\n    setError({\n      clientId: !confTmp.clientId ? __('Client Id can\\'t be empty', 'bit-integrations') : '',\n      clientSecret: !confTmp.clientSecret ? __('Client Secret can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n  setIsLoading(true)\n  const scopes = 'https://www.googleapis.com/auth/drive'\n  // eslint-disable-next-line no-undef\n  const apiEndpoint = `https://accounts.google.com/o/oauth2/v2/auth?scope=${scopes}&access_type=offline&prompt=consent&response_type=code&state=${encodeURIComponent(window.location.href)}/redirect&redirect_uri=${encodeURIComponent(`${btcbi.api.base}/redirect`)}&client_id=${confTmp.clientId}`\n  const authWindow = window.open(apiEndpoint, 'googleDrive', 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isAuthRedirectLocation = false\n      const bitsGoogleDrive = localStorage.getItem('__googleDrive')\n      if (bitsGoogleDrive) {\n        isAuthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsGoogleDrive)\n        localStorage.removeItem('__googleDrive')\n      }\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isAuthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        toast.error(`${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}`)\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(grantTokenResponse, newConf, setConf, setIsAuthorized, setIsLoading)\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (grantToken, confTmp, setConf, setIsAuthorized, setIsLoading) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  // eslint-disable-next-line no-undef\n  tokenRequestParams.redirectURI = `${btcbi.api.base}/redirect`\n\n  bitsFetch(tokenRequestParams, 'googleDrive_authorization')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setIsAuthorized(true)\n        toast.success(__('Authorized Successfully', 'bit-integrations'))\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        toast.error(`${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}`)\n      } else {\n        toast.error(__('Authorization failed. please try again', 'bit-integrations'))\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["__","bitsFetch","handleInput","googleDriveConf","setGoogleDriveConf","newConf","__spreadValues","name","getAllGoogleDriveFolders","flowID","queryParams","loadPostTypes","result","toast","data","handleAuthorize","confTmp","setConf","setIsAuthorized","setIsLoading","setError","apiEndpoint","authWindow","popupURLCheckTimer","grantTokenResponse","isAuthRedirectLocation","bitsGoogleDrive","errorCause","tokenHelper","grantToken","tokenRequestParams"],"mappings":"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"}