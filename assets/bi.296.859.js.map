{"version":3,"file":"bi.296.859.js","sources":["../frontend-dev/src/components/AllIntegrations/Insightly/InsightlyCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, insightlyConf, setInsightlyConf) => {\n  const newConf = { ...insightlyConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setInsightlyConf({ ...newConf })\n}\n\nexport const generateMappedField = (insightlyConf) => {\n  let allRequiredFields = []\n  if (insightlyConf.actionName === 'organisation') {\n    allRequiredFields = insightlyConf?.organisationFields\n  } else if (insightlyConf.actionName === 'contact') {\n    allRequiredFields = insightlyConf?.contactFields\n  } else if (insightlyConf.actionName === 'opportunity') {\n    allRequiredFields = insightlyConf?.opportunityFields\n  } else if (insightlyConf.actionName === 'project') {\n    allRequiredFields = insightlyConf?.projectFields\n  } else if (insightlyConf.actionName === 'task') {\n    allRequiredFields = insightlyConf?.taskFields\n  } else if (insightlyConf.actionName === 'lead') {\n    allRequiredFields = insightlyConf?.leadFields\n  }\n  const requiredFlds = allRequiredFields?.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', insightlyFormField: field.key })) : [{ formField: '', insightlyFormField: '' }]\n}\n\nexport const checkMappedFields = (insightlyConf) => {\n  const mappedFields = insightlyConf?.field_map ? insightlyConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.insightlyFormField || (mappedField.formField === 'custom' && !mappedField.customValue) || (mappedField.insightlyFormField === 'customFieldKey' && !mappedField.customFieldKey))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const checkRequiredFields = (insightlyConf) => {\n  const leadStatus = insightlyConf?.selectedLeadSource ? insightlyConf?.selectedLeadSource : ''\n  const leadSource = insightlyConf?.selectedLeadStatus ? insightlyConf?.selectedLeadStatus : ''\n  if (leadStatus != '' && leadSource != '') { \n    return true;\n  }\n  return false;\n}\n\nexport const insightlyAuthentication = (confTmp, setConf, setError, setIsAuthorized, loading, setLoading) => {\n  if (!confTmp.api_url || !confTmp.api_key) {\n    setError({\n      api_url: !confTmp.api_url ? __('API URL can\\'t be empty', 'bit-integrations') : '',\n      api_key: !confTmp.api_key ? __('Api Key can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n\n  setError({})\n  setLoading({ ...loading, auth: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url }\n\n  bitsFetch(requestParams, 'insightly_authentication')\n    .then(result => {\n      if (result && result.success) {\n        setIsAuthorized(true)\n        setLoading({ ...loading, auth: false })\n        toast.success(__('Authorized successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...loading, auth: false })\n      toast.error(__('Authorized failed, Please enter valid api_url name & API key', 'bit-integrations'))\n    })\n}\n\nexport const getAllOrganisations = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, organisations: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_organisations')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.organisations = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, organisations: false })\n\n        toast.success(__('Organisations fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, organisations: false })\n      toast.error(__('Organisations fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllCategories = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, categories: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url , action_name: confTmp.actionName}\n\n  bitsFetch(requestParams, 'insightly_fetch_all_categories')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.categories = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, categories: false })\n\n        toast.success(__('Categories fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, categories: false })\n      toast.error(__('Categories fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllStatuses = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, statuses: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_statuses')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.statuses = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, statuses: false })\n\n        toast.success(__('statuses fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, statuses: false })\n      toast.error(__('statuses fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getLeadSources = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, LeadSources: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_LeadSources')\n    .then(result => {\n      if (result && result.success) {\n\n        setConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.LeadSources = result.data\n          }\n          return newConf\n        })\n\n        setLoading({ ...setLoading, LeadSources: false })\n\n        toast.success(__('Lead Statuses fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, LeadSources: false })\n      toast.error(__('Lead Statuses fetching failed', 'bit-integrations'))\n    })\n}\nexport const getLeadStatuses = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, LeadStatues: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_LeadStatuses')\n    .then(result => {\n      if (result && result.success) {\n\n        setConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.LeadStatuses = result.data\n          }\n          return newConf\n        })\n        \n        setLoading({ ...setLoading, LeadStatuses: false })\n\n        toast.success(__('Lead Statuses fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, LeadStatuses: false })\n      toast.error(__('Lead Statuses fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllCRMPipelines = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPipelines: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url ,action_name :confTmp.actionName  }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_CRMPipelines')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.CRMPipelines = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, CRMPipelines: false })\n\n        toast.success(__('Pipelines fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, CRMPipelines: false })\n      toast.error(__('Pipelines fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllCRMPipelineStages = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPipelineStages: true })\n\n  const requestParams = { api_key: confTmp.api_key, api_url: confTmp.api_url, selectedCRMPipeline: confTmp.selectedCRMPipeline }\n\n  bitsFetch(requestParams, 'insightly_fetch_all_CRMPipelineStages')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.CRMPipelineStages = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, CRMPipelineStages: false })\n\n        toast.success(__('Pipeline stages fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, CRMPipelineStages: false })\n      toast.error(__('Pipeline stages fetching failed', 'bit-integrations'))\n    })\n}\n"],"names":["__","bitsFetch","_t","handleInput","insightlyConf","setInsightlyConf","newConf","__spreadValues","name","generateMappedField","allRequiredFields","requiredFlds","fld","field","checkMappedFields","mappedField","checkRequiredFields","leadStatus","leadSource","insightlyAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getAllOrganisations","getAllCategories","getAllStatuses","getLeadSources","oldConf","getLeadStatuses","getAllCRMPipelines","getAllCRMPipelineStages"],"mappings":"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"}