{"version":3,"file":"bi.543.919.js","sources":["../frontend-dev/src/components/AllIntegrations/Discord/DiscordCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport toast from 'react-hot-toast'\n\nexport const handleInput = (e, discordConf, setDiscordConf) => {\n  const newConf = { ...discordConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setDiscordConf({ ...newConf })\n}\n\nexport const getAllServers = (confTmp, setConf, setIsLoading) => {\n  if (!confTmp.accessToken) {\n    setError({ accessToken: !confTmp.accessToken ? __('Access Token can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n\n  setIsLoading(true)\n\n  const tokenRequestParams = { accessToken: confTmp.accessToken }\n\n  bitsFetch(tokenRequestParams, 'discord_fetch_servers')\n    .then(result => {\n      if (result && result.success) {\n\n        setConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.servers = result.data\n          }\n          return newConf\n        })\n        \n        setIsLoading(false)\n\n        toast.success(__('Servers fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Servers fetching failed', 'bit-integrations'))\n    })\n}\n\n\nexport const getAllChannels = (confTmp, setConf, setIsLoading) => {\n  console.log('confTmp', confTmp.selectedServer)\n  if (!confTmp.accessToken) {\n    setError({ accessToken: !confTmp.accessToken ? __('Access Token can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setIsLoading(true)\n\n  const tokenRequestParams = { accessToken: confTmp.accessToken , serverId: confTmp.selectedServer}\n\n  bitsFetch(tokenRequestParams, 'discord_fetch_channels')\n    .then(result => {\n      if (result && result.success) {\n\n        setConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.channels = result.data\n          }\n          return newConf\n        })\n        \n        setIsLoading(false)\n\n        toast.success(__('Channels fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Channels fetching failed', 'bit-integrations'))\n    })\n}\n\n\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.accessToken) {\n    setError({ accessToken: !confTmp.accessToken ? __('Access Token can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n\n  setError({})\n  setIsLoading(true)\n\n  const tokenRequestParams = { accessToken: confTmp.accessToken }\n\n  bitsFetch(tokenRequestParams, 'handle_authorize')\n    .then(result => result)\n    .then(result => {\n      if (result && result.success) { \n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setisAuthorized(true)\n        setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n      } else {\n        setSnackbar({ show: true, msg: __('Authorization failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n}\n// export const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n//   if (!confTmp.accessToken) {\n//     setError({ accessToken: !confTmp.accessToken ? __('Access Token can\\'t be empty', 'bit-integrations') : '' })\n//     return\n//   }\n\n//   setError({})\n//   setIsLoading(true)\n\n//   const tokenRequestParams = { accessToken: confTmp.accessToken }\n\n//   bitsFetch(tokenRequestParams, 'discord_authorization_and_fetch_servers')\n//     .then(result => result)\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...confTmp }\n//         newConf.tokenDetails = result.data\n//         setConf(newConf)\n//         setisAuthorized(true)\n//         setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n//       } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n//         setSnackbar({ show: true, msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n//       } else {\n//         setSnackbar({ show: true, msg: __('Authorization failed. please try again', 'bit-integrations') })\n//       }\n//       setIsLoading(false)\n//     })\n// }\n\n"],"names":["__","bitsFetch","handleInput","discordConf","setDiscordConf","newConf","__spreadValues","name","getAllServers","confTmp","setConf","setIsLoading","tokenRequestParams","result","oldConf","toast","getAllChannels","handleAuthorize","setError","setisAuthorized","setSnackbar"],"mappings":"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"}