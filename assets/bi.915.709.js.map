{"version":3,"file":"bi.915.709.js","sources":["../frontend-dev/src/components/AllIntegrations/Twilio/TwilioCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, twilioConf, setTwilioConf, setIsLoading, setSnackbar, isNew, error, setError) => {\n  const newConf = { ...twilioConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setTwilioConf({ ...newConf })\n}\n\nexport const checkMappedFields = (twilioConf) => {\n  const mappedFields = twilioConf?.field_map ? twilioConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.twilioField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.sid || !confTmp.token || !confTmp.from_num) {\n    setError({\n      sid: !confTmp.sid ? __('Account SID can\\'t be empty', 'bit-integrations') : '',\n      token: !confTmp.token ? __('Auth Token can\\'t be empty', 'bit-integrations') : '',\n      from_num: !confTmp.from_num ? __('Phone number can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n\n  setError({})\n  setIsLoading(true)\n\n  const tokenRequestParams = {\n    sid: confTmp.sid,\n    token: confTmp.token,\n    from_num: confTmp.from_num,\n  }\n\n  bitsFetch(tokenRequestParams, 'twilio_authorization')\n    .then(result => result)\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setisAuthorized(true)\n        setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n      } else {\n        setSnackbar({ show: true, msg: __('Authorization failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["__","bitsFetch","handleInput","e","twilioConf","setTwilioConf","setIsLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","name","handleAuthorize","confTmp","setConf","setisAuthorized","tokenRequestParams","result"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,MAAA,iBAKY,MAACC,EAAc,CAACC,EAAGC,EAAYC,EAAeC,EAAcC,EAAaC,EAAOC,EAAOC,IAAa,CAC9G,MAAMC,EAAUC,EAAA,GAAKR,GACf,CAAE,KAAAS,GAASV,EAAE,OACfA,EAAE,OAAO,QAAU,GACrBQ,EAAQE,CAAI,EAAIV,EAAE,OAAO,MAEzB,OAAOQ,EAAQE,CAAI,EAErBR,EAAcO,EAAA,GAAKD,EAAS,CAC9B,EASaG,EAAkB,CAACC,EAASC,EAASN,EAAUO,EAAiBX,EAAcC,IAAgB,CACzG,GAAI,CAACQ,EAAQ,KAAO,CAACA,EAAQ,OAAS,CAACA,EAAQ,SAAU,CACvDL,EAAS,CACP,IAAMK,EAAQ,IAA8D,GAAxDf,EAAG,6BAA+B,kBAAkB,EACxE,MAAQe,EAAQ,MAA+D,GAAvDf,EAAG,4BAA8B,kBAAkB,EAC3E,SAAWe,EAAQ,SAAoE,GAAzDf,EAAG,8BAAgC,kBAAkB,CACzF,CAAK,EACD,MACD,CAEDU,EAAS,CAAA,CAAE,EACXJ,EAAa,EAAI,EAEjB,MAAMY,EAAqB,CACzB,IAAKH,EAAQ,IACb,MAAOA,EAAQ,MACf,SAAUA,EAAQ,QACnB,EAEDd,EAAUiB,EAAoB,sBAAsB,EACjD,KAAKC,GAAUA,CAAM,EACrB,KAAKA,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMR,EAAUC,EAAA,GAAKG,GACrBJ,EAAQ,aAAeQ,EAAO,KAC9BH,EAAQL,CAAO,EACfM,EAAgB,EAAI,EACpBV,EAAY,CAAE,KAAM,GAAM,IAAKP,EAAG,0BAA2B,kBAAkB,EAAG,CACnF,MAAWmB,GAAUA,EAAO,MAAQA,EAAO,KAAK,MAAU,CAACA,EAAO,SAAW,OAAOA,EAAO,MAAS,SACnGZ,EAAY,CAAE,KAAM,GAAM,IAAK,GAAGP,EAAG,8BAA+B,kBAAkB,CAAC,GAAGmB,EAAO,KAAK,MAAQA,EAAO,IAAI,KAAKnB,EAAG,mBAAoB,kBAAkB,CAAC,GAAI,EAE5KO,EAAY,CAAE,KAAM,GAAM,IAAKP,EAAG,yCAA0C,kBAAkB,EAAG,EAEnGM,EAAa,EAAK,CACxB,CAAK,CACL"}