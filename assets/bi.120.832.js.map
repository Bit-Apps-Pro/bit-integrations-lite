{"version":3,"file":"bi.120.832.js","sources":["../frontend-dev/src/components/AllIntegrations/PCloud/PCloudCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, pCloudConf, setPCloudConf) => {\n  const newConf = { ...pCloudConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setPCloudConf({ ...newConf })\n}\n\nexport const checkMappedFields = (pCloudConf) => {\n  const mappedFields = pCloudConf?.field_map ? pCloudConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.pCloudFormField)) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const getAllPCloudFolders = (pCloudConf, setPCloudConf, type) => {\n  const queryParams = { tokenDetails: pCloudConf.tokenDetails }\n  const loadPostTypes = bitsFetch(queryParams, 'pCloud_get_all_folders')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...pCloudConf }\n        if (result.data) {\n          newConf.foldersList = result.data\n        }\n        setPCloudConf(newConf)\n        if (type === 'fetch') {\n          return 'Folders fetched successfully'\n        }\n        return 'Folders refreshed successfully'\n      } else {\n        return 'Folders refresh failed. please try again'\n      }\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading PCloud Folders List...', 'bit-integrations'),\n  })\n}\n\nexport const handleAuthorization = (confTmp, setConf, setIsAuthorized, setIsLoading, setError) => {\n  if (!confTmp.clientId || !confTmp.clientSecret) {\n    setError({\n      clientId: !confTmp.clientId ? __('Client Id can\\'t be empty', 'bit-integrations') : '',\n      clientSecret: !confTmp.clientSecret ? __('Client Secret can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n  setIsLoading(true)\n  // eslint-disable-next-line no-undef\n  const apiEndpoint = `https://my.pcloud.com/oauth2/authorize?client_id=${confTmp.clientId}&response_type=code&redirect_uri=${btcbi.api.base}/redirect&state=${encodeURIComponent(window.location.href)}/redirect`\n  const authWindow = window.open(apiEndpoint, 'pCloud', 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isAuthRedirectLocation = false\n      const bitsPCloud = localStorage.getItem('__pCloud')\n      if (bitsPCloud) {\n        isAuthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsPCloud)\n        localStorage.removeItem('__pCloud')\n      }\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isAuthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        toast.error(`${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}`)\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(grantTokenResponse, newConf, setConf, setIsAuthorized, setIsLoading)\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (grantToken, confTmp, setConf, setIsAuthorized, setIsLoading) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  // eslint-disable-next-line no-undef\n  tokenRequestParams.redirectURI = `${btcbi.api.base}/redirect`\n\n  bitsFetch(tokenRequestParams, 'pCloud_authorization')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setIsAuthorized(true)\n        toast.success(__('Authorized Successfully', 'bit-integrations'))\n      } else if ((result && result.data) || (!result.success && typeof result.data === 'string')) {\n        toast.error(`${__('Authorization failed Cause:', 'bit-integrations')}${result.data}. ${__('please try again', 'bit-integrations')}`)\n      } else {\n        toast.error(__('Authorization failed. please try again', 'bit-integrations'))\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["__","bitsFetch","handleInput","pCloudConf","setPCloudConf","newConf","__spreadValues","name","checkMappedFields","mappedField","getAllPCloudFolders","type","queryParams","loadPostTypes","result","toast","data","handleAuthorization","confTmp","setConf","setIsAuthorized","setIsLoading","setError","apiEndpoint","authWindow","popupURLCheckTimer","grantTokenResponse","isAuthRedirectLocation","bitsPCloud","errorCause","tokenHelper","grantToken","tokenRequestParams"],"mappings":"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"}