{"version":3,"file":"bi.190.745.js","sources":["../frontend-dev/src/components/AllIntegrations/GoogleCalendar/GoogleCalendarCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, googleCalendarConf, setGoogleCalendarConf) => {\n  const newConf = { ...googleCalendarConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setGoogleCalendarConf({ ...newConf })\n}\n\nexport const checkMappedFields = fieldsMapped => {\n  const checkedField = fieldsMapped\n    ? fieldsMapped.filter(item => (!item.formField || !item.googleCalendarFormField))\n    : []\n  if (checkedField.length > 0) return false\n  return true\n}\n\nexport const getAllGoogleCalendarLists = (flowID, googleCalendarConf, setGoogleCalendarConf) => {\n  const queryParams = {\n    flowID: flowID ?? null,\n    clientId: googleCalendarConf.clientId,\n    clientSecret: googleCalendarConf.clientSecret,\n    tokenDetails: googleCalendarConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(queryParams, 'googleCalendar_get_all_lists')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...googleCalendarConf }\n        if (result.data.googleCalendarLists) {\n          newConf.calendarLists = result.data.googleCalendarLists\n          newConf.tokenDetails = result.data.tokenDetails\n        }\n\n        setGoogleCalendarConf(newConf)\n        return 'Google Calendar List refreshed successfully'\n      } else {\n        return 'Google Calendar List refresh failed. please try again'\n      }\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Google Calendar List...', 'bit-integrations'),\n  })\n}\n\nexport const handleAuthorize = (confTmp, setConf, setIsAuthorized, setIsLoading, setError) => {\n  if (!confTmp.clientId || !confTmp.clientSecret) {\n    setError({\n      clientId: !confTmp.clientId ? __('Client Id can\\'t be empty', 'bit-integrations') : '',\n      clientSecret: !confTmp.clientSecret ? __('Client Secret can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n  setIsLoading(true)\n  const scopes = 'https://www.googleapis.com/auth/calendar'\n  // eslint-disable-next-line no-undef\n  const apiEndpoint = `https://accounts.google.com/o/oauth2/v2/auth?scope=${scopes}&access_type=offline&prompt=consent&response_type=code&state=${encodeURIComponent(window.location.href)}/redirect&redirect_uri=${encodeURIComponent(`${btcbi.api.base}/redirect`)}&client_id=${confTmp.clientId}`\n  const authWindow = window.open(apiEndpoint, 'googleCalendar', 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isAuthRedirectLocation = false\n      const bitsGoogleCalendar = localStorage.getItem('__googleCalendar')\n      if (bitsGoogleCalendar) {\n        isAuthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsGoogleCalendar)\n        localStorage.removeItem('__googleCalendar')\n      }\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isAuthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        toast.error(`${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}`)\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(grantTokenResponse, newConf, setConf, setIsAuthorized, setIsLoading)\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (grantToken, confTmp, setConf, setIsAuthorized, setIsLoading) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  // eslint-disable-next-line no-undef\n  tokenRequestParams.redirectURI = `${btcbi.api.base}/redirect`\n\n  bitsFetch(tokenRequestParams, 'googleCalendar_authorization')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setIsAuthorized(true)\n        toast.success(__('Authorized Successfully', 'bit-integrations'))\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        toast.error(`${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}`)\n      } else {\n        toast.error(__('Authorization failed. please try again', 'bit-integrations'))\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["__","bitsFetch","handleInput","googleCalendarConf","setGoogleCalendarConf","newConf","__spreadValues","name","checkMappedFields","fieldsMapped","item","getAllGoogleCalendarLists","flowID","queryParams","loadPostTypes","result","toast","data","handleAuthorize","confTmp","setConf","setIsAuthorized","setIsLoading","setError","apiEndpoint","authWindow","popupURLCheckTimer","grantTokenResponse","isAuthRedirectLocation","bitsGoogleCalendar","errorCause","tokenHelper","grantToken","tokenRequestParams"],"mappings":"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"}