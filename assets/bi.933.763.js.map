{"version":3,"file":"bi.933.763.js","sources":["../frontend-dev/src/components/AllIntegrations/Getgist/GetgistCommonFunc.jsx","../frontend-dev/src/components/AllIntegrations/Getgist/GetgistFieldMap.jsx","../frontend-dev/src/components/AllIntegrations/Getgist/GetgistIntegLayout.jsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nexport const handleInput = (e, getgistConf, setGetgistConf, setIsLoading) => {\n  const newConf = { ...getgistConf }\n  newConf.name = e.target.value\n  setGetgistConf({ ...newConf })\n}\n\nexport const checkMappedFields = (getgistConf) => {\n  const mappedFields = getgistConf?.field_map ? getgistConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.getgistFormField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const generateMappedField = (getgistConf) => {\n  const requiredFlds = getgistConf?.gistFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', getgistFormField: field.key })) : [{ formField: '', getgistFormField: '' }]\n}\n","import { useRecoilValue } from 'recoil'\nimport { $btcbi } from '../../../GlobalStates'\nimport TrashIcn from '../../../Icons/TrashIcn'\nimport { __ } from '../../../Utils/i18nwrap'\nimport { SmartTagField } from '../../../Utils/StaticData/SmartTagField'\nimport MtInput from '../../Utilities/MtInput'\nimport TagifyInput from '../../Utilities/TagifyInput'\nimport { handleCustomValue } from '../IntegrationHelpers/IntegrationHelpers'\nimport { generateMappedField } from './GetgistCommonFunc'\n\nexport default function GetgistFieldMap({ i, formFields, field, getgistConf, setGetgistConf }) {\n  const btcbi = useRecoilValue($btcbi)\n  const { isPro } = btcbi\n\n  if (getgistConf?.field_map?.length === 1 && field?.getgistFormField === '') {\n    const newConf = { ...getgistConf }\n    const tmp = generateMappedField(newConf)\n    newConf.field_map = tmp\n    setGetgistConf(newConf)\n  }\n  const addFieldMap = (indx) => {\n    const newConf = { ...getgistConf }\n    newConf.field_map.splice(indx, 0, {})\n    setGetgistConf(newConf)\n  }\n\n  const delFieldMap = (indx) => {\n    const newConf = { ...getgistConf }\n    if (newConf.field_map.length > 1) {\n      newConf.field_map.splice(indx, 1)\n    }\n    setGetgistConf(newConf)\n  }\n\n  const handleFieldMapping = (event, indx) => {\n    const newConf = { ...getgistConf }\n    newConf.field_map[indx][event.target.name] = event.target.value\n\n    if (event.target.value === 'custom') {\n      newConf.field_map[indx].customValue = ''\n    }\n    setGetgistConf(newConf)\n  }\n\n\n  const requiredFlds = getgistConf?.gistFields.filter(fld => fld.required === true) || []\n  const nonRequiredFlds = getgistConf?.gistFields.filter(fld => fld.required === false) || []\n  return (\n    <div\n      className=\"flx mt-2 mb-2 btcbi-field-map\"\n    >\n      <div className=\"pos-rel flx\">\n        <div className=\"flx integ-fld-wrp\">\n          <select className=\"btcd-paper-inp mr-2\" name=\"formField\" value={field.formField || ''} onChange={(ev) => handleFieldMapping(ev, i)}>\n            <option value=\"\">{__('Select Field', 'bit-integrations')}</option>\n            <optgroup label=\"Form Fields\">\n              {\n                formFields.map(f => f.type !== 'file' && <option key={`ff-getgist-${f.name}`} value={f.name}>{f.label}</option>)\n              }\n            </optgroup>\n            <option value=\"custom\">{__('Custom...', 'bit-integrations')}</option>\n\n            <optgroup label={`General Smart Codes ${isPro ? '' : '(PRO)'}`}>\n              {isPro && SmartTagField?.map(f => (\n                <option key={`ff-rm-${f.name}`} value={f.name}>\n                  {f.label}\n                </option>\n              ))}\n            </optgroup>\n\n          </select>\n\n          {field.formField === 'custom' && <TagifyInput onChange={e => handleCustomValue(e, i, getgistConf, setGetgistConf)} label={__('Custom Value', 'bit-integrations')} className=\"mr-2\" type=\"text\" value={field.customValue} placeholder={__('Custom Value', 'bit-integrations')} formFields={formFields} />}\n\n          <select className=\"btcd-paper-inp\" disabled={i < requiredFlds.length} name=\"getgistFormField\" value={i < requiredFlds.length ? (requiredFlds[i]?.key || '') : (field.getgistFormField || '')} onChange={(ev) => handleFieldMapping(ev, i, getgistConf, setGetgistConf)}>\n            <option value=\"\">{__('Select Field', 'bit-integrations')}</option>\n            {\n              i < requiredFlds.length ? (\n                <option key={requiredFlds[i].key} value={requiredFlds[i].key}>\n                  {requiredFlds[i].label}\n                </option>\n              ) : (\n                nonRequiredFlds.map(({ key, label }) => (\n                  <option key={key} value={key}>\n                    {label}\n                  </option>\n                ))\n              )\n            }\n          </select>\n\n        </div>\n        {\n          i >= requiredFlds?.length && (\n            <>\n              <button\n                onClick={() => addFieldMap(i)}\n                className=\"icn-btn sh-sm ml-2\"\n                type=\"button\"\n              >\n                +\n              </button>\n              <button onClick={() => delFieldMap(i)} className=\"icn-btn sh-sm ml-2\" type=\"button\" aria-label=\"btn\">\n                <TrashIcn />\n              </button>\n            </>\n          )\n        }\n\n        {/* {!isRequired\n        && (\n          <>\n            <button\n              onClick={() => addFieldMap(i)}\n              className=\"icn-btn sh-sm ml-2\"\n              type=\"button\"\n            >\n              +\n            </button>\n            <button onClick={() => delFieldMap(i)} className=\"icn-btn sh-sm ml-2\" type=\"button\" aria-label=\"btn\">\n              <TrashIcn />\n            </button>\n          </>\n        )} */}\n      </div>\n    </div>\n  )\n}\n","/* eslint-disable no-lonely-if */\n/* eslint-disable no-unused-expressions */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { __ } from '../../../Utils/i18nwrap'\nimport { addFieldMap } from '../IntegrationHelpers/IntegrationHelpers'\nimport GetgistFieldMap from './GetgistFieldMap'\n\nexport default function GetgistIntegLayout({ formFields, getgistConf, setGetgistConf, isLoading, setIsLoading, error, setError }) {\n  const contactTypes = [\n    { key: 'User', label: 'User' },\n    { key: 'Lead', label: 'Lead' },\n  ]\n  const uniqId = () => Math.floor((1 + Math.random()) * 0x100000000)\n    .toString(16)\n    .substring(1)\n  const handleInput = (e) => {\n    const { name, value } = e.target\n    const newConf = { ...getgistConf }\n    newConf[name] = value\n    if (value === 'User') {\n      if (value === 'User') newConf.userId = uniqId()\n    } else {\n      if (newConf?.userId) delete newConf.userId\n    }\n    setGetgistConf({ ...newConf })\n  }\n  return (\n    <>\n      <br />\n      <b className=\"wdt-200 d-in-b\">{__('User Type:', 'bit-integrations')}</b>\n      <select onChange={handleInput} name=\"user_type\" value={getgistConf?.user_type} className=\"btcd-paper-inp w-5\">\n        <option value=\"\">{__('Select User Type', 'bit-integrations')}</option>\n        {\n          contactTypes.map(({ key, label }) => (\n            <option key={key} value={key}>\n              {label}\n            </option>\n          ))\n        }\n      </select>\n      <div className=\"mt-4\">\n        <b className=\"wdt-100\">{__('Map Fields', 'bit-integrations')}</b>\n      </div>\n      <div className=\"btcd-hr mt-1\" />\n      <div className=\"flx flx-around mt-2 mb-2 btcbi-field-map-label\">\n        <div className=\"txt-dp\"><b>{__('Form Fields', 'bit-integrations')}</b></div>\n        <div className=\"txt-dp\"><b>{__('Gist Fields', 'bit-integrations')}</b></div>\n      </div>\n      {getgistConf?.field_map.map((itm, i) => (\n        <GetgistFieldMap\n          key={`getgist-m-${i + 9}`}\n          i={i}\n          field={itm}\n          getgistConf={getgistConf}\n          formFields={formFields}\n          setGetgistConf={setGetgistConf}\n        />\n      ))}\n      <div className=\"txt-center btcbi-field-map-button mt-2\"><button onClick={() => addFieldMap(getgistConf.field_map.length, getgistConf, setGetgistConf)} className=\"icn-btn sh-sm\" type=\"button\">+</button></div>\n      <br />\n      <br />\n    </>\n  )\n}\n"],"names":["handleInput","e","getgistConf","setGetgistConf","setIsLoading","newConf","__spreadValues","checkMappedFields","mappedField","generateMappedField","requiredFlds","fld","field","GetgistFieldMap","i","formFields","btcbi","useRecoilValue","$btcbi","isPro","_a","tmp","addFieldMap","indx","delFieldMap","handleFieldMapping","event","nonRequiredFlds","jsx","jsxs","ev","__","f","_b","SmartTagField","TagifyInput","handleCustomValue","_c","key","label","Fragment","TrashIcn","GetgistIntegLayout","isLoading","error","setError","contactTypes","uniqId","name","value","itm"],"mappings":"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"}