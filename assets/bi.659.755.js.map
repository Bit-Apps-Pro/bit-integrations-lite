{"version":3,"file":"bi.659.755.js","sources":["../frontend-dev/src/components/AllIntegrations/WishList/WishListCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __, sprintf } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, wishlistConf, setWishlistConf) => {\n  const newConf = { ...wishlistConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setWishlistConf({ ...newConf })\n}\n\nexport const getAllLevels = (wishlistConf, setWishlistConf, setIsLoading) => {\n  setIsLoading(true)\n  const queryParams = {\n    baseUrl: wishlistConf.baseUrl,\n    apiKey: wishlistConf.apiKey,\n  }\n  const loadPostTypes = bitsFetch(null, 'wishlist_get_all_levels', queryParams, 'GET')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...wishlistConf }\n        if (!newConf.default) newConf.default = {}\n        if (result.data.levellists) {\n          newConf.default.levellists = result.data.levellists\n        }\n        setWishlistConf({ ...newConf })\n        setIsLoading(false)\n        return 'Levels refreshed successfully'\n      } else {\n        setIsLoading(false)\n        return 'Levels refresh failed. please try again'\n      }\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Levels...'),\n  })\n  // .catch(() => setIsLoading(false))\n}\nexport const getAllMembers = (wishlistConf, setWishlistConf, setIsLoading) => {\n  setIsLoading(true)\n  const queryParams = {\n    baseUrl: wishlistConf.baseUrl,\n    apiKey: wishlistConf.apiKey,\n  }\n  const loadPostTypes = bitsFetch(null, 'wishlist_get_all_members', queryParams, 'GET')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...wishlistConf }\n        if (!newConf.default) newConf.default = {}\n        if (result.data.memberlists) {\n          newConf.default.memberlists = result.data.memberlists\n        }\n        setWishlistConf({ ...newConf })\n        setIsLoading(false)\n        return 'Members refreshed successfully'\n      } else {\n        setIsLoading(false)\n        return 'Members refresh failed. please try again'\n      }\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Members...'),\n  })\n  // .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (wishlistConf) => {\n  const wishlistFlds = wishlistConf?.actionName === 'level-member' ? wishlistConf?.memberFields : wishlistConf?.levelFields || []\n  const requiredFlds = wishlistFlds?.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', wishlistField: field.key })) : [{ formField: '', wishlistField: '' }]\n}\n\nexport const checkMappedFields = (wishlistConf) => {\n  const mappedFields = wishlistConf?.field_map ? wishlistConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.wishlistField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading) => {\n  if (!confTmp.baseUrl || !confTmp.apiKey) {\n    setError({\n      baseUrl: !confTmp.baseUrl ? __('Base URL can\\'t be empty', 'bit-integrations') : '',\n      apiKey: !confTmp.apiKey ? __('API Key can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n\n  setError({})\n  setIsLoading(true)\n\n  const tokenRequestParams = {\n    baseUrl: confTmp.baseUrl,\n    apiKey: confTmp.apiKey,\n  }\n\n  bitsFetch(tokenRequestParams, 'wishlist_authorization')\n    .then(result => result)\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setisAuthorized(true)\n        toast.success(__('Authorized Successfully', 'bit-integrations'))\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        toast.error(`${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}`)\n      } else {\n        toast.error(__('Authorization failed. please try again', 'bit-integrations'))\n      }\n      setIsLoading(false)\n    })\n}\n\n// export const handleInputAction = (e, wishlistConf, setWishlistConf, setIsLoading) => {\n//   const newConf = { ...wishlistConf }\n//   const { name } = e.target\n//   if (e.target.value !== '') {\n//     newConf[name] = e.target.value\n//   } else {\n//     delete newConf[name]\n//   }\n//   setWishlistConf({ ...newConf })\n//   // if (e.target.value === 'level-member') {\n//   //   getAllLevels(newConf, setWishlistConf, setIsLoading)\n//   // }\n//   // else {\n//   //   getAllMembers(newConf, setWishlistConf, setIsLoading)\n//   // }\n// }\n"],"names":["__","bitsFetch","_t","handleInput","wishlistConf","setWishlistConf","newConf","__spreadValues","name","getAllLevels","setIsLoading","queryParams","loadPostTypes","result","toast","data","getAllMembers","generateMappedField","wishlistFlds","requiredFlds","fld","field","checkMappedFields","mappedField","handleAuthorize","confTmp","setConf","setError","setisAuthorized","tokenRequestParams"],"mappings":"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"}