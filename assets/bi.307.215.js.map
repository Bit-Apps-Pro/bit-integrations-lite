{"version":3,"file":"bi.307.215.js","sources":["../frontend-dev/src/components/AllIntegrations/OneHashCRM/EditOneHashCRM.jsx"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n\nimport { useState } from 'react'\nimport { toast } from 'react-hot-toast'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { $actionConf, $formFields, $newFlow } from '../../../GlobalStates'\nimport { __ } from '../../../Utils/i18nwrap'\nimport SnackMsg from '../../Utilities/SnackMsg'\nimport EditFormInteg from '../EditFormInteg'\nimport EditWebhookInteg from '../EditWebhookInteg'\nimport { checkWebhookIntegrationsExist, saveActionConf } from '../IntegrationHelpers/IntegrationHelpers'\nimport IntegrationStepThree from '../IntegrationHelpers/IntegrationStepThree'\nimport { checkMappedFields, handleInput } from './OneHashCRMCommonFunc'\nimport OneHashCRMIntegLayout from './OneHashCRMIntegLayout'\n\nfunction EditOneHashCRM({ allIntegURL }) {\n  const navigate = useNavigate()\n  const { id } = useParams()\n  const [flow, setFlow] = useRecoilState($newFlow)\n  const [oneHashCRMConf, setOneHashCRMConf] = useRecoilState($actionConf)\n  const [isLoading, setIsLoading] = useState(false)\n  const [loading, setLoading] = useState({})\n  const [snack, setSnackbar] = useState({ show: false })\n  const formField = useRecoilValue($formFields)\n\n  const saveConfig = () => {\n    if (!checkMappedFields(oneHashCRMConf)) {\n      setSnackbar({ show: true, msg: __('Please map mandatory fields', 'bit-integrations') })\n      return\n    }\n\n    if (oneHashCRMConf.actionName === 'customer' && !oneHashCRMConf.selectedCustomerType) {\n      toast.error('Please select Customer Type')\n      return\n    }\n    if (oneHashCRMConf.actionName === 'lead' && !oneHashCRMConf.selectedLeadStatus) {\n      toast.error('Please select Lead Status')\n      return\n    }\n\n    saveActionConf({ flow, allIntegURL, conf: oneHashCRMConf, navigate, edit: 1, setIsLoading, setSnackbar })\n  }\n\n  return (\n    <div style={{ width: 900 }}>\n      <SnackMsg snack={snack} setSnackbar={setSnackbar} />\n\n      <div className=\"flx mt-3\">\n        <b className=\"wdt-200 d-in-b\">{__('Integration Name:', 'bit-integrations')}</b>\n        <input className=\"btcd-paper-inp w-5\" onChange={e => handleInput(e, oneHashCRMConf, setOneHashCRMConf)} name=\"name\" value={oneHashCRMConf.name} type=\"text\" placeholder={__('Integration Name...', 'bit-integrations')} />\n      </div>\n      <br />\n      {!checkWebhookIntegrationsExist(flow.triggered_entity) && <EditFormInteg setSnackbar={setSnackbar} />}\n      {checkWebhookIntegrationsExist(flow.triggered_entity) && <EditWebhookInteg setSnackbar={setSnackbar} />}\n      <OneHashCRMIntegLayout\n        formID={flow.triggered_entity_id}\n        formFields={formField}\n        handleInput={(e) => handleInput(e, oneHashCRMConf, setOneHashCRMConf, setLoading, setSnackbar)}\n        oneHashCRMConf={oneHashCRMConf}\n        setOneHashCRMConf={setOneHashCRMConf}\n        loading={loading}\n        setLoading={setLoading}\n        setIsLoading={setIsLoading}\n        setSnackbar={setSnackbar}\n      />\n\n      <IntegrationStepThree\n        edit\n        saveConfig={saveConfig}\n        disabled={!checkMappedFields(oneHashCRMConf)}\n        isLoading={isLoading}\n        dataConf={oneHashCRMConf}\n        setDataConf={setOneHashCRMConf}\n        formFields={formField}\n      />\n      <br />\n    </div>\n  )\n}\n\nexport default EditOneHashCRM\n"],"names":["useNavigate","useParams","Recoil_index_20","reactExports","Recoil_index_18","jsxRuntimeExports","$newFlow","$actionConf","$formFields","SnackMsg","__","n","EditFormInteg","EditWebhookInteg","checkWebhookIntegrationsExist","saveActionConf","IntegrationStepThree","handleInput","checkMappedFields","OneHashCRMIntegLayout","EditOneHashCRM","allIntegURL","navigate","flow","setFlow","useRecoilState","oneHashCRMConf","setOneHashCRMConf","isLoading","setIsLoading","useState","loading","setLoading","snack","setSnackbar","formField","useRecoilValue","saveConfig","toast","jsx","jsxs","e"],"mappings":"AAiBA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,MAAA,gBAAA,OAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,MAAAC,MAAA,iBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,iBAAA,MAAA,kBAAA,MAAA,kBAAA,MAAA,kBAAA,SAASC,EAAe,CAAE,YAAAC,GAAe,CACvC,MAAMC,EAAWtB,IACFC,EAAU,EACzB,KAAM,CAACsB,EAAMC,CAAO,EAAIC,EAAenB,CAAQ,EACzC,CAACoB,EAAgBC,CAAiB,EAAIF,EAAelB,CAAW,EAChE,CAACqB,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1C,CAACC,EAASC,CAAU,EAAIF,EAAA,SAAS,CAAE,CAAA,EACnC,CAACG,EAAOC,CAAW,EAAIJ,WAAS,CAAE,KAAM,GAAO,EAC/CK,EAAYC,EAAe5B,CAAW,EAEtC6B,EAAa,IAAM,CACnB,GAAA,CAACnB,EAAkBQ,CAAc,EAAG,CAC1BQ,EAAA,CAAE,KAAM,GAAM,IAAKxB,EAAG,8BAA+B,kBAAkB,EAAG,EACtF,MACF,CAEA,GAAIgB,EAAe,aAAe,YAAc,CAACA,EAAe,qBAAsB,CACpFY,EAAM,MAAM,6BAA6B,EACzC,MACF,CACA,GAAIZ,EAAe,aAAe,QAAU,CAACA,EAAe,mBAAoB,CAC9EY,EAAM,MAAM,2BAA2B,EACvC,MACF,CAEevB,EAAA,CAAE,KAAAQ,EAAM,YAAAF,EAAa,KAAMK,EAAgB,SAAAJ,EAAU,KAAM,EAAG,aAAAO,EAAc,YAAAK,CAAa,CAAA,CAAA,EAG1G,cACG,MAAI,CAAA,MAAO,CAAE,MAAO,GACnB,EAAA,SAAA,CAACK,EAAAA,IAAA9B,EAAA,CAAS,MAAAwB,EAAc,YAAAC,CAA0B,CAAA,EAElDM,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAG7B,EAAA,oBAAqB,kBAAkB,EAAE,EAC3E6B,EAAAA,IAAC,SAAM,UAAU,qBAAqB,SAAeE,GAAAxB,EAAYwB,EAAGf,EAAgBC,CAAiB,EAAG,KAAK,OAAO,MAAOD,EAAe,KAAM,KAAK,OAAO,YAAahB,EAAG,sBAAuB,kBAAkB,CAAG,CAAA,CAAA,EAC1N,QACC,KAAG,EAAA,EACH,CAACI,EAA8BS,EAAK,gBAAgB,GAAKgB,EAAAA,IAAC3B,GAAc,YAAAsB,EAA0B,EAClGpB,EAA8BS,EAAK,gBAAgB,GAAKgB,EAAA,IAAC1B,GAAiB,YAAAqB,EAA0B,EACrGK,EAAA,IAACpB,EAAA,CACC,OAAQI,EAAK,oBACb,WAAYY,EACZ,YAAcM,GAAMxB,EAAYwB,EAAGf,EAAgBC,CAA0C,EAC7F,eAAAD,EACA,kBAAAC,EACA,QAAAI,EACA,WAAAC,EACA,aAAAH,EACA,YAAAK,CAAA,CACF,EAEAK,EAAA,IAACvB,EAAA,CACC,KAAI,GACJ,WAAAqB,EACA,SAAU,CAACnB,EAAkBQ,CAAc,EAC3C,UAAAE,EACA,SAAUF,EACV,YAAaC,EACb,WAAYQ,CAAA,CACd,QACC,KAAG,EAAA,CACN,CAAA,CAAA,CAEJ"}