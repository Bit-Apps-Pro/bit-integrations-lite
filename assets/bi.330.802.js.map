{"version":3,"file":"bi.330.802.js","sources":["../frontend-dev/src/components/AllIntegrations/Klaviyo/KlaviyoCommonFunc.js"],"sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\nimport { __ } from \"../../../Utils/i18nwrap\";\nimport {\n  saveActionConf,\n  saveIntegConfig,\n} from \"../IntegrationHelpers/IntegrationHelpers\";\n\nexport const editHandleInput = (e, conf, setConf) => {\n  const newConf = { ...conf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setConf({ ...newConf });\n};\n\nexport const handleAuthorize = (\n  conf,\n  setConf,\n  setError,\n  setisAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!conf.authKey) {\n    setError({\n      authKey: !conf.authKey\n        ? __(\"API key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n  setError({});\n  setLoading({ ...loading, auth: true });\n\n  const requestParams = { authKey: conf.authKey };\n\n  bitsFetch(requestParams, \"klaviyo_handle_authorize\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...conf };\n      if (result.data) {\n        if (!newConf.default) {\n          newConf.default = {};\n        }\n        newConf.default.lists = result.data;\n      }\n      setConf(newConf);\n      setisAuthorized(true);\n      setLoading({ ...loading, auth: false });\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, auth: false });\n    toast.error(__(\"Authorized failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllLists = (conf, setConf, loading, setLoading) => {\n  setLoading({ ...loading, list: true });\n\n  const requestParams = { authKey: conf.authKey };\n\n  bitsFetch(requestParams, \"klaviyo_handle_authorize\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...conf };\n      if (result.data) {\n        if (!newConf.default) {\n          newConf.default = {};\n        }\n        newConf.default.lists = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...loading, list: false });\n\n      toast.success(__(\"List refresh successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, list: false });\n    toast.error(__(\"List refresh failed\", \"bit-integrations\"));\n  });\n};\n\nexport const generateMappedField = (klaviyoConf) => {\n  const requiredFlds = klaviyoConf?.klaviyoFields.filter(\n    (fld) => fld.required === true\n  );\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        klaviyoFormField: field.key,\n      }))\n    : [{ formField: \"\", klaviyoFormField: \"\" }];\n};\n\nexport const checkMappedFields = (klaviyoConf) => {\n  const mappedFields = klaviyoConf?.field_map\n    ? klaviyoConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.klaviyoFormField ||\n          (!mappedField.formField === \"custom\" && !mappedField.customValue)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const nextPage = (conf, setStep, pageNo) => {\n  setTimeout(() => {\n    document.getElementById(\"btcd-settings-wrp\").scrollTop = 0;\n  }, 300);\n\n  if (!checkMappedFields(conf)) {\n    toast.error(\"Please map mandatory fields\");\n    return;\n  }\n  conf.field_map.length > 0 && setStep(pageNo);\n};\n\nexport const saveConfig = (\n  flow,\n  setFlow,\n  allIntegURL,\n  conf,\n  navigate,\n  setIsLoading\n) => {\n  setIsLoading(true);\n  const resp = saveIntegConfig(\n    flow,\n    setFlow,\n    allIntegURL,\n    conf,\n    navigate,\n    \"\",\n    \"\",\n    setIsLoading\n  );\n  resp.then((res) => {\n    if (res.success) {\n      toast.success(res.data?.msg);\n      navigate(allIntegURL);\n    } else {\n      toast.error(res.data || res);\n    }\n  });\n};\n\nexport const saveUpdateConfig = (\n  flow,\n  allIntegURL,\n  conf,\n  navigate,\n  edit,\n  setIsLoading\n) => {\n  if (!checkMappedFields(conf)) {\n    toast.error(\"Please map mandatory fields\");\n    return;\n  }\n  if (checkMappedFields(conf) === \"required\") {\n    toast.error(\"You must select email or phone in klaviyo fields\");\n    return;\n  }\n  saveActionConf({ flow, allIntegURL, conf, navigate, edit, setIsLoading });\n};\n"],"names":["__","bitsFetch","_t","saveIntegConfig","saveActionConf","editHandleInput","conf","setConf","newConf","__spreadValues","name","handleAuthorize","setError","setisAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getAllLists","generateMappedField","klaviyoConf","requiredFlds","fld","field","checkMappedFields","mappedField","nextPage","setStep","pageNo","saveConfig","flow","setFlow","allIntegURL","navigate","setIsLoading","res","_a","saveUpdateConfig","edit"],"mappings":"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"}