{"version":3,"file":"bi.221.907.js","sources":["../frontend-dev/src/components/AllIntegrations/Salesflare/SalesflareCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\nimport { __ } from \"../../../Utils/i18nwrap\";\n\nexport const handleInput = (e, salesflareConf, setSalesflareConf) => {\n  const newConf = { ...salesflareConf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setSalesflareConf({ ...newConf });\n};\n\nexport const generateMappedField = (salesflareConf) => {\n  const requiredFlds =\n    salesflareConf?.salesflareAllFields &&\n    salesflareConf?.salesflareAllFields.filter(\n      (fld) =>\n        fld.required === true && fld.key !== \"owner\" && fld.key !== \"pipeline\"\n    );\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        salesflareFormField: field.key,\n      }))\n    : [{ formField: \"\", salesflareFormField: \"\" }];\n};\n\nexport const checkMappedFields = (salesflareConf) => {\n  const mappedFields = salesflareConf?.field_map\n    ? salesflareConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.salesflareFormField ||\n          (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n          (mappedField.salesflareFormField === \"customFieldKey\" &&\n            !mappedField.customFieldKey)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const salesflareAuthentication = (\n  confTmp,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.api_key) {\n    setError({\n      api_key: !confTmp.api_key\n        ? __(\"Api Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n\n  setError({});\n  setLoading({ ...loading, auth: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n  };\n\n  bitsFetch(requestParams, \"salesflare_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true);\n      setLoading({ ...loading, auth: false });\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, auth: false });\n    toast.error(\n      __(\"Authorized failed, Please enter valid API Key\", \"bit-integrations\")\n    );\n  });\n};\n\nexport const salesflareFields = (\n  salesflareConf,\n  setSalesflareConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = {\n    api_key: salesflareConf.api_key,\n    action_name: salesflareConf.actionName,\n  };\n\n  bitsFetch(requestParams, \"Salesflare_custom_fields\")\n    .then((result) => {\n      if (result && result.success) {\n        setSalesflareConf((prevConf) => {\n          const draftConf = prevConf;\n          draftConf.field_map = [{ formField: \"\", salesmateFormField: \"\" }];\n          if (result.data) {\n            draftConf.salesflareAllFields = [];\n            draftConf.salesflareAllFields = [\n              ...draftConf.salesflareFields,\n              ...result.data,\n            ];\n          }\n          draftConf.field_map = generateMappedField(draftConf);\n          return draftConf;\n        });\n        setSnackbar({\n          show: true,\n          msg: __(\"Salesflare custom fields refreshed\", \"bit-integrations\"),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\"Salesflare custom fields not found.\", \"bit-integrations\"),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const getAllTags = (salesflareConf, setSalesflareConf, setLoading) => {\n  setLoading({ ...setLoading, tags: true });\n  const requestParams = {\n    api_key: salesflareConf.api_key,\n  };\n\n  bitsFetch(requestParams, \"Salesflare_fetch_all_tags\").then((result) => {\n    if (result && result.success) {\n      setSalesflareConf((prevConf) => {\n        const draftConf = { ...prevConf };\n        draftConf.tags = result.data;\n        return draftConf;\n      });\n\n      toast.success(__(\"Tags fetched successfully\", \"bit-integrations\"));\n      setLoading({ ...setLoading, tags: false });\n      return;\n    }\n    setLoading({ ...setLoading, tags: false });\n    toast.error(__(\"Tags fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getallAccounts = (\n  salesflareConf,\n  setSalesflareConf,\n  loading,\n  setLoading\n) => {\n  setLoading({ ...loading, account: true });\n  const requestParams = {\n    api_key: salesflareConf.api_key,\n  };\n\n  bitsFetch(requestParams, \"Salesflare_fetch_all_account\").then((result) => {\n    if (result && result.success) {\n      setSalesflareConf((prevConf) => {\n        const draftConf = { ...prevConf };\n        draftConf.accounts = result.data;\n        return draftConf;\n      });\n\n      toast.success(__(\"Accounts fetched successfully\", \"bit-integrations\"));\n      setLoading({ ...loading, account: false });\n      return;\n    }\n    setLoading({ ...loading, account: false });\n    toast.error(__(\"Accounts fetching failed\", \"bit-integrations\"));\n  });\n};\nexport const getallPipelines = (\n  salesflareConf,\n  setSalesflareConf,\n  loading,\n  setLoading\n) => {\n  setLoading({ ...loading, pipeline: true });\n  const requestParams = {\n    api_key: salesflareConf.api_key,\n  };\n\n  bitsFetch(requestParams, \"Salesflare_fetch_all_pipelines\").then((result) => {\n    if (result && result.success) {\n      setSalesflareConf((prevConf) => {\n        const draftConf = { ...prevConf };\n        draftConf.pipelines = result.data;\n        return draftConf;\n      });\n\n      toast.success(__(\"pipelines fetched successfully\", \"bit-integrations\"));\n      setLoading({ ...loading, pipeline: false });\n      return;\n    }\n    setLoading({ ...loading, pipeline: false });\n    toast.error(__(\"pipelines fetching failed\", \"bit-integrations\"));\n  });\n};\n"],"names":["__","bitsFetch","_t","handleInput","e","salesflareConf","setSalesflareConf","newConf","__spreadValues","name","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","salesflareAuthentication","confTmp","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","salesflareFields","setIsLoading","setSnackbar","prevConf","draftConf","getAllTags","getallAccounts","getallPipelines"],"mappings":"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"}