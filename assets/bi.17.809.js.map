{"version":3,"file":"bi.17.809.js","sources":["../frontend-dev/src/components/AllIntegrations/PipeDrive/PipeDriveCommonFunc.js"],"sourcesContent":["/* eslint-disable radix */\n/* eslint-disable no-unused-expressions */\nimport toast from \"react-hot-toast\";\nimport { __, sprintf } from \"../../../Utils/i18nwrap\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\n\nexport const handleInput = (\n  e,\n  recordTab,\n  pipeDriveConf,\n  setPipeDriveConf,\n  formID,\n  setIsLoading,\n  setSnackbar,\n  isNew,\n  error,\n  setError\n) => {\n  let newConf = { ...pipeDriveConf };\n  if (recordTab === 0) {\n    if (isNew) {\n      const rmError = { ...error };\n      rmError[e.target.name] = \"\";\n      setError({ ...rmError });\n    }\n    if (e.target.value !== \"\") {\n      if (e.target.name !== \"module\") {\n        newConf.moduleData[e.target.name] = parseInt(e.target.value);\n      } else {\n        newConf.moduleData = {};\n        newConf.moduleData[e.target.name] = e.target.value;\n      }\n    } else {\n      delete newConf.moduleData[e.target.name];\n    }\n  } else {\n    if (!newConf.relatedlists) {\n      newConf.relatedlists = [];\n    }\n    if (e.target.value !== \"\") {\n      if (e.target.name !== \"module\") {\n        newConf.relatedlists[recordTab - 1][e.target.name] = parseInt(\n          e.target.value\n        );\n      } else {\n        newConf.relatedlists[recordTab - 1].moduleData = {};\n        newConf.relatedlists[recordTab - 1][e.target.name] = e.target.value;\n      }\n    } else {\n      delete newConf.relatedlists[recordTab - 1][e.target.name];\n    }\n  }\n\n  switch (e.target.name) {\n    case \"module\":\n      newConf = moduleChange(\n        recordTab,\n        formID,\n        newConf,\n        setPipeDriveConf,\n        setIsLoading,\n        setSnackbar\n      );\n      break;\n    default:\n      break;\n  }\n  setPipeDriveConf({ ...newConf });\n};\n\nexport const handleTabChange = (recordTab, settab) => {\n  settab(recordTab);\n};\n\nexport const moduleChange = (\n  recordTab,\n  formID,\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  const newConf = { ...pipeDriveConf };\n  if (!newConf.relatedlists[recordTab - 1])\n    newConf.relatedlists[recordTab - 1] = {};\n  const module =\n    recordTab === 0\n      ? newConf.moduleData.module\n      : newConf.relatedlists[recordTab - 1].module;\n\n  if (recordTab === 0) {\n    newConf.actions = {};\n    newConf.field_map = [{ formField: \"\", pipeDriveFormField: \"\" }];\n    newConf.relatedlists = [];\n    if ([\"Leads\", \"Deals\", \"Activities\", \"Notes\"].includes(module)) {\n      !newConf.default.organizations &&\n        refreshOrganizations(\n          newConf,\n          setPipeDriveConf,\n          setIsLoading,\n          setSnackbar\n        );\n      !newConf.default.persons &&\n        refreshPersons(newConf, setPipeDriveConf, setIsLoading, setSnackbar);\n    }\n\n    if (\n      !newConf.default.modules?.[module]?.fields &&\n      module !== \"\" &&\n      module !== undefined\n    ) {\n      setTimeout(() => {\n        refreshFields(module, newConf, setPipeDriveConf, recordTab);\n      }, 1000);\n    } else {\n      newConf.field_map = newConf.default.modules?.[module]?.requiredFields\n        ? generateMappedField(recordTab, newConf)\n        : [{ formField: \"\", pipeDriveFormField: \"\" }];\n    }\n  } else {\n    newConf.relatedlists[recordTab - 1].actions = {};\n    newConf.relatedlists[recordTab - 1].field_map = [\n      { formField: \"\", pipeDriveFormField: \"\" },\n    ];\n    if (\n      !newConf.default.modules?.[module]?.fields &&\n      module !== \"\" &&\n      module !== undefined\n    ) {\n      setTimeout(() => {\n        refreshFields(module, newConf, setPipeDriveConf, recordTab);\n      }, 1000);\n    } else {\n      newConf.relatedlists[recordTab - 1].field_map = newConf.default.modules?.[\n        module\n      ]?.requiredFields\n        ? generateMappedField(recordTab, newConf)\n        : [{ formField: \"\", pipeDriveFormField: \"\" }];\n    }\n  }\n\n  return newConf;\n};\n\nexport const refreshFields = (\n  module,\n  pipeDriveConf,\n  setPipeDriveConf,\n  recordTab\n) => {\n  const requestParams = { api_key: pipeDriveConf.api_key, module };\n  bitsFetch(requestParams, \"PipeDrive_refresh_fields\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...pipeDriveConf };\n      if (!newConf.default.modules[module].fields)\n        newConf.default.modules[module].fields = {};\n      if (result.data) {\n        newConf.default.modules[module].fields = result.data;\n        if (recordTab === 0) {\n          newConf.field_map = newConf.default.modules?.[module]?.requiredFields\n            ? generateMappedField(recordTab, newConf)\n            : [{ formField: \"\", pipeDriveFormField: \"\" }];\n        } else {\n          newConf.relatedlists[recordTab - 1].field_map = newConf.default\n            .modules?.[module]?.requiredFields\n            ? generateMappedField(recordTab, newConf)\n            : [{ formField: \"\", pipeDriveFormField: \"\" }];\n        }\n      }\n      setPipeDriveConf({ ...newConf });\n    }\n  });\n};\n\nexport const refreshOrganizations = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = {\n    api_key: pipeDriveConf.api_key,\n    type: \"organizations\",\n  };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.organizations) newConf.default.organizations = {};\n        if (result.data) {\n          newConf.default.organizations = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Organizations refreshed\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Organizations refresh failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Organizations refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const refreshPersons = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = { api_key: pipeDriveConf.api_key, type: \"persons\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.persons) newConf.default.persons = {};\n        if (result.data) {\n          newConf.default.persons = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Persons refreshed\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Persons refresh failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Persons refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const getAllOwners = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = { api_key: pipeDriveConf.api_key, type: \"users\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.owners) newConf.default.owners = {};\n        if (result.data) {\n          newConf.default.owners = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Owners fetched successfully\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Owners fetch failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\"Owners fetch failed. please try again\", \"bit-integrations\"),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const getAllLeadLabels = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = { api_key: pipeDriveConf.api_key, type: \"leadLabels\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.leadLabels) newConf.default.leadLabels = {};\n        if (result.data) {\n          newConf.default.leadLabels = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Labels fetched successfully\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Labels fetch failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\"Labels fetch failed. please try again\", \"bit-integrations\"),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\nexport const getAllCurrencies = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = { api_key: pipeDriveConf.api_key, type: \"currencies\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.currencies) newConf.default.currencies = {};\n        if (result.data) {\n          newConf.default.currencies = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Currencies fetched successfully\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Currencies fetch failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Currencies fetch failed. please try again\",\n            \"bit-integrations\"\n          ),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const getDealStages = (\n  pipeDriveConf,\n  setPipeDriveConf,\n  setIsLoading,\n  setSnackbar\n) => {\n  setIsLoading(true);\n  const requestParams = { api_key: pipeDriveConf.api_key, type: \"stages\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\")\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...pipeDriveConf };\n        if (!newConf.default.stages) newConf.default.stages = {};\n        if (result.data) {\n          newConf.default.stages = result.data;\n        }\n        setPipeDriveConf({ ...newConf });\n        setSnackbar({\n          show: true,\n          msg: __(\"Stages fetched successfully\", \"bit-integrations\"),\n        });\n      } else if (\n        (result && result.data && result.data.data) ||\n        (!result.success && typeof result.data === \"string\")\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              \"Stages fetch failed Cause: %s. please try again\",\n              \"bit-integrations\"\n            ),\n            result.data.data || result.data\n          ),\n        });\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\"Stages fetch failed. please try again\", \"bit-integrations\"),\n        });\n      }\n      setIsLoading(false);\n    })\n    .catch(() => setIsLoading(false));\n};\n\nexport const generateMappedField = (recordTab, pipeDriveConf) => {\n  const module =\n    recordTab === 0\n      ? pipeDriveConf.moduleData.module\n      : pipeDriveConf.relatedlists[recordTab - 1].module;\n\n  const requiredFlds = pipeDriveConf?.default?.modules?.[\n    module\n  ]?.fields?.filter((fld) => fld.required === true);\n  return requiredFlds?.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        pipeDriveFormField: field.key,\n      }))\n    : [{ formField: \"\", pipeDriveFormField: \"\" }];\n};\n\nexport const checkMappedFields = (pipeDriveConf) => {\n  const mappedFields = pipeDriveConf?.field_map\n    ? pipeDriveConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField &&\n          mappedField.pipeDriveFormField &&\n          pipeDriveConf?.default?.modules?.[\n            pipeDriveConf.moduleData.module\n          ]?.requiredFields?.indexOf(mappedField.pipeDriveFormField) !== -1\n      )\n    : [];\n  const mappedRelatedFields = pipeDriveConf.relatedlists.map((relatedlist) =>\n    relatedlist.field_map.filter(\n      (mappedField) => !mappedField.formField && mappedField.pipeDriveFormField\n    )\n  );\n  if (\n    mappedFields.length > 0 ||\n    mappedRelatedFields.some((relatedField) => relatedField.length)\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const checkRequired = (pipeDriveConf) => {\n  if (\n    pipeDriveConf.moduleData?.module !== \"\" &&\n    pipeDriveConf.default.modules?.[pipeDriveConf?.moduleData?.module]?.required\n  ) {\n    if (\n      [\"Leads\", \"Deals\", \"Activities\", \"Notes\"].includes(\n        pipeDriveConf.moduleData.module\n      ) &&\n      pipeDriveConf.moduleData.organization_id === undefined &&\n      pipeDriveConf.moduleData?.person_id === undefined\n    ) {\n      return false;\n    }\n\n    // if (pipeDriveConf.moduleData.module === 'Persons' && pipeDriveConf.moduleData.organization_id === undefined) {\n    //   return false\n    // }\n  }\n  return true;\n};\n\nexport const handleAuthorize = (\n  confTmp,\n  setError,\n  setisAuthorized,\n  setIsLoading\n) => {\n  if (!confTmp.api_key) {\n    setError({\n      api_key: !confTmp.api_key\n        ? __(\"Api Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n  setError({});\n  setIsLoading(true);\n  const requestParams = { api_key: confTmp.api_key, type: \"persons\" };\n\n  bitsFetch(requestParams, \"PipeDrive_fetch_meta_data\").then((result) => {\n    if (result && result.success) {\n      setisAuthorized(true);\n      setIsLoading(false);\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setIsLoading(false);\n    toast.error(__(\"Authorized failed\", \"bit-integrations\"));\n  });\n};\n"],"names":["__","bitsFetch","_t","sprintf","handleInput","e","recordTab","pipeDriveConf","setPipeDriveConf","formID","setIsLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","rmError","moduleChange","handleTabChange","settab","_a","_b","_c","_d","_e","_f","_g","_h","module","refreshOrganizations","refreshPersons","refreshFields","generateMappedField","requestParams","result","getAllOwners","getAllLeadLabels","getAllCurrencies","getDealStages","requiredFlds","fld","field","checkMappedFields","mappedFields","mappedField","mappedRelatedFields","relatedlist","relatedField","checkRequired","handleAuthorize","confTmp","setisAuthorized","toast"],"mappings":"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"}