{"version":3,"file":"bi.449.870.js","sources":["../frontend-dev/src/components/AllIntegrations/MailMint/MailMintCommonFunc.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, mailMintConf, setMailMintConf, setIsLoading, setSnackbar, formID) => {\n  const newConf = { ...mailMintConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  newConf[e.target.name] = e.target.value\n  setMailMintConf({ ...newConf })\n}\n\nexport const mailMintRefreshFields = (mailMintConf, setMailMintConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  bitsFetch(null, 'fetch_all_mail_mint_custom_fields')\n    .then((result) => {\n      if (result && result.success) {\n        setMailMintConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.default.allCustomFields = result.data\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        toast.success(__('All custom field fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Mail Mint custom field fetch failed. please try again', 'bit-integrations'))\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const getAllList = (mailMintConf, setMailMintConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  bitsFetch(null, 'fetch_all_mail_mint_list')\n    .then((result) => {\n      if (result && result.success) {\n        setMailMintConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.default.allLists = result.data\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        toast.success(__('All list fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Mail mint list fetch failed. please try again', 'bit-integrations'))\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const getAllTags = (mailMintConf, setMailMintConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  bitsFetch(null, 'fetch_all_mail_mint_tags')\n    .then((result) => {\n      if (result && result.success) {\n        setMailMintConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          if (result.data) {\n            newConf.default.allTags = result.data\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        toast.success(__('All tags fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Mail Mint fetch failed. please try again', 'bit-integrations'))\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (mailMintConf) => {\n  const requiredFlds = mailMintConf?.mailMintContactFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', mailMintFormField: field.key })) : [{ formField: '', mailMintFormField: '' }]\n}\n\nexport const checkMappedFields = (mailMintConf) => {\n  const mappedFleld = mailMintConf.field_map ? mailMintConf.field_map.filter((mapped) => !mapped.formField && !mapped.mailMintFormField) : []\n  if (mappedFleld.length > 0) {\n    return false\n  }\n  return true\n}\n"],"names":["bitsFetch","_t","__","handleInput","mailMintConf","setMailMintConf","setIsLoading","setSnackbar","formID","newConf","__spreadValues","name","getAllList","result","oldConf","toast","getAllTags","generateMappedField","requiredFlds","fld","field"],"mappings":"yVAKY,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,MAAA,iBAAA,MAACC,EAAc,CAAC,EAAGC,EAAcC,EAAiBC,EAAcC,EAAaC,IAAW,CAClG,MAAMC,EAAUC,EAAA,GAAKN,GACf,CAAE,KAAAO,GAAS,EAAE,OACf,EAAE,OAAO,QAAU,GACrBF,EAAQE,CAAI,EAAI,EAAE,OAAO,MAEzB,OAAOF,EAAQE,CAAI,EAErBF,EAAQ,EAAE,OAAO,IAAI,EAAI,EAAE,OAAO,MAClCJ,EAAgBK,EAAA,GAAKD,EAAS,CAChC,EA2BaG,EAAa,CAACR,EAAcC,EAAiBC,EAAcC,IAAgB,CACtFD,EAAa,EAAI,EACjBN,EAAU,KAAM,0BAA0B,EACvC,KAAMa,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5BR,EAAiBS,GAAY,CAC3B,MAAML,EAAUC,EAAA,GAAKI,GACrB,OAAKL,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBI,EAAO,OACTJ,EAAQ,QAAQ,SAAWI,EAAO,MAE7BJ,CACjB,CAAS,EACDH,EAAa,EAAK,EAClBS,EAAM,QAAQb,EAAG,gCAAiC,kBAAkB,CAAC,EACrE,MACD,CACDI,EAAa,EAAK,EAClBS,EAAM,MAAMb,EAAG,gDAAiD,kBAAkB,CAAC,CACzF,CAAK,EACA,MAAM,IAAMI,EAAa,EAAK,CAAC,CACpC,EAEaU,EAAa,CAACZ,EAAcC,EAAiBC,EAAcC,IAAgB,CACtFD,EAAa,EAAI,EACjBN,EAAU,KAAM,0BAA0B,EACvC,KAAMa,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5BR,EAAiBS,GAAY,CAC3B,MAAML,EAAUC,EAAA,GAAKI,GACrB,OAAKL,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBI,EAAO,OACTJ,EAAQ,QAAQ,QAAUI,EAAO,MAE5BJ,CACjB,CAAS,EACDH,EAAa,EAAK,EAClBS,EAAM,QAAQb,EAAG,gCAAiC,kBAAkB,CAAC,EACrE,MACD,CACDI,EAAa,EAAK,EAClBS,EAAM,MAAMb,EAAG,2CAA4C,kBAAkB,CAAC,CACpF,CAAK,EACA,MAAM,IAAMI,EAAa,EAAK,CAAC,CACpC,EAEaW,EAAuBb,GAAiB,CACnD,MAAMc,EAAed,GAAA,YAAAA,EAAc,sBAAsB,OAAOe,GAAOA,EAAI,WAAa,IACxF,OAAOD,EAAa,OAAS,EAAIA,EAAa,IAAIE,IAAU,CAAE,UAAW,GAAI,kBAAmBA,EAAM,GAAK,EAAC,EAAI,CAAC,CAAE,UAAW,GAAI,kBAAmB,GAAI,CAC3J"}