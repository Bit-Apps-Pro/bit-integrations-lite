{"version":3,"file":"bi.523.785.js","sources":["../frontend-dev/src/components/AllIntegrations/MailerLite/MailerLiteCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport { __ } from \"../../../Utils/i18nwrap\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\n\nexport const handleInput = (\n  e,\n  mailerLiteConf,\n  setMailerLiteConf,\n  setLoading,\n  setSnackbar,\n  isNew,\n  error,\n  setError\n) => {\n  const newConf = { ...mailerLiteConf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setMailerLiteConf({ ...newConf });\n};\n\nexport const generateMappedField = (mailerLiteConf) => {\n  const requiredFlds = mailerLiteConf?.mailerLiteFields.filter(\n    (fld) => fld.required === true\n  );\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        mailerLiteFormField: field.key,\n      }))\n    : [{ formField: \"\", mailerLiteFormField: \"\" }];\n};\n\nexport const checkMappedFields = (mailerLiteConf) => {\n  const mappedFields = mailerLiteConf?.field_map\n    ? mailerLiteConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.mailerLiteFormField ||\n          (!mappedField.formField === \"custom\" && !mappedField.customValue)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\nexport const mailerliteRefreshFields = (\n  confTmp,\n  setConf,\n  setError,\n  setisAuthorized,\n  loading,\n  setLoading,\n  type\n) => {\n  if (!confTmp.auth_token) {\n    setError({\n      auth_token: !confTmp.auth_token\n        ? __(\"Api Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n  setError({});\n  if (type === \"authorization\") {\n    setLoading({ ...loading, auth: true });\n  } else {\n    setLoading({ ...loading, field: true });\n  }\n\n  const requestParams = {\n    auth_token: confTmp.auth_token,\n    version: confTmp.version,\n  };\n\n  bitsFetch(requestParams, \"mailerlite_refresh_fields\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.mailerLiteFields = result.data;\n      }\n      setConf(newConf);\n      setisAuthorized(true);\n      if (type === \"authorization\") {\n        setLoading({ ...loading, auth: false });\n        toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      } else {\n        setLoading({ ...loading, field: false });\n        toast.success(__(\"Fields refresh successfully\", \"bit-integrations\"));\n      }\n      return;\n    }\n    if (type === \"authorization\") {\n      setLoading({ ...loading, auth: false });\n      toast.error(__(\"Authorized failed\", \"bit-integrations\"));\n    } else {\n      setLoading({ ...loading, field: false });\n      toast.error(__(\"Fields refresh failed\", \"bit-integrations\"));\n    }\n  });\n};\n\nexport const getAllGroups = (confTmp, setConf, loding, setLoading) => {\n  setLoading({ ...setLoading, group: true });\n\n  const requestParams = {\n    auth_token: confTmp.auth_token,\n    version: confTmp.version,\n  };\n\n  bitsFetch(requestParams, \"mailerlite_fetch_all_groups\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.groups = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, group: false });\n\n      toast.success(__(\"Group fetch successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, group: false });\n    toast.error(__(\"Group fetch failed\", \"bit-integrations\"));\n  });\n};\n"],"names":["__","bitsFetch","_t","handleInput","mailerLiteConf","setMailerLiteConf","setLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","name","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","mailerliteRefreshFields","confTmp","setConf","setisAuthorized","loading","type","__spreadProps","requestParams","result","toast","getAllGroups","loding"],"mappings":"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"}