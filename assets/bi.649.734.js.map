{"version":3,"file":"bi.649.734.js","sources":["../frontend-dev/src/components/Utilities/TinyMCE.tsx"],"sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-undef */\nimport { useRecoilValue } from 'recoil'\nimport { $btcbi } from '../../GlobalStates'\nimport { __ } from '../../Utils/i18nwrap'\nimport { SmartTagField } from '../../Utils/StaticData/SmartTagField'\nimport { useEffect, useState } from 'react'\nimport '../../resource/css/tinymce.css'\nimport { loadScript } from '../../Utils/Helpers'\n\n// export default function TinyMCE({ formFields, id, value, onChangeHandler, toolbarMnu, height, width }) {\n//   useEffect(() => {\n//     window.tinymce && tinymce.remove()\n//     return () => window.tinymce && tinymce.remove()\n//   }, [])\n\n//   useEffect(() => {\n//     window.tinymce && tinymce.remove()\n//     timyMceInit()\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [formFields, id])\n\n//   const btcbi = useRecoilValue($btcbi)\n//   const { isPro } = btcbi\n\n//   const timyMceInit = () => {\n//     if (typeof tinymce !== 'undefined' && (!formFields || formFields?.length > 0)) {\n//       const s = document.querySelectorAll('.form-fields-em')\n//       for (let i = 0; i < s.length; i += 1) {\n//         s[i].style.display = 'none'\n//       }\n//       // eslint-disable-next-line no-undef\n//       tinymce.init({\n//         selector: `textarea#${id}-settings`,\n//         height: height || 150,\n//         width: width || '100%',\n//         branding: false,\n//         resize: 'verticle',\n//         convert_urls: false,\n//         theme: 'modern',\n//         plugins: 'directionality fullscreen image link media charmap hr lists textcolor colorpicker wordpress',\n//         toolbar: toolbarMnu || 'formatselect | fontsizeselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat toggleCode wp_code| addFormField | addSmartField',\n//         image_advtab: true,\n//         default_link_target: '_blank',\n//         setup(editor) {\n//           editor.on('Paste Change input Undo Redo', () => {\n//             onChangeHandler(editor.getContent())\n//           })\n\n//           formFields && editor.addButton('addFormField', {\n//             text: 'Form Fields ',\n//             tooltip: 'Add Form Field Value in Message',\n//             type: 'menubutton',\n//             icon: false,\n//             menu: formFields?.map(i => i.type !== undefined && !i.type.match(/^(file|recaptcha)$/) && ({ text: i.label, onClick() { editor.insertContent(`\\${${i.name}}`) } })),\n//           })\n\n//           isPro && SmartTagField && editor.addButton('addSmartField', {\n//             text: 'Smart Tag Fields',\n//             tooltip: 'Add Smart Tag Field Value in Message',\n//             type: 'menubutton',\n//             icon: false,\n//             menu: SmartTagField?.map(i => ({ text: i.label, onClick() { editor.insertContent(`\\${${i.name}}`) } })),\n//           })\n\n//           editor.addButton('toggleCode', {\n//             text: '</>',\n//             tooltip: __('Toggle preview', 'bitwpfi'),\n//             icon: false,\n//             onclick(e) {\n//               const { $ } = e.control\n//               const myTextarea = $(`#${id}-settings`)\n//               const myIframe = $(editor.iframeElement)\n//               myTextarea.value = editor.getContent({ source_view: true })\n//               myIframe.toggleClass('hidden')\n//               myTextarea.toggleClass('visible')\n//               if ($('iframe.hidden').length > 0) {\n//                 myTextarea.prependTo('.mce-edit-area')\n//               } else {\n//                 editor.setContent(document.getElementById(`${id}-settings`).value)\n//               }\n//             },\n//           })\n//         },\n//       })\n//     }\n//   }\n\n//   return (\n//     <textarea\n//       id={`${id}-settings`}\n//       className=\"btcd-paper-inp mt-1\"\n//       rows=\"5\"\n//       value={value}\n//       onChange={(ev) => onChangeHandler(ev.target.value)}\n//       style={{ width: '95.5%', height: 'auto' }}\n//     />\n//   )\n// }\n\nexport default function TinyMCE({\n  id,\n  value,\n  formFields,\n  SmartTagField,\n  onChangeHandler,\n  toolbarMnu,\n  menubar,\n  height,\n  width,\n  disabled,\n  plugins\n}: TinyMCEProps) {\n  const editorId = `${id}-settings`\n  const CDN_SOURCE_URL = 'https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.11'\n  const [isLoaded, setIsLoaded] = useState(typeof window.tinymce !== 'undefined')\n  const editorLoadedFromCDN = isLoaded && window.tinymce.baseURI.source === CDN_SOURCE_URL\n  const loadTinyMceScript = async () => {\n    const res = await loadScript({\n      src: CDN_SOURCE_URL + '/tinymce.min.js',\n      integrity: 'sha256-SnRzknLClR3GaNw9oN4offMGFiPbXQTP7q0yFLPPwgY=',\n      id: 'tinymceCDN'\n    })\n    if (!res) {\n      console.warn('Is your internet working properly to load script?')\n    }\n    const tinyIntervalId = setInterval(() => {\n      if (typeof window.tinymce !== 'undefined') {\n        clearInterval(tinyIntervalId)\n        setIsLoaded(true)\n      }\n    }, 100)\n  }\n\n  useEffect(() => {\n    if (!isLoaded) loadTinyMceScript()\n    timyMceInit()\n    return () => {\n      const activeEditor = window.tinymce?.get(editorId) || null\n      if (activeEditor) activeEditor.remove()\n    }\n  }, [isLoaded])\n\n  const insertFieldKey = (fld: FieldType) => {\n    if (fld.type === 'signature') {\n      return `<img width=\"250\" src=\"\\${${fld.name}}\" alt=\"${fld.name}\" />`\n    }\n    return `\\${${fld.name}}`\n  }\n\n  const timyMceInit = () => {\n    if (window && window.tinymce) {\n      window.tinymce.init({\n        selector: `textarea#${editorId}`,\n        menubar,\n        height: height || 150,\n        width: width || '100%',\n        branding: false,\n        resize: 'verticle',\n        convert_urls: false,\n        theme: 'modern',\n        plugins:\n          plugins ||\n          `directionality fullscreen image link media charmap hr lists textcolor colorpicker ${!editorLoadedFromCDN ? 'wordpress' : ''\n          }`,\n        toolbar:\n          toolbarMnu ||\n          'formatselect | fontsizeselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat toogleCode wp_code | addFormField | addSmartField',\n        image_advtab: true,\n        default_link_target: '_blank',\n        setup(editor: any) {\n          editor.on('Paste Change input Undo Redo', () => {\n            onChangeHandler(editor.getContent())\n          })\n          formFields && editor.addButton('addFormField', {\n            text: 'Form Fields ',\n            tooltip: 'Add Form Field Value in Message',\n            type: 'menubutton',\n            icon: false,\n            menu: formFields?.map(i => !i.type.match(/^(file-up|recaptcha|section|divider|image|advanced-file-up|)$/) && ({ text: i.name, onClick() { editor.insertContent(insertFieldKey(i)) } })),\n          })\n          SmartTagField && editor.addButton('addSmartField', {\n            text: 'Smart Tag Fields',\n            tooltip: 'Add Smart Tag Field Value in Message',\n            type: 'menubutton',\n            icon: false,\n            menu: SmartTagField?.map(i => ({ text: i.label, onClick() { editor.insertContent(`\\${${i.name}}`) } })),\n          })\n          editor.addButton('toogleCode', {\n            text: '</>',\n            tooltip: 'Toggle preview',\n            icon: false,\n            onclick(e: any) {\n              const { $ } = e.control\n              const myTextarea = $(`#${editorId}`)\n              const myIframe = $(editor.iframeElement)\n              myTextarea.value = editor.getContent({ source_view: true })\n              myIframe.toggleClass('btcd-mce-tinymce-hidden')\n              myTextarea.toggleClass('btcd-mce-tinymce-visible')\n              console.log('clicked', myTextarea, myIframe)\n              if ($('iframe.btcd-mce-tinymce-hidden').length > 0) {\n                myTextarea.prependTo('.mce-edit-area')\n              } else {\n                const el = document.getElementById(editorId)\n                if (el instanceof HTMLTextAreaElement) {\n                  editor.setContent(el.value)\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n  }\n\n  return (\n    <textarea\n      id={editorId}\n      className=\"btcd-paper-inp mt-1 w-10\"\n      rows={5}\n      value={value}\n      onChange={ev => onChangeHandler(ev.target.value)}\n      style={{ width: '95.5%', height: 'auto' }}\n      disabled={disabled}\n    />\n  )\n}\n\ntype FieldType = { key: string, type: string, name: string }\ntype SmartTagType = { label: string, name: string }\n\ntype TinyMCEProps = {\n  id: string\n  value: string\n  formFields?: FieldType[]\n  SmartTagField?: SmartTagType[]\n  onChangeHandler: (e: any) => void\n  toolbarMnu?: string\n  menubar?: string\n  height?: string | number\n  width?: string | number\n  disabled?: boolean\n  plugins?: string\n  init?: any\n  get?: any\n  remove?: any\n}\n\ndeclare global {\n  interface Window {\n    tinymce: {\n      init: ({ }) => void\n      baseURI: {\n        source: string\n      }\n      get: (id: string) => {\n        remove: () => void\n      }\n    }\n  }\n}"],"names":["reactExports","jsxRuntimeExports","loadScript","TinyMCE","id","value","formFields","SmartTagField","onChangeHandler","toolbarMnu","menubar","height","width","disabled","plugins","editorId","CDN_SOURCE_URL","isLoaded","setIsLoaded","useState","editorLoadedFromCDN","loadTinyMceScript","__async","tinyIntervalId","useEffect","timyMceInit","_a","activeEditor","insertFieldKey","fld","editor","i","e","$","myTextarea","myIframe","el","jsx","ev"],"mappings":"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"}