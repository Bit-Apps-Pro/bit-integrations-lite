{"version":3,"file":"bi.304.840.js","sources":["../frontend-dev/src/components/AllIntegrations/SureCart/SureCartCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, slackConf, setSlackConf) => {\n  const newConf = { ...slackConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setSlackConf({ ...newConf })\n}\n\nexport const handleAuthorize = (confTmp, setConf, setError, setIsAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.api_key) {\n    setError({ api_key: !confTmp.api_key ? __('Api Key can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setError({})\n  setIsLoading(true)\n  const auth_url = window.location.origin\n  const tokenRequestParams = { api_key: confTmp.api_key, auth_url }\n\n  bitsFetch(tokenRequestParams, 'sureCart_authorization')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        setConf(newConf)\n        setIsAuthorized(true)\n        setIsLoading(false)\n        toast.success(__('Authorized successfully', 'bit-integrations'))\n        return\n      } \n      toast.error(__('Authorization failed', 'bit-integrations'))\n      setIsLoading(false)\n    })\n}\n\nexport const checkMappedFields = fieldsMapped => {\n  const checkedField = fieldsMapped\n    ? fieldsMapped?.filter(item => (!item.formField || !item.SureCartFormField))\n    : []\n  if (checkedField.length > 0) return false\n  return true\n}\n\nexport const generateMappedField = (kirimEmailConf) => {\n  const requiredFlds = kirimEmailConf?.customerFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', SureCartFormField: field.key })) : [{ formField: '', SureCartFormField: '' }]\n}\n"],"names":["__","bitsFetch","_t","handleInput","slackConf","setSlackConf","newConf","__spreadValues","name","handleAuthorize","confTmp","setConf","setError","setIsAuthorized","setIsLoading","setSnackbar","auth_url","tokenRequestParams","result","toast","checkMappedFields","fieldsMapped","item","generateMappedField","kirimEmailConf","requiredFlds","fld","field"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,MAAA,iBAKY,MAACC,EAAc,CAAC,EAAGC,EAAWC,IAAiB,CACzD,MAAMC,EAAUC,EAAA,GAAKH,GACf,CAAE,KAAAI,GAAS,EAAE,OACf,EAAE,OAAO,QAAU,GACrBF,EAAQE,CAAI,EAAI,EAAE,OAAO,MAEzB,OAAOF,EAAQE,CAAI,EAErBH,EAAaE,EAAA,GAAKD,EAAS,CAC7B,EAEaG,EAAkB,CAACC,EAASC,EAASC,EAAUC,EAAiBC,EAAcC,IAAgB,CACzG,GAAI,CAACL,EAAQ,QAAS,CACpBE,EAAS,CAAE,QAAUF,EAAQ,QAA8D,GAApDV,EAAG,yBAA2B,kBAAkB,EAAQ,EAC/F,MACD,CACDY,EAAS,CAAA,CAAE,EACXE,EAAa,EAAI,EACjB,MAAME,EAAW,OAAO,SAAS,OAC3BC,EAAqB,CAAE,QAASP,EAAQ,QAAS,SAAAM,CAAU,EAEjEf,EAAUgB,EAAoB,wBAAwB,EACnD,KAAKC,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMZ,EAAUC,EAAA,GAAKG,GACrBC,EAAQL,CAAO,EACfO,EAAgB,EAAI,EACpBC,EAAa,EAAK,EAClBK,EAAM,QAAQnB,EAAG,0BAA2B,kBAAkB,CAAC,EAC/D,MACD,CACDmB,EAAM,MAAMnB,EAAG,uBAAwB,kBAAkB,CAAC,EAC1Dc,EAAa,EAAK,CACxB,CAAK,CACL,EAEaM,EAAoBC,GAI3B,GAHiBA,EACjBA,GAAA,YAAAA,EAAc,OAAOC,GAAS,CAACA,EAAK,WAAa,CAACA,EAAK,mBACvD,CAAE,GACW,OAAS,GAIfC,EAAuBC,GAAmB,CACrD,MAAMC,EAAeD,GAAA,YAAAA,EAAgB,eAAe,OAAOE,GAAOA,EAAI,WAAa,IACnF,OAAOD,EAAa,OAAS,EAAIA,EAAa,IAAIE,IAAU,CAAE,UAAW,GAAI,kBAAmBA,EAAM,GAAK,EAAC,EAAI,CAAC,CAAE,UAAW,GAAI,kBAAmB,GAAI,CAC3J"}