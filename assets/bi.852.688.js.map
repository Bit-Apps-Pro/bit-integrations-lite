{"version":3,"file":"bi.852.688.js","sources":["../frontend-dev/src/components/AllIntegrations/OmniSend/OmniSendCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (\n  e,\n  omniSendConf,\n  setOmniSendConf,\n  setLoading,\n  setSnackbar,\n  isNew,\n  error,\n  setError,\n) => {\n  const newConf = { ...omniSendConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setOmniSendConf({ ...newConf })\n}\n\nexport const generateMappedField = (omniSendConf) => {\n  const requiredFlds = omniSendConf?.omniSend_fields.filter(\n    (fld) => fld.required === true,\n  )\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n      formField: '',\n      omniSendFormField: field.key,\n    }))\n    : [{ formField: '', omniSendFormField: '' }]\n}\n\nexport const checkMappedFields = (omniSendConf) => {\n  const mappedFields = omniSendConf?.field_map\n    ? omniSendConf.field_map.filter(\n      (mappedField) => !mappedField.formField\n          || !mappedField.omniSendFormField\n          || (!mappedField.formField === 'custom' && !mappedField.customValue),\n    )\n    : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\nexport const handleOmniSendAuthorize = (\n  confTmp,\n  setConf,\n  setError,\n  setisAuthorized,\n  loading,\n  setLoading,\n) => {\n  if (!confTmp.api_key) {\n    setError({\n      api_key: !confTmp.api_key\n        ? __(\"Api Key can't be empty\", 'bit-integrations')\n        : '',\n    })\n    return\n  }\n  setError({})\n  setLoading({ ...loading, auth: true })\n\n  const requestParams = { api_key: confTmp.api_key }\n\n  bitsFetch(requestParams, 'Omnisend_authorization').then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp }\n      setConf(newConf)\n      setisAuthorized(true)\n      setLoading({ ...loading, auth: false })\n      toast.success(__('Authorized successfully', 'bit-integrations'))\n      return\n    }\n\n    setLoading({ ...loading, auth: false })\n    toast.error(__('Authorized failed', 'bit-integrations'))\n  })\n}\n"],"names":["__","bitsFetch","_t","handleInput","omniSendConf","setOmniSendConf","setLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","name","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","handleOmniSendAuthorize","confTmp","setConf","setisAuthorized","loading","__spreadProps","requestParams","result","toast"],"mappings":"6aAAA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,MAAA,iBAKY,MAACC,EAAc,CACzB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IACG,CACH,MAAMC,EAAUC,EAAA,GAAKR,GACf,CAAE,KAAAS,GAAS,EAAE,OACf,EAAE,OAAO,QAAU,GACrBF,EAAQE,CAAI,EAAI,EAAE,OAAO,MAEzB,OAAOF,EAAQE,CAAI,EAErBR,EAAgBO,EAAA,GAAKD,EAAS,CAChC,EAEaG,EAAuBV,GAAiB,CACnD,MAAMW,EAAeX,GAAA,YAAAA,EAAc,gBAAgB,OAChDY,GAAQA,EAAI,WAAa,IAE5B,OAAOD,EAAa,OAAS,EACzBA,EAAa,IAAKE,IAAW,CAC7B,UAAW,GACX,kBAAmBA,EAAM,GAC/B,EAAM,EACA,CAAC,CAAE,UAAW,GAAI,kBAAmB,EAAE,CAAE,CAC/C,EAEaC,EAAqBd,GAQ5B,GAPiBA,GAAA,MAAAA,EAAc,UAC/BA,EAAa,UAAU,OACtBe,GAAgB,CAACA,EAAY,WACvB,CAACA,EAAY,mBACZ,CAACA,EAAY,YAAc,UAAY,CAACA,EAAY,WAC7D,EACC,CAAE,GACW,OAAS,GAKfC,EAA0B,CACrCC,EACAC,EACAZ,EACAa,EACAC,EACAlB,IACG,CACH,GAAI,CAACe,EAAQ,QAAS,CACpBX,EAAS,CACP,QAAUW,EAAQ,QAEd,GADArB,EAAG,yBAA0B,kBAAkB,CAEzD,CAAK,EACD,MACD,CACDU,EAAS,CAAA,CAAE,EACXJ,EAAWmB,EAAAb,EAAA,GAAKY,GAAL,CAAc,KAAM,EAAI,EAAE,EAErC,MAAME,EAAgB,CAAE,QAASL,EAAQ,OAAS,EAElDpB,EAAUyB,EAAe,wBAAwB,EAAE,KAAMC,GAAW,CAClE,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMhB,EAAUC,EAAA,GAAKS,GACrBC,EAAQX,CAAO,EACfY,EAAgB,EAAI,EACpBjB,EAAWmB,EAAAb,EAAA,GAAKY,GAAL,CAAc,KAAM,EAAK,EAAE,EACtCI,EAAM,QAAQ5B,EAAG,0BAA2B,kBAAkB,CAAC,EAC/D,MACD,CAEDM,EAAWmB,EAAAb,EAAA,GAAKY,GAAL,CAAc,KAAM,EAAK,EAAE,EACtCI,EAAM,MAAM5B,EAAG,oBAAqB,kBAAkB,CAAC,CAC3D,CAAG,CACH"}