{"version":3,"file":"bi.947.827.js","sources":["../frontend-dev/src/components/AllIntegrations/Notion/NotionFieldMap.jsx","../frontend-dev/src/components/AllIntegrations/Notion/NotionIntegLayout.jsx"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useRecoilValue } from 'recoil'\nimport { $btcbi } from '../../../GlobalStates'\nimport { __ } from '../../../Utils/i18nwrap'\nimport { SmartTagField } from '../../../Utils/StaticData/SmartTagField'\nimport MtInput from '../../Utilities/MtInput'\nimport TagifyInput from '../../Utilities/TagifyInput'\nimport { addFieldMap, delFieldMap, handleFieldMapping } from '../GlobalIntegrationHelper'\nimport { handleCustomValue } from '../IntegrationHelpers/IntegrationHelpers'\nimport { generateMappedField } from './NotionCommonFunc'\n\nfunction NotionFieldMap({ i, field, formFields, notionConf, setNotionConf }) {\n  const btcbi = useRecoilValue($btcbi)\n  const { isPro } = btcbi\n\n  if (notionConf?.field_map?.length === 1 && field.notionFormFields === '') {\n    const newConf = { ...notionConf }\n    const tmp = generateMappedField(newConf)\n    newConf.field_map = tmp\n    setNotionConf(newConf)\n  }\n\n  const requiredFields = notionConf?.notionFields?.filter(fld => fld.required === true) || []\n  const nonrequiredFields = notionConf?.notionFields?.filter(fld => fld.required === false) || []\n\n  return (\n    <div\n      className=\"flx mt-2 mb-2 btcbi-field-map\"\n    >\n      <div className=\"pos-rel flx\">\n        <div className=\"flx integ-fld-wrp\">\n          <select\n            className=\"btcd-paper-inp mr-2\"\n            name=\"formFields\"\n            onChange={(event) => {\n              handleFieldMapping(event, i, notionConf, setNotionConf)\n            }}\n            value={field.formFields || ''}\n          >\n            <option value=\"\">{__('Select Field')}</option>\n            <optgroup label=\"Form Fields\">\n              {\n                formFields?.map(f => (\n                  <option key={`ff-rm-${f.name}`} value={f.name}>\n                    {f.label}\n                  </option>\n                ))\n              }\n            </optgroup>\n            <option value=\"custom\">{__('Custom...')}</option>\n            <optgroup label={`General Smart Codes ${isPro ? '' : '(PRO)'}`}>\n              {isPro && SmartTagField?.map(f => (\n                <option key={`ff-rm-${f.name}`} value={f.name}>\n                  {f.label}\n                </option>\n              ))}\n            </optgroup>\n\n          </select>\n\n          {/* When user select custom field */}\n\n          {field.formField === 'custom' && <TagifyInput onChange={e => handleCustomValue(e, i, notionConf, setNotionConf)} label={__('Custom Value', 'bit-integrations')} className=\"mr-2\" type=\"text\" value={field.customValue} placeholder={__('Custom Value', 'bit-integrations')} formFields={formFields} />}\n\n          <select\n            className=\"btcd-paper-inp\"\n            disabled={i < requiredFields.length}\n            name=\"notionFormFields\"\n            onChange={(event) => {\n              handleFieldMapping(event, i, notionConf, setNotionConf)\n            }}\n            value={i < requiredFields.length ? (requiredFields[i].label || '') : (field.notionFormFields || '')}\n          >\n            <option value=\"\">{__('Select Field')}</option>\n            {\n              i < requiredFields.length ? (\n                <option key={requiredFields[i].key} value={requiredFields[i].label}>\n                  {requiredFields[i].label}\n                </option>\n              ) : (\n                nonrequiredFields.map(({ key, label }) => (\n                  <option key={label} value={label}>\n                    {label}\n                  </option>\n                ))\n              )\n            }\n          </select>\n        </div>\n\n        <button\n          onClick={() => addFieldMap(i, notionConf, setNotionConf)}\n          className=\"icn-btn sh-sm ml-2 mr-1\"\n          type=\"button\"\n        >\n          +\n        </button>\n        <button onClick={() => delFieldMap(i, notionConf, setNotionConf)} className=\"icn-btn sh-sm ml-1\" type=\"button\" aria-label=\"btn\">\n          <span className=\"btcd-icn icn-trash-2\" />\n        </button>\n\n      </div>\n    </div>\n  )\n}\n\nexport default NotionFieldMap\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-case-declarations */\n/* eslint-disable default-case */\n/* eslint-disable no-console */\nimport { __ } from '../../../Utils/i18nwrap'\nimport Loader from '../../Loaders/Loader'\nimport LoaderSm from '../../Loaders/LoaderSm'\nimport Note from '../../Utilities/Note'\nimport { addFieldMap } from '../GlobalIntegrationHelper'\nimport { getAllDatabaseLists, getFieldsProperties } from './NotionCommonFunc'\nimport NotionFieldMap from './NotionFieldMap'\n\nfunction NotionIntegLayout({ notionConf, setNotionConf, formFields, loading, setLoading }) {\n  const handleList = async (e) => {\n    const newConf = { ...notionConf }\n    const { name, value } = e.target\n    if (value !== '') {\n      newConf[name] = value\n    } else {\n      delete newConf[name]\n    }\n    switch (name) {\n      case 'databaseId':\n        (newConf.databaseId === '') && (newConf.field_map = [{ formFields: '', notionFormFields: '' }])\n        if (newConf.databaseId) {\n          setLoading({ ...loading, field: true })\n          newConf.notionFields = await getFieldsProperties(newConf, setNotionConf)\n          newConf.notionFields && setLoading({ ...loading, field: false })\n        }\n        break\n    }\n\n    setNotionConf(newConf)\n  }\n\n  const note = `\n    <b>Files & Media</b>\n    <p>The Notion API does not yet support uploading files to Notion.</p>\n    <p>Please Provide a public URL of the file instead of file attachment.</p>\n  `\n\n  return (\n    <div className=\"mt-2\">\n\n      {(!loading.page && notionConf?.default?.databaseLists) && (\n\n        <div className=\"flx mt-2\">\n          <b className=\"wdt-200 d-in-b \">{__('Database List:')}</b>\n          <select onChange={handleList} name=\"databaseId\" value={notionConf?.databaseId} className=\"btcd-paper-inp w-5 mx-0\">\n            <option value=\"\">{__('Select Database')}</option>\n            {\n              notionConf?.default?.databaseLists && notionConf?.default.databaseLists.map(database => (\n                <option key={database.id} value={database.id}>\n                  {database.name}\n                </option>\n              ))\n            }\n          </select>\n          <button onClick={() => getAllDatabaseLists(notionConf, setNotionConf, loading, setLoading)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': '\"Refresh list\"' }} type=\"button\" disabled={loading.list}>&#x21BB;</button>\n          {loading.list && <LoaderSm size=\"20\" clr=\"#022217\" className=\"ml-2\" />}\n        </div>\n      )}\n\n      {notionConf?.databaseId && (\n        <div className=\"mt-5\">\n          <b className=\"wdt-100\">\n            {__('Field Map')}\n          </b>\n          <button onClick={() => getFieldsProperties(notionConf, setNotionConf, loading, setLoading)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Refresh custom fields', 'bit-integrations')}'` }} type=\"button\" disabled={loading.field}>\n            &#x21BB;\n          </button>\n\n          <div className=\"btcd-hr mt-2 mb-4\" />\n          <div className=\"flx flx-around mt-2 mb-2 btcbi-field-map-label\">\n            <div className=\"txt-dp\"><b>{__('Form Fields')}</b></div>\n            <div className=\"txt-dp\"><b>{__('Notion Fields')}</b></div>\n          </div>\n          {notionConf?.field_map.map((itm, i) => (\n            <NotionFieldMap\n              key={`ko-m-${i + 8}`}\n              i={i}\n              field={itm}\n              formFields={formFields}\n              notionConf={notionConf}\n              setNotionConf={setNotionConf}\n            />\n          ))}\n\n          <div className=\"txt-center btcbi-field-map-button mt-2\"><button onClick={() => addFieldMap(notionConf.field_map.length, notionConf, setNotionConf, false)} className=\"icn-btn sh-sm\" type=\"button\">+</button></div>\n\n        </div>\n      )}\n\n      {/* --- PAGE Loader --- */}\n\n      {(loading.page || loading.field) && (\n        <Loader style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: 100,\n          transform: 'scale(0.7)',\n        }}\n        />\n      )}\n      <Note note={note} />\n    </div>\n  )\n}\n\nexport default NotionIntegLayout\n"],"names":["Recoil_index_18","jsxRuntimeExports","Loader","$btcbi","__","LoaderSm","Note","handleFieldMapping","addFieldMap","delFieldMap","generateMappedField","getAllDatabaseLists","getFieldsProperties","SmartTagField","TagifyInput","handleCustomValue","NotionFieldMap","i","field","formFields","notionConf","setNotionConf","_a","_b","_c","_d","btcbi","useRecoilValue","isPro","newConf","__spreadValues","tmp","requiredFields","fld","nonrequiredFields","jsx","jsxs","event","f","e","key","label","NotionIntegLayout","loading","setLoading","handleList","__async","name","value","__spreadProps","note","database","itm"],"mappings":"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"}