{"version":3,"file":"bi.458.780.js","sources":["../frontend-dev/src/components/AllIntegrations/Acumbamail/AcumbamailCommonFunc.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, acumbamailConf, setAcumbamailConf, setIsLoading, setSnackbar, formID) => {\n  let newConf = { ...acumbamailConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n\n  newConf[e.target.name] = e.target.value\n  switch (e.target.name) {\n    case 'listId':\n      if (newConf.listId && !newConf.default?.allFields?.[newConf.listId]) {\n        newConf = refreshFields(formID, newConf, setAcumbamailConf, setIsLoading, setSnackbar)\n      }\n      break\n    default:\n      break\n  }\n  setAcumbamailConf({ ...newConf })\n}\n\nexport const refreshFields = (formID, acumbamailConf, setAcumbamailConf, setIsLoading, setSnackbar) => {\n  const { listId } = acumbamailConf\n  if (!listId) {\n    return\n  }\n  setIsLoading(true)\n  const refreshFieldsRequestParams = { auth_token: acumbamailConf.auth_token, list_id: listId }\n  bitsFetch(refreshFieldsRequestParams, 'acumbamail_refresh_fields')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...acumbamailConf }\n        if (result.data) {\n          if (!newConf.default?.allFields) {\n            newConf.default.allFields = {}\n          }\n          if (!newConf.default.allFields?.[listId]) {\n            newConf.default.allFields[listId] = {}\n          }\n          newConf.default.allFields[listId].fields = result.data\n          newConf.default.allFields[listId].required = ['EMAIL']\n\n          setAcumbamailConf({ ...newConf })\n          setIsLoading(false)\n          toast.success(__('All list field fetched successfully', 'bit-integrations'))\n          return\n        }\n        setIsLoading(false)\n        toast.error(__('Failed to fetch list fields', 'bit-integrations'))\n      }\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const checkAddressFieldMapRequired = acumbamailConf => {\n  const requiredFleld = acumbamailConf?.address_field ? acumbamailConf.default?.fields.filter(field => !field.formField && field.acumbamailFormField && field.required) : []\n  if (requiredFleld.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const fetchAllBoard = (formID, acumbamailConf, setAcumbamailConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const fetchBoardModulesRequestParams = {\n    formID,\n    clientId: acumbamailConf.clientId,\n    accessToken: acumbamailConf.accessToken,\n  }\n  bitsFetch(fetchBoardModulesRequestParams, 'trello_fetch_all_board')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...acumbamailConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data.allBoardlist) {\n          newConf.default.allBoardlist = result.data.allBoardlist\n        }\n        // if (result.data.tokenDetails) {\n        //   newConf.tokenDetails = result.data.tokenDetails\n        // }\n        setSnackbar({ show: true, msg: __('Board list refreshed', 'bit-integrations') })\n        setAcumbamailConf({ ...newConf })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: sprintf(__('Board list refresh failed Cause: %s. please try again', 'bit-integrations'), result.data.data || result.data) })\n      } else {\n        setSnackbar({ show: true, msg: __('Board list failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchAllList = (acumbamailConf, setAcumbamailConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { auth_token: acumbamailConf.auth_token }\n\n  bitsFetch(requestParams, 'acumbamail_fetch_all_list')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...acumbamailConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allLists = result.data\n        }\n        setAcumbamailConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('Lists fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Lists fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.auth_token) {\n    setError({ auth_token: !confTmp.auth_token ? __('Api Key can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setError({})\n  setIsLoading(true)\n\n  const requestParams = { auth_token: confTmp.auth_token }\n\n  bitsFetch(requestParams, 'acumbamail_authorization_and_fetch_subscriber_list')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        setConf(newConf)\n        setisAuthorized(true)\n        setIsLoading(false)\n        toast.success(__('Authorized successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__(result.data, 'bit-integrations'))\n    })\n}\n\nexport const generateMappedField = (acumbamailConf) => {\n  const requiredFlds = acumbamailConf?.default?.fields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', acumbamailFormField: field.key })) : [{ formField: '', acumbamailFormField: '' }]\n}\n\nexport const checkMappedFields = acumbamailConf => {\n  const mappedFields = acumbamailConf?.field_map ? acumbamailConf.field_map.filter(mappedField => (!mappedField.formField && mappedField.acumbamailFormField && acumbamailConf?.default?.allFields?.[acumbamailConf.listId]?.required.indexOf(mappedField.acumbamailFormField) !== -1)) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n\n  return true\n}\n"],"names":["__","bitsFetch","_t","handleInput","acumbamailConf","setAcumbamailConf","setIsLoading","setSnackbar","formID","_a","_b","newConf","__spreadValues","name","refreshFields","listId","refreshFieldsRequestParams","result","toast","fetchAllList","requestParams","handleAuthorize","confTmp","setConf","setError","setisAuthorized","checkMappedFields","mappedField","_c"],"mappings":"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"}