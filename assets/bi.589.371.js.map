{"version":3,"file":"bi.589.371.js","sources":["../frontend-dev/src/components/AllIntegrations/ElasticEmail/ElasticEmail.jsx"],"sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useState } from 'react'\nimport 'react-multiple-select-dropdown-lite/dist/index.css'\nimport { useNavigate } from 'react-router-dom'\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport SnackMsg from '../../Utilities/SnackMsg'\nimport Steps from '../../Utilities/Steps'\nimport { saveActionConf } from '../IntegrationHelpers/IntegrationHelpers'\nimport IntegrationStepThree from '../IntegrationHelpers/IntegrationStepThree'\nimport ElasticEmailAuthorization from './ElasticEmailAuthorization'\nimport { checkMappedFields, handleInput } from './ElasticEmailCommonFunc'\nimport ElasticEmailIntegLayout from './ElasticEmailIntegLayout'\n\nfunction ElasticEmail({ formFields, setFlow, flow, allIntegURL }) {\n  const navigate = useNavigate()\n  const [isLoading, setIsLoading] = useState(false)\n  const [step, setstep] = useState(1)\n  const [snack, setSnackbar] = useState({ show: false })\n  // const [snack, setSnackbar] = useState({ show: false })\n  const fields = [\n    { key: 'Email', label: 'Email', required: true },\n    { key: 'FirstName', label: 'FirstName', required: false },\n    { key: 'LastName', label: 'LastName', required: false },\n  ]\n  const [elasticEmailConf, setElasticEmailConf] = useState({\n    name: 'Elastic Email',\n    type: 'ElasticEmail',\n    api_key: process.env.NODE_ENV === 'development' ? 'FDDC2A0367E286CDC2A0A01000D46F040E2E602F3454F9DFB8576CE8F83BEAD391E270A8C6CB6A648A349EC72FCA11F2' : '',\n    field_map: [\n      { formField: '', elasticEmailField: '' },\n    ],\n    actions: {},\n    elasticEmailFields: fields,\n  })\n\n  const saveConfig = () => {\n    setIsLoading(true)\n    saveActionConf({ flow, setFlow, allIntegURL, conf: elasticEmailConf, navigate, setIsLoading, setSnackbar })\n  }\n  const nextPage = (pageNo) => {\n    setTimeout(() => {\n      document.getElementById('btcd-settings-wrp').scrollTop = 0\n    }, 300)\n\n    if (!checkMappedFields(elasticEmailConf)) {\n      // setSnackbar({ show: true, msg: __('Please map mandatory fields', 'bit-integrations') })\n      toast.error('Please map mandatory fields')\n      return\n    }\n    elasticEmailConf.field_map.length > 0 && setstep(pageNo)\n  }\n\n  return (\n    <div>\n      {/* <SnackMsg snack={snack} setSnackbar={setSnackbar} /> */}\n      <div className=\"txt-center mt-2\"><Steps step={3} active={step} /></div>\n\n      {/* STEP 1 */}\n\n      <ElasticEmailAuthorization\n        elasticEmailConf={elasticEmailConf}\n        setElasticEmailConf={setElasticEmailConf}\n        step={step}\n        setstep={setstep}\n        isLoading={isLoading}\n        setIsLoading={setIsLoading}\n      />\n\n      {/* STEP 2 */}\n      <div className=\"btcd-stp-page\" style={{ ...(step === 2 && { width: 900, height: 'auto', overflow: 'visible' }) }}>\n\n        <ElasticEmailIntegLayout\n          formFields={formFields}\n          handleInput={(e) => handleInput(e, elasticEmailConf, setElasticEmailConf, setIsLoading)}\n          elasticEmailConf={elasticEmailConf}\n          setElasticEmailConf={setElasticEmailConf}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n        />\n\n        <button\n          onClick={() => nextPage(3)}\n          // disabled={!getgistConf?.recipient_id}\n          className=\"btn f-right btcd-btn-lg green sh-sm flx\"\n          type=\"button\"\n        >\n          {__('Next', 'bit-integrations')}\n          {' '}\n          &nbsp;\n          <div className=\"btcd-icn icn-arrow_back rev-icn d-in-b\" />\n        </button>\n      </div>\n\n      {/* STEP 3 */}\n      <IntegrationStepThree\n        step={step}\n        saveConfig={() => saveConfig()}\n        isLoading={isLoading}\n        dataConf={elasticEmailConf}\n        setDataConf={setElasticEmailConf}\n        formFields={formFields}\n      />\n    </div>\n  )\n}\n\nexport default ElasticEmail\n"],"names":["ElasticEmail","formFields","setFlow","flow","allIntegURL","navigate","useNavigate","isLoading","setIsLoading","useState","step","setstep","snack","setSnackbar","fields","elasticEmailConf","setElasticEmailConf","saveConfig","saveActionConf","nextPage","pageNo","checkMappedFields","toast","jsx","Steps","ElasticEmailAuthorization","__spreadValues","ElasticEmailIntegLayout","e","handleInput","jsxs","__","IntegrationStepThree"],"mappings":"ozBAcA,SAASA,EAAa,CAAE,WAAAC,EAAY,QAAAC,EAAS,KAAAC,EAAM,YAAAC,GAAe,CAChE,MAAMC,EAAWC,IACX,CAACC,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1C,CAACC,EAAMC,CAAO,EAAIF,WAAS,CAAC,EAC5B,CAACG,EAAOC,CAAW,EAAIJ,WAAS,CAAE,KAAM,GAAO,EAE/CK,EAAS,CACb,CAAE,IAAK,QAAS,MAAO,QAAS,SAAU,EAAK,EAC/C,CAAE,IAAK,YAAa,MAAO,YAAa,SAAU,EAAM,EACxD,CAAE,IAAK,WAAY,MAAO,WAAY,SAAU,EAAM,CAAA,EAElD,CAACC,EAAkBC,CAAmB,EAAIP,WAAS,CACvD,KAAM,gBACN,KAAM,eACN,QAAuJ,GACvJ,UAAW,CACT,CAAE,UAAW,GAAI,kBAAmB,EAAG,CACzC,EACA,QAAS,CAAC,EACV,mBAAoBK,CAAA,CACrB,EAEKG,EAAa,IAAM,CACvBT,EAAa,EAAI,EACFU,EAAA,CAAE,KAAAf,EAAM,QAAAD,EAAS,YAAAE,EAAa,KAAMW,EAAkB,SAAAV,EAAU,aAAAG,EAAc,YAAAK,CAAA,CAAa,CAAA,EAEtGM,EAAYC,GAAW,CAKvB,GAJJ,WAAW,IAAM,CACN,SAAA,eAAe,mBAAmB,EAAE,UAAY,GACxD,GAAG,EAEF,CAACC,EAAkBN,CAAgB,EAAG,CAExCO,EAAM,MAAM,6BAA6B,EACzC,MACF,CACAP,EAAiB,UAAU,OAAS,GAAKJ,EAAQS,CAAM,CAAA,EAGzD,cACG,MAEC,CAAA,SAAA,CAACG,EAAAA,IAAA,MAAA,CAAI,UAAU,kBAAkB,SAAAA,EAAA,IAACC,GAAM,KAAM,EAAG,OAAQd,CAAA,CAAM,CAAE,CAAA,EAIjEa,EAAA,IAACE,EAAA,CACC,iBAAAV,EACA,oBAAAC,EACA,KAAAN,EACA,QAAAC,EACA,UAAAJ,EACA,aAAAC,CAAA,CACF,SAGC,MAAI,CAAA,UAAU,gBAAgB,MAAOkB,EAAA,GAAMhB,IAAS,GAAK,CAAE,MAAO,IAAK,OAAQ,OAAQ,SAAU,SAAA,GAEhG,SAAA,CAAAa,EAAA,IAACI,EAAA,CACC,WAAA1B,EACA,YAAc2B,GAAMC,EAAYD,EAAGb,EAAkBC,CAAiC,EACtF,iBAAAD,EACA,oBAAAC,EACA,UAAAT,EACA,aAAAC,CAAA,CACF,EAEAsB,EAAA,KAAC,SAAA,CACC,QAAS,IAAMX,EAAS,CAAC,EAEzB,UAAU,0CACV,KAAK,SAEJ,SAAA,CAAAY,EAAG,OAAQ,kBAAkB,EAC7B,IAAI,IAELR,EAAAA,IAAC,MAAI,CAAA,UAAU,wCAAyC,CAAA,CAAA,CAAA,CAC1D,CAAA,EACF,EAGAA,EAAA,IAACS,EAAA,CACC,KAAAtB,EACA,WAAY,IAAMO,EAAW,EAC7B,UAAAV,EACA,SAAUQ,EACV,YAAaC,EACb,WAAAf,CAAA,CACF,CACF,CAAA,CAAA,CAEJ"}