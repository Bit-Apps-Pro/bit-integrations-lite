{"version":3,"file":"bi.150.849.js","sources":["../frontend-dev/src/components/AllIntegrations/SendPulse/SendPulseCommonFunc.js"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { __ } from '@wordpress/i18n'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, sendPulseConf, setSendPulseConf) => {\n  const newConf = { ...sendPulseConf }\n  newConf.name = e.target.value\n  setSendPulseConf({ ...newConf })\n}\n\n// refreshMappedLists\nexport const refreshSendPulseList = (sendPulseConf, setSendPulseConf, setIsLoading, setSnackbar) => {\n\n  const refreshListsRequestParams = {\n    client_id: sendPulseConf.client_id,\n    client_secret: sendPulseConf.client_secret,\n    tokenDetails: sendPulseConf.tokenDetails\n  }\n  bitsFetch(refreshListsRequestParams, 'sendPulse_lists')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...sendPulseConf }\n        if (result.data) {\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          newConf.default.sendPulseLists = result.data\n          setSnackbar({\n            show: true,\n            msg: __('SendPulse lists refreshed', 'bit-integrations'),\n          })\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              'No SendPulse lists found. Try changing the header row number or try again',\n              'bit-integrations',\n            ),\n          })\n        }\n\n        setSendPulseConf({ ...newConf })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            'SendPulse lists refresh failed. please try again',\n            'bit-integrations',\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\n// refreshMappedFields\nexport const refreshSendPulseHeader = (sendPulseConf, setSendPulseConf, setIsLoading, setSnackbar) => {\n\n  const refreshListsRequestParams = {\n    client_id: sendPulseConf.client_id,\n    client_secret: sendPulseConf.client_secret,\n    list_id: sendPulseConf.listId,\n    tokenDetails: sendPulseConf.tokenDetails\n  }\n\n  bitsFetch(refreshListsRequestParams, 'sendPulse_headers')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...sendPulseConf }\n        if (result.data.sendPulseField) {\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          newConf.default.fields = result.data.sendPulseField\n          const { fields } = newConf.default\n          newConf.field_map = Object.values(fields)\n            .filter((f) => f.required)\n            .map((f) => ({\n              formField: '',\n              sendPulseField: f.fieldValue,\n              required: true,\n            }))\n          setSnackbar({\n            show: true,\n            msg: __('SendPulse fields refreshed', 'bit-integrations'),\n          })\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              'No SendPulse fields found. Try changing the header row number or try again',\n              'bit-integrations',\n            ),\n          })\n        }\n        setSendPulseConf({ ...newConf })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            'SendPulse fields refresh failed. please try again',\n            'bit-integrations',\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const checkMappedFields = (sendPulseConf) => {\n  const mappedFields = sendPulseConf?.field_map\n    ? sendPulseConf.field_map.filter(\n      (mappedField) => !mappedField.formField\n          && mappedField.sendPulseField\n          && mappedField.required,\n    )\n    : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n"],"names":["bitsFetch","__","handleInput","sendPulseConf","setSendPulseConf","newConf","__spreadValues","refreshSendPulseList","setIsLoading","setSnackbar","refreshListsRequestParams","result","refreshSendPulseHeader","fields","checkMappedFields","mappedField"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,MAAA,iBAIY,MAACC,EAAc,CAAC,EAAGC,EAAeC,IAAqB,CACjE,MAAMC,EAAUC,EAAA,GAAKH,GACrBE,EAAQ,KAAO,EAAE,OAAO,MACxBD,EAAiBE,EAAA,GAAKD,EAAS,CACjC,EAGaE,EAAuB,CAACJ,EAAeC,EAAkBI,EAAcC,IAAgB,CAElG,MAAMC,EAA4B,CAChC,UAAWP,EAAc,UACzB,cAAeA,EAAc,cAC7B,aAAcA,EAAc,YAC7B,EACDH,EAAUU,EAA2B,iBAAiB,EACnD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACjBQ,EAAO,MACJN,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAEtBA,EAAQ,QAAQ,eAAiBM,EAAO,KACxCF,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,4BAA6B,kBAAkB,CACnE,CAAW,GAEDQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,4EACA,kBACD,CACb,CAAW,EAGHG,EAAiBE,EAAA,GAAKD,EAAS,CACvC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,mDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAGaI,EAAyB,CAACT,EAAeC,EAAkBI,EAAcC,IAAgB,CAEpG,MAAMC,EAA4B,CAChC,UAAWP,EAAc,UACzB,cAAeA,EAAc,cAC7B,QAASA,EAAc,OACvB,aAAcA,EAAc,YAC7B,EAEDH,EAAUU,EAA2B,mBAAmB,EACrD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACrB,GAAIQ,EAAO,KAAK,eAAgB,CACzBN,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAEtBA,EAAQ,QAAQ,OAASM,EAAO,KAAK,eACrC,KAAM,CAAE,OAAAE,GAAWR,EAAQ,QAC3BA,EAAQ,UAAY,OAAO,OAAOQ,CAAM,EACrC,OAAQ,GAAM,EAAE,QAAQ,EACxB,IAAK,IAAO,CACX,UAAW,GACX,eAAgB,EAAE,WAClB,SAAU,EACxB,EAAc,EACJJ,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,6BAA8B,kBAAkB,CACpE,CAAW,CACX,MACUQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,6EACA,kBACD,CACb,CAAW,EAEHG,EAAiBE,EAAA,GAAKD,EAAS,CACvC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,oDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAEaM,EAAqBX,GAQ5B,GAPiBA,GAAA,MAAAA,EAAe,UAChCA,EAAc,UAAU,OACvBY,GAAgB,CAACA,EAAY,WACvBA,EAAY,gBACZA,EAAY,QACpB,EACC,CAAE,GACW,OAAS"}