{"version":3,"file":"bi.257.798.js","sources":["../frontend-dev/src/components/AllIntegrations/KirimEmail/KirimEmailCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, slackConf, setSlackConf) => {\n  const newConf = { ...slackConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setSlackConf({ ...newConf })\n}\n\nexport const handleAuthorize = (confTmp, setConf, setError, setIsAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.api_key) {\n    setError({ api_key: !confTmp.api_key ? __('Api Key can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setError({})\n  setIsLoading(true)\n\n  const tokenRequestParams = { username: confTmp.userName, api_key: confTmp.api_key }\n\n  bitsFetch(tokenRequestParams, 'kirimEmail_authorization')\n    .then(result => result)\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allLists = result.data\n        }\n        setConf(newConf)\n        setIsAuthorized(true)\n        setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n      } else {\n        setSnackbar({ show: true, msg: __('Authorization failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n}\n\nexport const getAllList = (kirimEmailConf, setKirimEmailConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const tokenRequestParams = { username: kirimEmailConf.userName, api_key: kirimEmailConf.api_key }\n\n  bitsFetch(tokenRequestParams, 'kirimEmail_fetch_all_list')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...kirimEmailConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allLists = result.data\n        }\n        setKirimEmailConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('All list fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Kirim Email list fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const checkMappedFields = fieldsMapped => {\n  const checkedField = fieldsMapped\n    ? fieldsMapped?.filter(item => (!item.formField || !item.kirimEmailFormField))\n    : []\n  if (checkedField.length > 0) return false\n  return true\n}\n\n// export const checkMappedFields = (kirimEmailConf) => {\n//   const mappedFleld = kirimEmailConf.field_map ? kirimEmailConf.field_map.filter(mapped => (!mapped.formField && !mapped.kirimEmailFormField)) : []\n//   if (mappedFleld.length > 0) {\n//     return false\n//   }\n//   return true\n// }\n\nexport const generateMappedField = (kirimEmailConf) => {\n  const requiredFlds = kirimEmailConf?.subscriberFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', kirimEmailFormField: field.key })) : [{ formField: '', kirimEmailFormField: '' }]\n}\n"],"names":["__","bitsFetch","_t","handleInput","slackConf","setSlackConf","newConf","__spreadValues","name","handleAuthorize","confTmp","setConf","setError","setIsAuthorized","setIsLoading","setSnackbar","tokenRequestParams","result","getAllList","kirimEmailConf","setKirimEmailConf","toast","checkMappedFields","fieldsMapped","item","generateMappedField","requiredFlds","fld","field"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,MAAA,iBAKY,MAACC,EAAc,CAAC,EAAGC,EAAWC,IAAiB,CACzD,MAAMC,EAAUC,EAAA,GAAKH,GACf,CAAE,KAAAI,GAAS,EAAE,OACf,EAAE,OAAO,QAAU,GACrBF,EAAQE,CAAI,EAAI,EAAE,OAAO,MAEzB,OAAOF,EAAQE,CAAI,EAErBH,EAAaE,EAAA,GAAKD,EAAS,CAC7B,EAEaG,EAAkB,CAACC,EAASC,EAASC,EAAUC,EAAiBC,EAAcC,IAAgB,CACzG,GAAI,CAACL,EAAQ,QAAS,CACpBE,EAAS,CAAE,QAAUF,EAAQ,QAA8D,GAApDV,EAAG,yBAA2B,kBAAkB,EAAQ,EAC/F,MACD,CACDY,EAAS,CAAA,CAAE,EACXE,EAAa,EAAI,EAEjB,MAAME,EAAqB,CAAE,SAAUN,EAAQ,SAAU,QAASA,EAAQ,OAAS,EAEnFT,EAAUe,EAAoB,0BAA0B,EACrD,KAAKC,GAAUA,CAAM,EACrB,KAAKA,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMX,EAAUC,EAAA,GAAKG,GAChBJ,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBW,EAAO,OACTX,EAAQ,QAAQ,SAAWW,EAAO,MAEpCN,EAAQL,CAAO,EACfO,EAAgB,EAAI,EACpBE,EAAY,CAAE,KAAM,GAAM,IAAKf,EAAG,0BAA2B,kBAAkB,EAAG,CACnF,MAAWiB,GAAUA,EAAO,MAAQA,EAAO,KAAK,MAAU,CAACA,EAAO,SAAW,OAAOA,EAAO,MAAS,SACnGF,EAAY,CAAE,KAAM,GAAM,IAAK,GAAGf,EAAG,8BAA+B,kBAAkB,CAAC,GAAGiB,EAAO,KAAK,MAAQA,EAAO,IAAI,KAAKjB,EAAG,mBAAoB,kBAAkB,CAAC,GAAI,EAE5Ke,EAAY,CAAE,KAAM,GAAM,IAAKf,EAAG,yCAA0C,kBAAkB,EAAG,EAEnGc,EAAa,EAAK,CACxB,CAAK,CACL,EAEaI,EAAa,CAACC,EAAgBC,EAAmBN,EAAcC,IAAgB,CAC1FD,EAAa,EAAI,EACjB,MAAME,EAAqB,CAAE,SAAUG,EAAe,SAAU,QAASA,EAAe,OAAS,EAEjGlB,EAAUe,EAAoB,2BAA2B,EACtD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMX,EAAUC,EAAA,GAAKY,GAChBb,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBW,EAAO,OACTX,EAAQ,QAAQ,SAAWW,EAAO,MAEpCG,EAAkBb,EAAA,GAAKD,EAAS,EAChCQ,EAAa,EAAK,EAClBO,EAAM,QAAQrB,EAAG,gCAAiC,kBAAkB,CAAC,EACrE,MACD,CACDc,EAAa,EAAK,EAClBO,EAAM,MAAMrB,EAAG,kDAAmD,kBAAkB,CAAC,CAC3F,CAAK,EAEA,MAAM,IAAMc,EAAa,EAAK,CAAC,CACpC,EAEaQ,EAAoBC,GAI3B,GAHiBA,EACjBA,GAAA,YAAAA,EAAc,OAAOC,GAAS,CAACA,EAAK,WAAa,CAACA,EAAK,qBACvD,CAAE,GACW,OAAS,GAYfC,EAAuBN,GAAmB,CACrD,MAAMO,EAAeP,GAAA,YAAAA,EAAgB,iBAAiB,OAAOQ,GAAOA,EAAI,WAAa,IACrF,OAAOD,EAAa,OAAS,EAAIA,EAAa,IAAIE,IAAU,CAAE,UAAW,GAAI,oBAAqBA,EAAM,GAAK,EAAC,EAAI,CAAC,CAAE,UAAW,GAAI,oBAAqB,GAAI,CAC/J"}