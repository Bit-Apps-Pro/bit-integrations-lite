{"version":3,"file":"bi.2.202.js","sources":["../frontend-dev/src/components/AllIntegrations/Flowlu/EditFlowlu.jsx"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n\nimport { useState } from 'react'\nimport { toast } from 'react-hot-toast'\nimport { useNavigate } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { $actionConf, $formFields, $newFlow } from '../../../GlobalStates'\nimport { __ } from '../../../Utils/i18nwrap'\nimport SnackMsg from '../../Utilities/SnackMsg'\nimport EditFormInteg from '../EditFormInteg'\nimport EditWebhookInteg from '../EditWebhookInteg'\nimport { checkWebhookIntegrationsExist, saveActionConf } from '../IntegrationHelpers/IntegrationHelpers'\nimport IntegrationStepThree from '../IntegrationHelpers/IntegrationStepThree'\nimport { checkMappedFields, handleInput } from './FlowluCommonFunc'\nimport FlowluIntegLayout from './FlowluIntegLayout'\n\nfunction EditFlowlu({ allIntegURL }) {\n  const navigate = useNavigate()\n  const [flow, setFlow] = useRecoilState($newFlow)\n  const [flowluConf, setFlowluConf] = useRecoilState($actionConf)\n  const [isLoading, setIsLoading] = useState(false)\n  const [loading, setLoading] = useState({})\n  const [snack, setSnackbar] = useState({ show: false })\n  const formField = useRecoilValue($formFields)\n\n  const saveConfig = () => {\n    if (!checkMappedFields(flowluConf)) {\n      setSnackbar({ show: true, msg: __('Please map mandatory fields', 'bit-integrations') })\n      return\n    }\n\n    if (flowluConf.actionName === 'account') {\n      if (!flowluConf.selectedAccountType) {\n        toast.error('Please select an Account Type')\n        return\n      }\n    }\n    if (flowluConf.actionName === 'opportunity') {\n      if (!flowluConf.selectedPipeline) {\n        toast.error('Please select a Opportunity Pipeline')\n        return\n      }\n      if (!flowluConf.selectedOpportunityStage) {\n        toast.error('Please select a Opportunity Stage')\n        return\n      }\n    }\n\n    saveActionConf({ flow, allIntegURL, conf: flowluConf, history, edit: 1, setIsLoading, setSnackbar })\n  }\n\n  return (\n    <div style={{ width: 900 }}>\n      <SnackMsg snack={snack} setSnackbar={setSnackbar} />\n\n      <div className=\"flx mt-3\">\n        <b className=\"wdt-200 d-in-b\">{__('Integration Name:', 'bit-integrations')}</b>\n        <input className=\"btcd-paper-inp w-5\" onChange={e => handleInput(e, flowluConf, setFlowluConf)} name=\"name\" value={flowluConf.name} type=\"text\" placeholder={__('Integration Name...', 'bit-integrations')} />\n      </div>\n      <br />\n      {!checkWebhookIntegrationsExist(flow.triggered_entity) && <EditFormInteg setSnackbar={setSnackbar} />}\n      {checkWebhookIntegrationsExist(flow.triggered_entity) && <EditWebhookInteg setSnackbar={setSnackbar} />}\n      <FlowluIntegLayout\n        formID={flow.triggered_entity_id}\n        formFields={formField}\n        handleInput={(e) => handleInput(e, flowluConf, setFlowluConf, setLoading, setSnackbar)}\n        flowluConf={flowluConf}\n        setFlowluConf={setFlowluConf}\n        loading={loading}\n        setLoading={setLoading}\n        setIsLoading={setIsLoading}\n        setSnackbar={setSnackbar}\n      />\n\n      <IntegrationStepThree\n        edit\n        saveConfig={saveConfig}\n        disabled={!checkMappedFields(flowluConf)}\n        isLoading={isLoading}\n        dataConf={flowluConf}\n        setDataConf={setFlowluConf}\n        formFields={formField}\n      />\n      <br />\n    </div>\n  )\n}\n\nexport default EditFlowlu\n\n"],"names":["useNavigate","Recoil_index_20","reactExports","Recoil_index_18","jsxRuntimeExports","$newFlow","$actionConf","$formFields","SnackMsg","__","n","EditFormInteg","EditWebhookInteg","checkWebhookIntegrationsExist","saveActionConf","IntegrationStepThree","handleInput","checkMappedFields","FlowluIntegLayout","EditFlowlu","allIntegURL","flow","setFlow","useRecoilState","flowluConf","setFlowluConf","isLoading","setIsLoading","useState","loading","setLoading","snack","setSnackbar","formField","useRecoilValue","saveConfig","toast","jsx","jsxs","e"],"mappings":"AAiBA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,MAAA,gBAAA,OAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,MAAAC,MAAA,iBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,kBAAA,MAAA,kBAAA,MAAA,kBAAA,MAAA,kBAAA,SAASC,EAAW,CAAE,YAAAC,GAAe,CAClBpB,EAAY,EAC7B,KAAM,CAACqB,EAAMC,CAAO,EAAIC,EAAelB,CAAQ,EACzC,CAACmB,EAAYC,CAAa,EAAIF,EAAejB,CAAW,EACxD,CAACoB,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1C,CAACC,EAASC,CAAU,EAAIF,EAAA,SAAS,CAAE,CAAA,EACnC,CAACG,EAAOC,CAAW,EAAIJ,WAAS,CAAE,KAAM,GAAO,EAC/CK,EAAYC,EAAe3B,CAAW,EAEtC4B,EAAa,IAAM,CACnB,GAAA,CAAClB,EAAkBO,CAAU,EAAG,CACtBQ,EAAA,CAAE,KAAM,GAAM,IAAKvB,EAAG,8BAA+B,kBAAkB,EAAG,EACtF,MACF,CAEI,GAAAe,EAAW,aAAe,WACxB,CAACA,EAAW,oBAAqB,CACnCY,EAAM,MAAM,+BAA+B,EAC3C,MACF,CAEE,GAAAZ,EAAW,aAAe,cAAe,CACvC,GAAA,CAACA,EAAW,iBAAkB,CAChCY,EAAM,MAAM,sCAAsC,EAClD,MACF,CACI,GAAA,CAACZ,EAAW,yBAA0B,CACxCY,EAAM,MAAM,mCAAmC,EAC/C,MACF,CACF,CAEetB,EAAA,CAAE,KAAAO,EAAM,YAAAD,EAAa,KAAMI,EAAY,QAAS,KAAM,EAAG,aAAAG,EAAc,YAAAK,CAAa,CAAA,CAAA,EAGrG,cACG,MAAI,CAAA,MAAO,CAAE,MAAO,GACnB,EAAA,SAAA,CAACK,EAAAA,IAAA7B,EAAA,CAAS,MAAAuB,EAAc,YAAAC,CAA0B,CAAA,EAElDM,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAG5B,EAAA,oBAAqB,kBAAkB,EAAE,EAC3E4B,EAAAA,IAAC,SAAM,UAAU,qBAAqB,SAAeE,GAAAvB,EAAYuB,EAAGf,EAAYC,CAAa,EAAG,KAAK,OAAO,MAAOD,EAAW,KAAM,KAAK,OAAO,YAAaf,EAAG,sBAAuB,kBAAkB,CAAG,CAAA,CAAA,EAC9M,QACC,KAAG,EAAA,EACH,CAACI,EAA8BQ,EAAK,gBAAgB,GAAKgB,EAAAA,IAAC1B,GAAc,YAAAqB,EAA0B,EAClGnB,EAA8BQ,EAAK,gBAAgB,GAAKgB,EAAA,IAACzB,GAAiB,YAAAoB,EAA0B,EACrGK,EAAA,IAACnB,EAAA,CACC,OAAQG,EAAK,oBACb,WAAYY,EACZ,YAAcM,GAAMvB,EAAYuB,EAAGf,EAAYC,CAAsC,EACrF,WAAAD,EACA,cAAAC,EACA,QAAAI,EACA,WAAAC,EACA,aAAAH,EACA,YAAAK,CAAA,CACF,EAEAK,EAAA,IAACtB,EAAA,CACC,KAAI,GACJ,WAAAoB,EACA,SAAU,CAAClB,EAAkBO,CAAU,EACvC,UAAAE,EACA,SAAUF,EACV,YAAaC,EACb,WAAYQ,CAAA,CACd,QACC,KAAG,EAAA,CACN,CAAA,CAAA,CAEJ"}