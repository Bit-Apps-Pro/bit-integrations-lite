{"version":3,"file":"bi.738.914.js","sources":["../frontend-dev/src/components/AllIntegrations/NutshellCRM/NutshellCRMCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\nimport { __ } from \"../../../Utils/i18nwrap\";\n\nexport const handleInput = (e, nutshellCRMConf, setNutshellCRMConf) => {\n  const newConf = { ...nutshellCRMConf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setNutshellCRMConf({ ...newConf });\n};\n\nexport const generateMappedField = (nutshellCRMConf) => {\n  const requiredFlds =\n    nutshellCRMConf?.nutshellCRMFields &&\n    nutshellCRMConf?.nutshellCRMFields.filter(\n      (fld) =>\n        fld.required === true && fld.key !== \"owner\" && fld.key !== \"pipeline\"\n    );\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        nutshellCRMFormField: field.key,\n      }))\n    : [{ formField: \"\", nutshellCRMFormField: \"\" }];\n};\n\nexport const checkMappedFields = (nutshellCRMConf) => {\n  const mappedFields = nutshellCRMConf?.field_map\n    ? nutshellCRMConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.nutshellCRMFormField ||\n          (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n          (mappedField.nutshellCRMFormField === \"customFieldKey\" &&\n            !mappedField.customFieldKey)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const nutshellCRMAuthentication = (\n  confTmp,\n  setConf,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.user_name || !confTmp.api_token) {\n    setError({\n      user_name: !confTmp.user_name\n        ? __(\"User Name can't be empty\", \"bit-integrations\")\n        : \"\",\n      api_token: !confTmp.api_token\n        ? __(\"API Token can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n\n  setError({});\n  setLoading({ ...loading, auth: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true);\n      setLoading({ ...loading, auth: false });\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, auth: false });\n    toast.error(\n      __(\n        \"Authorized failed, Please enter valid User Name & Api Token\",\n        \"bit-integrations\"\n      )\n    );\n  });\n};\n\n\nexport const getAllCompanies = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, companies: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_companies\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.companies = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, companies: false });\n\n      toast.success(__(\"Companies fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, companies: false });\n    toast.error(__(\"Companies fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllContacts = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, contacts: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_contacts\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.contacts = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, contacts: false });\n\n      toast.success(__(\"Contacts fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, contacts: false });\n    toast.error(__(\"Contacts fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllSources = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, sources: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_sources\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.sources = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, sources: false });\n\n      toast.success(__(\"Sources fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, sources: false });\n    toast.error(__(\"Sources fetching failed\", \"bit-integrations\"));\n  });\n};\nexport const getAllTags = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, tags: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_tags\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.tags = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, tags: false });\n\n      toast.success(__(\"Tags fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, tags: false });\n    toast.error(__(\"Tags fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllProducts = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, products: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_products\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.products = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, products: false });\n\n      toast.success(__(\"Products fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, products: false });\n    toast.error(__(\"Products fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllCompanyTypes = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, companyTypes: true });\n\n  const requestParams = {\n    user_name: confTmp.user_name,\n    api_token: confTmp.api_token,\n  };\n\n  bitsFetch(requestParams, \"nutshellcrm_fetch_all_companytypes\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.companyTypes = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, companyTypes: false });\n\n      toast.success(__(\"CompanyTypes fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, companyTypes: false });\n    toast.error(__(\"CompanyTypes fetching failed\", \"bit-integrations\"));\n  });\n};\n"],"names":["__","bitsFetch","_t","handleInput","e","nutshellCRMConf","setNutshellCRMConf","newConf","__spreadValues","name","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","nutshellCRMAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getAllCompanies","getAllContacts","getAllSources","getAllTags","getAllProducts","getAllCompanyTypes"],"mappings":"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"}