{"version":3,"file":"bi.8.830.js","sources":["../frontend-dev/src/components/AllIntegrations/SendGrid/SendGridCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, sendGridConf, setSendGridConf) => {\n  const newConf = { ...sendGridConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setSendGridConf({ ...newConf })\n}\n\nexport const generateMappedField = (sendGridConf) => {\n  const requiredFlds = sendGridConf?.staticFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', sendGridFormField: field.key })) : [{ formField: '', sendGridFormField: '' }]\n}\n\nexport const checkMappedFields = (sendGridConf) => {\n  const mappedFields = sendGridConf?.field_map ? sendGridConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.sendGridFormField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const sendGridAuthentication = (confTmp, setConf, setError, setIsAuthorized, loading, setLoading, type) => {\n  if (!confTmp.apiKey) {\n    setError({ apiKey: !confTmp.apiKey ? __('API key can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n\n  setError({})\n\n  if (type === 'authentication') {\n    setLoading({ ...loading, auth: true })\n  }\n  if (type === 'refreshLists') {\n    setLoading({ ...loading, customFields: true })\n  }\n  const requestParams = { apiKey: confTmp.apiKey }\n\n  bitsFetch(requestParams, 'sendGrid_authentication')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        setIsAuthorized(true)\n        if (type === 'authentication') {\n          if (result.data) {\n            newConf.customFields = result.data\n          }\n          setConf(newConf)\n          setLoading({ ...loading, auth: false })\n          toast.success(__('Authorized successfully', 'bit-integrations'))\n        } else if (type === 'refreshLists') {\n          if (result.data) {\n            newConf.customFields = result.data\n            setConf(newConf)\n          }\n          setLoading({ ...loading, customFields: false })\n          toast.success(__('Custom fields fetched successfully', 'bit-integrations'))\n        }\n        return\n      }\n      setLoading({ ...loading, auth: false })\n      toast.error(__('Authorization failed', 'bit-integrations'))\n    })\n}\n\nexport const getLists = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, lists: true })\n\n  const requestParams = { apiKey: confTmp.apiKey }\n\n  bitsFetch(requestParams, 'sendGrid_fetch_all_lists')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.lists = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, lists: false })\n\n        toast.success(__('Lists fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, lists: false })\n      toast.error(__('Lists fetching failed', 'bit-integrations'))\n    })\n}\n"],"names":["__","bitsFetch","_t","handleInput","sendGridConf","setSendGridConf","newConf","__spreadValues","name","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","sendGridAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","type","__spreadProps","requestParams","result","toast","getLists"],"mappings":"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"}