{"version":3,"file":"bi.767.698.js","sources":["../frontend-dev/src/components/AllIntegrations/OneDrive/OneDriveCommonFunc.js"],"sourcesContent":["/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { sortArrOfObj } from '../../../Utils/Helpers'\n\nexport const handleInput = (e, oneDriveConf, setOneDriveConf, formID, setIsLoading, setSnackbar, i = 0) => {\n  let newConf = { ...oneDriveConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  // new\n\n  newConf[e.target.name] = e.target.value\n  switch (e.target.name) {\n    case 'folder':\n      newConf.folderMap = newConf.folderMap.slice(0, i)\n      newConf = folderChange(newConf, formID, setOneDriveConf, setIsLoading, setSnackbar)\n      break\n    default:\n      break\n  }\n  // end\n  setOneDriveConf({ ...newConf })\n}\n\nexport const folderChange = (oneDriveConf, formID, setOneDriveConf, setIsLoading, setSnackbar) => {\n  const newConf = { ...oneDriveConf }\n  delete newConf.teamType\n\n  if (newConf.folder && !newConf.default?.folders?.[newConf.folder]) {\n    if (newConf.default?.teamFolders?.[newConf.team]?.[newConf.folder]?.type === 'private') {\n      newConf.teamType = 'private'\n    }\n    getSingleOneDriveFolders(formID, newConf, setOneDriveConf, setIsLoading, setSnackbar)\n  } else if (newConf.folder && newConf.folder !== newConf.folderMap[newConf.folderMap.length - 1]) newConf.folderMap.push(newConf.folder)\n\n  return newConf\n}\n\nexport const getAllOneDriveFolders = (flowID, oneDriveConf, setOneDriveConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const queryParams = {\n    flowID: flowID ?? null,\n    clientId: oneDriveConf.clientId,\n    clientSecret: oneDriveConf.clientSecret,\n    tokenDetails: oneDriveConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(queryParams, 'oneDrive_get_all_folders')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...oneDriveConf }\n        if (!newConf.default) newConf.default = {}\n        if (result.data.oneDriveFoldersList) {\n          newConf.default.rootFolders = result.data.oneDriveFoldersList\n          newConf.tokenDetails = result.data.tokenDetails\n        }\n\n        setOneDriveConf(newConf)\n        setIsLoading(false)\n        return 'OneDrive Folders List refreshed successfully'\n      } else {\n        setIsLoading(false)\n        return 'OneDrive Folders List refresh failed. please try again'\n      }\n    })\n    .catch(() => setIsLoading(false))\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading OneDrive Folders List...', 'bit-integrations'),\n  })\n}\n\nexport const getSingleOneDriveFolders = (formID, oneDriveConf, setOneDriveConf, setIsLoading, setSnackbar, ind) => {\n  const folder = ind ? oneDriveConf.folderMap[ind] : oneDriveConf.folder\n  setIsLoading(true)\n  const refreshSubFoldersRequestParams = {\n    formID,\n    dataCenter: oneDriveConf.dataCenter,\n    clientId: oneDriveConf.clientId,\n    clientSecret: oneDriveConf.clientSecret,\n    tokenDetails: oneDriveConf.tokenDetails,\n    // redirectURI: `${btcbi.api.base}/redirect`,\n    team: oneDriveConf.team,\n    folder,\n    teamType: 'teamType' in oneDriveConf ? 'private' : 'team',\n  }\n\n  bitsFetch(refreshSubFoldersRequestParams, 'oneDrive_get_single_folder')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...oneDriveConf }\n        if (result.data.folders) {\n          if (!newConf.default.folders) {\n            newConf.default.folders = {}\n          }\n\n          newConf.default.folders[folder] = sortArrOfObj(result.data.folders, 'folderName')\n          if (!newConf.folderMap.includes(folder)) newConf.folderMap.push(folder)\n          setSnackbar({ show: true, msg: __('Sub Folders refreshed', 'bitform') })\n        } else {\n          setSnackbar({ show: true, msg: __('No Sub Folder Found', 'bitform') })\n        }\n\n        if (result.data.tokenDetails) {\n          newConf.tokenDetails = result.data.tokenDetails\n        }\n        setOneDriveConf({ ...newConf })\n      } else {\n        setSnackbar({ show: true, msg: __('Sub Folders refresh failed. please try again', 'bitform') })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\n// export const getSingleOneDriveFolders = (flowID, oneDriveConf, setOneDriveConf) => {\n//   // const folder = ind ? oneDriveConf.folderMap[ind] : oneDriveConf.folder\n//   const queryParams = {\n//     flowID: flowID ?? null,\n//     clientId: oneDriveConf.clientId,\n//     clientSecret: oneDriveConf.clientSecret,\n//     tokenDetails: oneDriveConf.tokenDetails,\n//     subFolderId: oneDriveConf.id,\n//   }\n//   const loadPostTypes = bitsFetch(queryParams, 'oneDrive_get_single_folder')\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...oneDriveConf }\n//         if (result.data.oneDriveFoldersList) {\n//           newConf.foldersList = result.data.oneDriveFoldersList\n//           newConf.tokenDetails = result.data.tokenDetails\n//         }\n\n//         setOneDriveConf(newConf)\n//         return 'OneDrive single Folders List refreshed successfully'\n//       } else {\n//         return 'OneDrive single Folders List refresh failed. please try again'\n//       }\n//     })\n//   toast.promise(loadPostTypes, {\n//     success: data => data,\n//     error: __('Error Occurred', 'bit-integrations'),\n//     loading: __('Loading OneDrive Folders List...', 'bit-integrations'),\n//   })\n// }\n\nexport const handleAuthorize = (confTmp, setConf, setIsAuthorized, setIsLoading, setError) => {\n  if (!confTmp.clientId || !confTmp.clientSecret) {\n    setError({\n      clientId: !confTmp.clientId ? __('Client Id can\\'t be empty', 'bit-integrations') : '',\n      clientSecret: !confTmp.clientSecret ? __('Client Secret can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n  setIsLoading(true)\n  const scopes = 'onedrive.readwrite offline_access Files.ReadWrite.All'\n  // eslint-disable-next-line no-undef\n  const apiEndpoint = `https://login.live.com/oauth20_authorize.srf?client_id=${confTmp.clientId}&scope=${scopes}&access_type=offline&prompt=consent&response_type=code&state=${encodeURIComponent(window.location.href)}/redirect&redirect_uri=${encodeURIComponent(`${btcbi.api.base}/redirect`)}`\n  const authWindow = window.open(apiEndpoint, 'oneDrive', 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isAuthRedirectLocation = false\n      const bitsOneDrive = localStorage.getItem('__oneDrive')\n      if (bitsOneDrive) {\n        isAuthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsOneDrive)\n        localStorage.removeItem('__oneDrive')\n      }\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isAuthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        toast.error(`${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}`)\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(grantTokenResponse, newConf, setConf, setIsAuthorized, setIsLoading)\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (grantToken, confTmp, setConf, setIsAuthorized, setIsLoading) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  // eslint-disable-next-line no-undef\n  tokenRequestParams.redirectURI = `${btcbi.api.base}/redirect`\n\n  bitsFetch(tokenRequestParams, 'oneDrive_authorization')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setIsAuthorized(true)\n        toast.success(__('Authorized Successfully', 'bit-integrations'))\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        toast.error(`${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}`)\n      } else {\n        toast.error(__('Authorization failed. please try again', 'bit-integrations'))\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["__","_t","bitsFetch","sortArrOfObj","handleInput","e","oneDriveConf","setOneDriveConf","formID","setIsLoading","setSnackbar","newConf","__spreadValues","name","folderChange","_a","_b","_c","_d","_e","_f","getSingleOneDriveFolders","getAllOneDriveFolders","flowID","queryParams","loadPostTypes","result","toast","data","ind","folder","refreshSubFoldersRequestParams","handleAuthorize","confTmp","setConf","setIsAuthorized","setError","scopes","apiEndpoint","authWindow","popupURLCheckTimer","grantTokenResponse","isAuthRedirectLocation","bitsOneDrive","errorCause","tokenHelper","grantToken","tokenRequestParams"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,EAAA,MAAAC,MAAA,iBAMY,MAACC,EAAc,CAACC,EAAGC,EAAcC,EAAiBC,EAAQC,EAAcC,EAAa,EAAI,IAAM,CACzG,IAAIC,EAAUC,EAAA,GAAKN,GACnB,KAAM,CAAE,KAAAO,GAASR,EAAE,OASnB,OARIA,EAAE,OAAO,QAAU,GACrBM,EAAQE,CAAI,EAAIR,EAAE,OAAO,MAEzB,OAAOM,EAAQE,CAAI,EAIrBF,EAAQN,EAAE,OAAO,IAAI,EAAIA,EAAE,OAAO,MAC1BA,EAAE,OAAO,KAAI,CACnB,IAAK,SACHM,EAAQ,UAAYA,EAAQ,UAAU,MAAM,EAAG,CAAC,EAChDA,EAAUG,EAAaH,EAASH,EAAQD,EAAiBE,EAAcC,CAAW,EAClF,KAGH,CAEDH,EAAgBK,EAAA,GAAKD,EAAS,CAChC,EAEaG,EAAe,CAACR,EAAcE,EAAQD,EAAiBE,EAAcC,IAAgB,CA7BlG,IAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA8BE,MAAMT,EAAUC,EAAA,GAAKN,GACrB,cAAOK,EAAQ,SAEXA,EAAQ,QAAU,GAACK,GAAAD,EAAAJ,EAAQ,UAAR,YAAAI,EAAiB,UAAjB,MAAAC,EAA2BL,EAAQ,YACpDS,GAAAD,GAAAD,GAAAD,EAAAN,EAAQ,UAAR,YAAAM,EAAiB,cAAjB,YAAAC,EAA+BP,EAAQ,QAAvC,YAAAQ,EAA+CR,EAAQ,UAAvD,YAAAS,EAAgE,QAAS,YAC3ET,EAAQ,SAAW,WAErBU,EAAyBb,EAAQG,EAASJ,EAAiBE,EAAcC,CAAW,GAC3EC,EAAQ,QAAUA,EAAQ,SAAWA,EAAQ,UAAUA,EAAQ,UAAU,OAAS,CAAC,GAAGA,EAAQ,UAAU,KAAKA,EAAQ,MAAM,EAE/HA,CACT,EAEaW,EAAwB,CAACC,EAAQjB,EAAcC,EAAiBE,EAAcC,IAAgB,CACzGD,EAAa,EAAI,EACjB,MAAMe,EAAc,CAClB,OAAQD,GAAA,KAAAA,EAAU,KAClB,SAAUjB,EAAa,SACvB,aAAcA,EAAa,aAC3B,aAAcA,EAAa,YAC5B,EACKmB,EAAgBvB,EAAUsB,EAAa,0BAA0B,EACpE,KAAKE,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMf,EAAUC,EAAA,GAAKN,GACrB,OAAKK,EAAQ,UAASA,EAAQ,QAAU,CAAE,GACtCe,EAAO,KAAK,sBACdf,EAAQ,QAAQ,YAAce,EAAO,KAAK,oBAC1Cf,EAAQ,aAAee,EAAO,KAAK,cAGrCnB,EAAgBI,CAAO,EACvBF,EAAa,EAAK,EACX,8CACf,KACQ,QAAAA,EAAa,EAAK,EACX,wDAEf,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,EAClCkB,EAAM,QAAQF,EAAe,CAC3B,QAASG,GAAQA,EACjB,MAAO5B,EAAG,iBAAkB,kBAAkB,EAC9C,QAASA,EAAG,mCAAoC,kBAAkB,CACtE,CAAG,CACH,EAEaqB,EAA2B,CAACb,EAAQF,EAAcC,EAAiBE,EAAcC,EAAamB,IAAQ,CACjH,MAAMC,EAASD,EAAMvB,EAAa,UAAUuB,CAAG,EAAIvB,EAAa,OAChEG,EAAa,EAAI,EACjB,MAAMsB,EAAiC,CACrC,OAAAvB,EACA,WAAYF,EAAa,WACzB,SAAUA,EAAa,SACvB,aAAcA,EAAa,aAC3B,aAAcA,EAAa,aAE3B,KAAMA,EAAa,KACnB,OAAAwB,EACA,SAAU,aAAcxB,EAAe,UAAY,MACpD,EAEDJ,EAAU6B,EAAgC,4BAA4B,EACnE,KAAKL,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMf,EAAUC,EAAA,GAAKN,GACjBoB,EAAO,KAAK,SACTf,EAAQ,QAAQ,UACnBA,EAAQ,QAAQ,QAAU,CAAE,GAG9BA,EAAQ,QAAQ,QAAQmB,CAAM,EAAI3B,EAAauB,EAAO,KAAK,QAAS,YAAY,EAC3Ef,EAAQ,UAAU,SAASmB,CAAM,GAAGnB,EAAQ,UAAU,KAAKmB,CAAM,EACtEpB,EAAY,CAAE,KAAM,GAAM,IAAKV,EAAG,wBAAyB,SAAS,EAAG,GAEvEU,EAAY,CAAE,KAAM,GAAM,IAAKV,EAAG,sBAAuB,SAAS,EAAG,EAGnE0B,EAAO,KAAK,eACdf,EAAQ,aAAee,EAAO,KAAK,cAErCnB,EAAgBK,EAAA,GAAKD,EAAS,CACtC,MACQD,EAAY,CAAE,KAAM,GAAM,IAAKV,EAAG,+CAAgD,SAAS,EAAG,EAEhGS,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAiCauB,EAAkB,CAACC,EAASC,EAASC,EAAiB1B,EAAc2B,IAAa,CAC5F,GAAI,CAACH,EAAQ,UAAY,CAACA,EAAQ,aAAc,CAC9CG,EAAS,CACP,SAAWH,EAAQ,SAAiE,GAAtDjC,EAAG,2BAA6B,kBAAkB,EAChF,aAAeiC,EAAQ,aAAyE,GAA1DjC,EAAG,+BAAiC,kBAAkB,CAClG,CAAK,EACD,MACD,CACDS,EAAa,EAAI,EACjB,MAAM4B,EAAS,wDAETC,EAAc,0DAA0DL,EAAQ,QAAQ,UAAUI,CAAM,gEAAgE,mBAAmB,OAAO,SAAS,IAAI,CAAC,0BAA0B,mBAAmB,GAAG,MAAM,IAAI,IAAI,WAAW,CAAC,GAC1RE,EAAa,OAAO,KAAKD,EAAa,WAAY,kCAAkC,EACpFE,EAAqB,YAAY,IAAM,CAC3C,GAAID,EAAW,OAAQ,CACrB,cAAcC,CAAkB,EAChC,IAAIC,EAAqB,CAAE,EACvBC,EAAyB,GAC7B,MAAMC,EAAe,aAAa,QAAQ,YAAY,EAMtD,GALIA,IACFD,EAAyB,GACzBD,EAAqB,KAAK,MAAME,CAAY,EAC5C,aAAa,WAAW,YAAY,GAElC,CAACF,EAAmB,MAAQA,EAAmB,OAAS,CAACA,GAAsB,CAACC,EAAwB,CAC1G,MAAME,EAAaH,EAAmB,MAAQ,UAAUA,EAAmB,KAAK,GAAK,GACrFd,EAAM,MAAM,GAAG3B,EAAG,uBAAwB,kBAAkB,CAAC,IAAI4C,CAAU,KAAK5C,EAAG,mBAAoB,kBAAkB,CAAC,EAAE,EAC5HS,EAAa,EAAK,CAC1B,KAAa,CACL,MAAME,EAAUC,EAAA,GAAKqB,GACrBtB,EAAQ,cAAgB8B,EAAmB,iBAAiB,EAC5DI,EAAYJ,EAAoB9B,EAASuB,EAASC,EAAiB1B,CAAY,CAChF,CACF,CACF,EAAE,GAAG,CACR,EAEMoC,EAAc,CAACC,EAAYb,EAASC,EAASC,EAAiB1B,IAAiB,CACnF,MAAMsC,EAAqBnC,EAAA,GAAKkC,GAChCC,EAAmB,SAAWd,EAAQ,SACtCc,EAAmB,aAAed,EAAQ,aAE1Cc,EAAmB,YAAc,GAAG,MAAM,IAAI,IAAI,YAElD7C,EAAU6C,EAAoB,wBAAwB,EACnD,KAAKrB,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMf,EAAUC,EAAA,GAAKqB,GACrBtB,EAAQ,aAAee,EAAO,KAC9BQ,EAAQvB,CAAO,EACfwB,EAAgB,EAAI,EACpBR,EAAM,QAAQ3B,EAAG,0BAA2B,kBAAkB,CAAC,CAChE,MAAW0B,GAAUA,EAAO,MAAQA,EAAO,KAAK,MAAU,CAACA,EAAO,SAAW,OAAOA,EAAO,MAAS,SACnGC,EAAM,MAAM,GAAG3B,EAAG,8BAA+B,kBAAkB,CAAC,GAAG0B,EAAO,KAAK,MAAQA,EAAO,IAAI,KAAK1B,EAAG,mBAAoB,kBAAkB,CAAC,EAAE,EAEvJ2B,EAAM,MAAM3B,EAAG,yCAA0C,kBAAkB,CAAC,EAE9ES,EAAa,EAAK,CACxB,CAAK,CACL"}