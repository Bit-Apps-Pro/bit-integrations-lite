{"version":3,"file":"bi.845.777.js","sources":["../frontend-dev/src/components/AllIntegrations/BitForm/BitFormCommonFunc.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, bitFormConf, setBitFormConf, formID, setIsLoading, setSnackbar) => {\n  let newConf = { ...bitFormConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  newConf[e.target.name] = e.target.value\n  switch (e.target.name) {\n    case 'id':\n      newConf = listChange(newConf, formID, setBitFormConf, setIsLoading, setSnackbar)\n      break\n    default:\n      break\n  }\n  setBitFormConf({ ...newConf })\n}\n\nexport const listChange = (bitFormConf, formID, setBitFormConf, setIsLoading, setSnackbar) => {\n  const newConf = deepCopy(bitFormConf)\n  newConf.field_map = [{ formField: '', BitFormMapField: '' }]\n\n  if (!newConf?.default?.fields?.[newConf.id]) {\n    fetchSingleFormFeilds(formID, newConf, setBitFormConf, setIsLoading, setSnackbar)\n  }\n  return newConf\n}\n\nexport const checkAddressFieldMapRequired = sheetConf => {\n  const requiredFleld = sheetConf?.address_field ? sheetConf.address_field.filter(field => !field.formField && field.mailChimpAddressField && field.required) : []\n  if (requiredFleld.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.api_key) {\n    setError({ api_key: !confTmp.api_key ? __('Api Key can\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setError({})\n  setIsLoading(true)\n\n  const requestParams = { app_domain: confTmp.domainName, api_key: confTmp.api_key }\n\n  bitsFetch(requestParams, 'bitForm_authorization_and_fetch_form_list')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        setConf(newConf)\n        setisAuthorized(true)\n        setIsLoading(false)\n        toast.success(__('Authorization Successful', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Authorization Failed', 'bit-integrations'))\n    })\n}\n\nexport const fetchAllForm = (bitFormConf, setBitFormConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { app_domain: bitFormConf.domainName, api_key: bitFormConf.api_key }\n\n  bitsFetch(requestParams, 'bitForm_all_form_list')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...bitFormConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data.forms) {\n          newConf.default.forms = result.data.forms\n        }\n        setBitFormConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('BitForm list fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Failed to fetch BitForm list', 'bit-integrations'))\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchSingleFormFeilds = (formID, bitFormConf, setBitFormConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { app_domain: bitFormConf.domainName, api_key: bitFormConf.api_key, id: bitFormConf.id }\n\n  bitsFetch(requestParams, 'bitForm_fetch_single_form_fields')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...bitFormConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data.fields) {\n          newConf.default.fields = result.data.fields\n        }\n        setBitFormConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('BitForm fields fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Failed to fetch BitForm fields. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (bitFormConf) => {\n  const requiredFlds = bitFormConf?.BitFormFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', BitFormMapField: field.key })) : [{ formField: '', BitFormMapField: '' }]\n}\n\nexport const checkMappedFields = (bitFormConf) => {\n  const mappedFleld = bitFormConf.field_map ? bitFormConf.field_map.filter(mapped => (!mapped.formField && !mapped.BitFormMapField)) : []\n  if (mappedFleld.length > 0) {\n    return false\n  }\n  return true\n}\n"],"names":["__","bitsFetch","_t","deepCopy","handleInput","bitFormConf","setBitFormConf","formID","setIsLoading","setSnackbar","newConf","__spreadValues","name","listChange","_a","_b","fetchSingleFormFeilds","checkAddressFieldMapRequired","sheetConf","field","handleAuthorize","confTmp","setConf","setError","setisAuthorized","requestParams","result","toast","fetchAllForm","checkMappedFields","mapped"],"mappings":"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"}