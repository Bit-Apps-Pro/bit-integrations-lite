{"version":3,"file":"bi.293.799.js","sources":["../frontend-dev/src/components/AllIntegrations/GamiPress/GamiPressCommonFunc.js","../frontend-dev/src/components/AllIntegrations/GamiPress/IntegrationHelpers.jsx","../frontend-dev/src/components/AllIntegrations/GamiPress/GamiPressFieldMap.jsx","../frontend-dev/src/components/AllIntegrations/GamiPress/GamiPressIntegLayout.jsx"],"sourcesContent":["import toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar, formID) => {\n  const newConf = { ...gamiPressConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n\n  newConf[e.target.name] = e.target.value\n  setGamiPressConf({ ...newConf })\n}\n\nexport const fetchAllRankType = (gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { domainName: gamiPressConf.domainName }\n  bitsFetch(requestParams, 'gamiPress_fetch_all_rank_type')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...gamiPressConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allRankTypes = result.data\n        }\n        setGamiPressConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('Rank Type fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('Rank Type fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchAllAchievementType = (gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  bitsFetch(null, 'gamiPress_fetch_all_achievement_type')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...gamiPressConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allAchievementTypes = result.data\n        }\n        setGamiPressConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('All achievement Type fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('All achievement fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\nexport const fetchAllAchievementByType = (gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { achievementType: gamiPressConf.selectedAchievementType }\n  bitsFetch(requestParams, 'gamiPress_fetch_all_achievement_by_type')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...gamiPressConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allAchievements = result.data\n        }\n        setGamiPressConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('All achievements fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('All achievements fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchAllRankByType = (gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { domainName: gamiPressConf.rankType }\n  bitsFetch(requestParams, 'gamiPress_fetch_all_rank_by_type')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...gamiPressConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allRanks = result.data\n        }\n        setGamiPressConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('All rank fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('All rank type fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchAllPointType = (gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const requestParams = { domainName: gamiPressConf.rankType }\n  bitsFetch(requestParams, 'gamiPress_fetch_all_point_type')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...gamiPressConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data) {\n          newConf.default.allPointTypes = result.data\n        }\n        setGamiPressConf({ ...newConf })\n        setIsLoading(false)\n        toast.success(__('All point type fetched successfully', 'bit-integrations'))\n        return\n      }\n      setIsLoading(false)\n      toast.error(__('All point type fetch failed. please try again', 'bit-integrations'))\n    })\n\n    .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (gamiPressConf) => {\n  const requiredFlds = gamiPressConf?.pointFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', gamiPressFormField: field.key })) : [{ formField: '', gamiPressFormField: '' }]\n}\n\nexport const checkMappedFields = (gamiPressConf) => {\n  const mappedFleld = gamiPressConf.field_map ? gamiPressConf.field_map.filter(mapped => (!mapped.formField && !mapped.gamiPressFormField)) : []\n  if (mappedFleld.length > 0) {\n    return false\n  }\n  return true\n}\n","/* eslint-disable no-unused-expressions */\nimport { __ } from '../../../Utils/i18nwrap'\n\nexport const addFieldMap = (i, confTmp, setConf) => {\n  const newConf = { ...confTmp }\n  newConf.field_map.splice(i, 0, {})\n  setConf({ ...newConf })\n \n}\n\nexport const delFieldMap = (i, confTmp, setConf) => {\n  const newConf = { ...confTmp }\n  if (newConf.field_map.length > 1) {\n    newConf.field_map.splice(i, 1)\n  }\n\n  setConf({ ...newConf })\n}\n\nexport const handleFieldMapping = (event, index, conftTmp, setConf) => {\n  const newConf = { ...conftTmp }\n  newConf.field_map[index][event.target.name] = event.target.value\n\n  if (event.target.value === 'custom') {\n    newConf.field_map[index].customValue = ''\n  }\n  setConf({ ...newConf })\n}\n","import { useRecoilValue } from 'recoil'\nimport { __ } from '../../../Utils/i18nwrap'\nimport MtInput from '../../Utilities/MtInput'\nimport { addFieldMap, delFieldMap, handleFieldMapping } from './IntegrationHelpers'\nimport { SmartTagField } from '../../../Utils/StaticData/SmartTagField'\nimport { $btcbi } from '../../../GlobalStates'\nimport { generateMappedField } from './GamiPressCommonFunc'\nimport TagifyInput from '../../Utilities/TagifyInput'\nimport { handleCustomValue } from '../IntegrationHelpers/IntegrationHelpers'\n\nexport default function GamiPressFieldMap({ i, formFields, field, gamiPressConf, setGamiPressConf }) {\n  if (gamiPressConf?.field_map?.length === 1 && field.gamiPressFormField === '') {\n    const newConf = { ...gamiPressConf }\n    const tmp = generateMappedField(newConf)\n    newConf.field_map = tmp\n    setGamiPressConf(newConf)\n  }\n\n  const requiredFlds = gamiPressConf?.pointFields.filter(fld => fld.required === true) || []\n  const nonRequiredFlds = gamiPressConf?.pointFields.filter(fld => fld.required === false) || []\n\n  const btcbi = useRecoilValue($btcbi)\n  const { isPro } = btcbi\n\n  return (\n    <div\n      className=\"flx mt-2 mb-2 btcbi-field-map\"\n    >\n      <div className=\"pos-rel flx\">\n        <div className=\"flx integ-fld-wrp\">\n          <select className=\"btcd-paper-inp mr-2\" name=\"formField\" value={field.formField || ''} onChange={(ev) => handleFieldMapping(ev, i, gamiPressConf, setGamiPressConf)}>\n            <option value=\"\">{__('Select Field', 'bit-integrations')}</option>\n            <optgroup label=\"Form Fields\">\n              {\n\n                formFields?.map(f => (\n                  <option key={`ff-rm-${f.name}`} value={f.name}>\n                    {f.label}\n                  </option>\n                ))\n              }\n            </optgroup>\n            <option value=\"custom\">{__('Custom...', 'bit-integrations')}</option>\n            <optgroup label={`General Smart Codes ${isPro ? '' : '(PRO)'}`}>\n              {isPro && SmartTagField?.map(f => (\n                <option key={`ff-rm-${f.name}`} value={f.name}>\n                  {f.label}\n                </option>\n              ))}\n            </optgroup>\n\n          </select>\n\n          {field.formField === 'custom' && <TagifyInput onChange={e => handleCustomValue(e, i, gamiPressConf, setGamiPressConf)} label={__('Custom Value', 'bit-integrations')} className=\"mr-2\" type=\"text\" value={field.customValue} placeholder={__('Custom Value', 'bit-integrations')} formFields={formFields} />}\n\n          <select className=\"btcd-paper-inp\" disabled={i < requiredFlds.length} name=\"gamiPressFormField\" value={i < requiredFlds.length ? (requiredFlds[i].key || '') : (field.gamiPressFormField || '')} onChange={(ev) => handleFieldMapping(ev, i, gamiPressConf, setGamiPressConf)}>\n            <option value=\"\">{__('Select Field', 'bit-integrations')}</option>\n            {\n              i < requiredFlds.length ? (\n                <option key={requiredFlds[i].key} value={requiredFlds[i].key}>\n                  {requiredFlds[i].label}\n                </option>\n              ) : (\n                nonRequiredFlds.map(({ key, label }) => (\n                  <option key={key} value={key}>\n                    {label}\n                  </option>\n                ))\n              )\n            }\n          </select>\n        </div>\n        {\n          i >= requiredFlds.length && (\n            <>\n              <button\n                onClick={() => addFieldMap(i, gamiPressConf, setGamiPressConf)}\n                className=\"icn-btn sh-sm ml-2 mr-1\"\n                type=\"button\"\n              >\n                +\n              </button>\n              <button onClick={() => delFieldMap(i, gamiPressConf, setGamiPressConf)} className=\"icn-btn sh-sm ml-1\" type=\"button\" aria-label=\"btn\">\n                <span className=\"btcd-icn icn-trash-2\" />\n              </button>\n            </>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\nimport MultiSelect from 'react-multiple-select-dropdown-lite'\nimport { __ } from '../../../Utils/i18nwrap'\nimport Loader from '../../Loaders/Loader'\nimport { addFieldMap } from '../IntegrationHelpers/IntegrationHelpers'\nimport { fetchAllAchievementByType, fetchAllAchievementType, fetchAllPointType, fetchAllRankByType, fetchAllRankType } from './GamiPressCommonFunc'\nimport GamiPressFieldMap from './GamiPressFieldMap'\nimport Note from '../../Utilities/Note'\n\nexport default function GamiPressIntegLayout({ formFields, handleInput, gamiPressConf, setGamiPressConf, isLoading, setIsLoading, setSnackbar, allIntegURL, isInfo, edit }) {\n  useEffect(() => {\n    if (['1', '4'].includes(gamiPressConf.mainAction)) {\n      fetchAllRankType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)\n    }\n    if (['2', '5'].includes(gamiPressConf.mainAction)) {\n      fetchAllAchievementType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)\n    }\n    if (['3', '6'].includes(gamiPressConf.mainAction)) {\n      fetchAllPointType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)\n    }\n  }, [gamiPressConf.mainAction])\n\n  const changeHandler = (val, status) => {\n    const newConf = { ...gamiPressConf }\n    newConf[status] = val\n\n    if (status === 'rankType') {\n      fetchAllRankByType(newConf, setGamiPressConf, setIsLoading, setSnackbar)\n    }\n    if (status === 'selectedAchievementType') {\n      fetchAllAchievementByType(newConf, setGamiPressConf, setIsLoading, setSnackbar)\n    }\n\n    setGamiPressConf({ ...newConf })\n  }\n  return (\n    <>\n      <br />\n      <b className=\"wdt-200 d-in-b\">{__('Actions:', 'bit-integrations')}</b>\n      <select onChange={handleInput} name=\"mainAction\" value={gamiPressConf.mainAction} className=\"btcd-paper-inp w-5\">\n        <option value=\"\">{__('Select Actions', 'bit-integrations')}</option>\n        {\n          gamiPressConf.allActions && gamiPressConf.allActions.map(({ key, label }) => (\n            <option key={key} value={key}>\n              {label}\n            </option>\n          ))\n        }\n      </select>\n      <br />\n      <br />\n      {['1', '4'].includes(gamiPressConf.mainAction) && (\n        <>\n          <div className=\"flx mt-4\">\n            <b className=\"wdt-200 d-in-b\">{__('Select Rank Type: ', 'bit-integrations')}</b>\n            <MultiSelect\n              className=\"w-5\"\n              defaultValue={gamiPressConf?.rankType}\n              options={gamiPressConf?.default?.allRankTypes && gamiPressConf.default.allRankTypes.map((item) => ({ label: item.post_title, value: item.post_name.toString() }))}\n              singleSelect\n              onChange={(val) => changeHandler(val, 'rankType')}\n            />\n            <button onClick={() => fetchAllRankType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Fetch Rank Type List', 'bit-integrations')}'` }} type=\"button\" disabled={isLoading}>&#x21BB;</button>\n          </div>\n\n          <br />\n          <div className=\"flx mt-4\">\n            <b className=\"wdt-200 d-in-b\">{__('Select Rank: ', 'bit-integrations')}</b>\n            <MultiSelect\n              className=\"w-5\"\n              defaultValue={gamiPressConf?.selectedRank}\n              options={gamiPressConf?.default?.allRanks && gamiPressConf.default.allRanks.map((rank) => ({ label: rank.post_title, value: rank.ID.toString() }))}\n              singleSelect\n              onChange={(val) => changeHandler(val, 'selectedRank')}\n            />\n            <button onClick={() => fetchAllRankByType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Fetch Rank', 'bit-integrations')}'` }} type=\"button\" disabled={isLoading}>&#x21BB;</button>\n          </div>\n        </>\n      )}\n\n      {['2', '5'].includes(gamiPressConf.mainAction) && (\n        <>\n          <div className=\"flx mt-4\">\n            <b className=\"wdt-200 d-in-b\">{__('Select Achievement Type: ', 'bit-integrations')}</b>\n            <MultiSelect\n              className=\"w-5\"\n              defaultValue={gamiPressConf?.selectedAchievementType}\n              options={gamiPressConf?.default?.allAchievementTypes && gamiPressConf.default.allAchievementTypes.map((item) => ({ label: item.post_title, value: item.post_name.toString() }))}\n              singleSelect\n              onChange={(val) => changeHandler(val, 'selectedAchievementType')}\n            />\n            <button onClick={() => fetchAllAchievementType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Fetch achievement type list', 'bit-integrations')}'` }} type=\"button\" disabled={isLoading}>&#x21BB;</button>\n          </div>\n\n          <br />\n          <div className=\"flx mt-4\">\n            <b className=\"wdt-200 d-in-b\">{__('Select Achievement: ', 'bit-integrations')}</b>\n            <MultiSelect\n              className=\"w-5\"\n              defaultValue={gamiPressConf?.selectedAchievement}\n              options={gamiPressConf?.default?.allAchievements && gamiPressConf.default.allAchievements.map((rank) => ({ label: rank.post_title, value: rank.ID.toString() }))}\n              singleSelect\n              onChange={(val) => changeHandler(val, 'selectedAchievement')}\n            />\n            <button onClick={() => fetchAllAchievementByType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Fetch Achievement', 'bit-integrations')}'` }} type=\"button\" disabled={isLoading}>&#x21BB;</button>\n          </div>\n        </>\n      )}\n      {['3', '6'].includes(gamiPressConf.mainAction) && (\n        <div className=\"flx mt-4\">\n          <b className=\"wdt-200 d-in-b\">{__('Enter Point: ', 'bit-integrations')}</b>\n          <MultiSelect\n            className=\"w-5\"\n            defaultValue={gamiPressConf?.selectedPointType}\n            options={gamiPressConf?.default?.allPointTypes && gamiPressConf.default.allPointTypes.map((item) => ({ label: item.post_title, value: item.post_name.toString() }))}\n            singleSelect\n            onChange={(val) => changeHandler(val, 'selectedPointType')}\n          />\n          <button onClick={() => fetchAllPointType(gamiPressConf, setGamiPressConf, setIsLoading, setSnackbar)} className=\"icn-btn sh-sm ml-2 mr-2 tooltip\" style={{ '--tooltip-txt': `'${__('Fetch point type', 'bit-integrations')}'` }} type=\"button\" disabled={isLoading}>&#x21BB;</button>\n        </div>\n      )}\n\n      <br />\n      <br />\n      {isLoading && (\n        <Loader style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: 100,\n          transform: 'scale(0.7)',\n        }}\n        />\n      )}\n\n      {['3', '6'].includes(gamiPressConf.mainAction)\n        && (\n          <>\n            <div className=\"mt-4\">\n              <b className=\"wdt-100\">{__('Map Fields', 'bit-integrations')}</b>\n            </div>\n            <div className=\"btcd-hr mt-1\" />\n            <div className=\"flx flx-around mt-2 mb-2 btcbi-field-map-label\">\n              <div className=\"txt-dp\"><b>{__('Form Fields', 'bit-integrations')}</b></div>\n              <div className=\"txt-dp\"><b>{__('GamiPress Fields', 'bit-integrations')}</b></div>\n            </div>\n\n            {gamiPressConf.field_map.map((itm, i) => (\n              <GamiPressFieldMap\n                key={`dash-m-${i + 9}`}\n                i={i}\n                field={itm}\n                gamiPressConf={gamiPressConf}\n                formFields={formFields}\n                setGamiPressConf={setGamiPressConf}\n              />\n            ))}\n            <div className=\"txt-center btcbi-field-map-button mt-2\"><button onClick={() => addFieldMap(gamiPressConf.field_map.length, gamiPressConf, setGamiPressConf)} className=\"icn-btn sh-sm\" type=\"button\">+</button></div>\n\n            <br />\n            <br />\n          </>\n        )}\n      <br />\n      <Note\n        note=\"Some integrations will only work for logged-in users.\"\n      />\n    </>\n  )\n}\n"],"names":["Recoil_index_18","jsxRuntimeExports","reactExports","Loader","bitsFetch","_t","__","$btcbi","u","Note","handleCustomValue","addFieldMap$1","SmartTagField","TagifyInput","handleInput","e","gamiPressConf","setGamiPressConf","setIsLoading","setSnackbar","formID","newConf","__spreadValues","name","fetchAllRankType","requestParams","result","toast","fetchAllAchievementType","fetchAllAchievementByType","fetchAllRankByType","fetchAllPointType","generateMappedField","requiredFlds","fld","field","addFieldMap","i","confTmp","setConf","delFieldMap","handleFieldMapping","event","index","conftTmp","GamiPressFieldMap","formFields","_a","_b","tmp","nonRequiredFlds","btcbi","useRecoilValue","isPro","jsx","jsxs","ev","f","key","label","Fragment","GamiPressIntegLayout","isLoading","allIntegURL","isInfo","edit","_c","_d","_e","useEffect","changeHandler","val","status","MultiSelect","item","rank","itm"],"mappings":"yVAKY,OAAA,KAAAA,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,MAAA,gBAAA,OAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,MAAAC,EAAA,MAAAC,MAAA,iBAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,kBAAA,OAAA,KAAAC,MAAA,iBAAA,MAACC,GAAc,CAACC,EAAGC,EAAeC,EAAkBC,EAAcC,EAAaC,IAAW,CACpG,MAAMC,EAAUC,EAAA,GAAKN,GACf,CAAE,KAAAO,GAASR,EAAE,OACfA,EAAE,OAAO,QAAU,GACrBM,EAAQE,CAAI,EAAIR,EAAE,OAAO,MAEzB,OAAOM,EAAQE,CAAI,EAGrBF,EAAQN,EAAE,OAAO,IAAI,EAAIA,EAAE,OAAO,MAClCE,EAAiBK,EAAA,GAAKD,EAAS,CACjC,EAEaG,EAAmB,CAACR,EAAeC,EAAkBC,EAAcC,IAAgB,CAC9FD,EAAa,EAAI,EACjB,MAAMO,EAAgB,CAAE,WAAYT,EAAc,UAAY,EAC9DZ,EAAUqB,EAAe,+BAA+B,EACrD,KAAKC,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAML,EAAUC,EAAA,GAAKN,GAChBK,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBK,EAAO,OACTL,EAAQ,QAAQ,aAAeK,EAAO,MAExCT,EAAiBK,EAAA,GAAKD,EAAS,EAC/BH,EAAa,EAAK,EAClBS,EAAM,QAAQrB,EAAG,iCAAkC,kBAAkB,CAAC,EACtE,MACD,CACDY,EAAa,EAAK,EAClBS,EAAM,MAAMrB,EAAG,2CAA4C,kBAAkB,CAAC,CACpF,CAAK,EAEA,MAAM,IAAMY,EAAa,EAAK,CAAC,CACpC,EAEaU,EAA0B,CAACZ,EAAeC,EAAkBC,EAAcC,IAAgB,CACrGD,EAAa,EAAI,EACjBd,EAAU,KAAM,sCAAsC,EACnD,KAAKsB,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAML,EAAUC,EAAA,GAAKN,GAChBK,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBK,EAAO,OACTL,EAAQ,QAAQ,oBAAsBK,EAAO,MAE/CT,EAAiBK,EAAA,GAAKD,EAAS,EAC/BH,EAAa,EAAK,EAClBS,EAAM,QAAQrB,EAAG,4CAA6C,kBAAkB,CAAC,EACjF,MACD,CACDY,EAAa,EAAK,EAClBS,EAAM,MAAMrB,EAAG,iDAAkD,kBAAkB,CAAC,CAC1F,CAAK,EAEA,MAAM,IAAMY,EAAa,EAAK,CAAC,CACpC,EACaW,EAA4B,CAACb,EAAeC,EAAkBC,EAAcC,IAAgB,CACvGD,EAAa,EAAI,EACjB,MAAMO,EAAgB,CAAE,gBAAiBT,EAAc,uBAAyB,EAChFZ,EAAUqB,EAAe,yCAAyC,EAC/D,KAAKC,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAML,EAAUC,EAAA,GAAKN,GAChBK,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBK,EAAO,OACTL,EAAQ,QAAQ,gBAAkBK,EAAO,MAE3CT,EAAiBK,EAAA,GAAKD,EAAS,EAC/BH,EAAa,EAAK,EAClBS,EAAM,QAAQrB,EAAG,wCAAyC,kBAAkB,CAAC,EAC7E,MACD,CACDY,EAAa,EAAK,EAClBS,EAAM,MAAMrB,EAAG,kDAAmD,kBAAkB,CAAC,CAC3F,CAAK,EAEA,MAAM,IAAMY,EAAa,EAAK,CAAC,CACpC,EAEaY,EAAqB,CAACd,EAAeC,EAAkBC,EAAcC,IAAgB,CAChGD,EAAa,EAAI,EACjB,MAAMO,EAAgB,CAAE,WAAYT,EAAc,QAAU,EAC5DZ,EAAUqB,EAAe,kCAAkC,EACxD,KAAKC,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAML,EAAUC,EAAA,GAAKN,GAChBK,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBK,EAAO,OACTL,EAAQ,QAAQ,SAAWK,EAAO,MAEpCT,EAAiBK,EAAA,GAAKD,EAAS,EAC/BH,EAAa,EAAK,EAClBS,EAAM,QAAQrB,EAAG,gCAAiC,kBAAkB,CAAC,EACrE,MACD,CACDY,EAAa,EAAK,EAClBS,EAAM,MAAMrB,EAAG,+CAAgD,kBAAkB,CAAC,CACxF,CAAK,EAEA,MAAM,IAAMY,EAAa,EAAK,CAAC,CACpC,EAEaa,EAAoB,CAACf,EAAeC,EAAkBC,EAAcC,IAAgB,CAC/FD,EAAa,EAAI,EACjB,MAAMO,EAAgB,CAAE,WAAYT,EAAc,QAAU,EAC5DZ,EAAUqB,EAAe,gCAAgC,EACtD,KAAKC,GAAU,CACd,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAML,EAAUC,EAAA,GAAKN,GAChBK,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAElBK,EAAO,OACTL,EAAQ,QAAQ,cAAgBK,EAAO,MAEzCT,EAAiBK,EAAA,GAAKD,EAAS,EAC/BH,EAAa,EAAK,EAClBS,EAAM,QAAQrB,EAAG,sCAAuC,kBAAkB,CAAC,EAC3E,MACD,CACDY,EAAa,EAAK,EAClBS,EAAM,MAAMrB,EAAG,gDAAiD,kBAAkB,CAAC,CACzF,CAAK,EAEA,MAAM,IAAMY,EAAa,EAAK,CAAC,CACpC,EAEac,EAAuBhB,GAAkB,CACpD,MAAMiB,EAAejB,GAAA,YAAAA,EAAe,YAAY,OAAOkB,GAAOA,EAAI,WAAa,IAC/E,OAAOD,EAAa,OAAS,EAAIA,EAAa,IAAIE,IAAU,CAAE,UAAW,GAAI,mBAAoBA,EAAM,GAAK,EAAC,EAAI,CAAC,CAAE,UAAW,GAAI,mBAAoB,GAAI,CAC7J,EC7IaC,EAAc,CAACC,EAAGC,EAASC,IAAY,CAC5C,MAAAlB,EAAUC,EAAA,GAAKgB,GACrBjB,EAAQ,UAAU,OAAOgB,EAAG,EAAG,CAAE,CAAA,EACzBE,EAAAjB,EAAA,GAAKD,EAAS,CAExB,EAEamB,EAAc,CAACH,EAAGC,EAASC,IAAY,CAC5C,MAAAlB,EAAUC,EAAA,GAAKgB,GACjBjB,EAAQ,UAAU,OAAS,GACrBA,EAAA,UAAU,OAAOgB,EAAG,CAAC,EAGvBE,EAAAjB,EAAA,GAAKD,EAAS,CACxB,EAEaoB,EAAqB,CAACC,EAAOC,EAAOC,EAAUL,IAAY,CAC/D,MAAAlB,EAAUC,EAAA,GAAKsB,GACbvB,EAAA,UAAUsB,CAAK,EAAED,EAAM,OAAO,IAAI,EAAIA,EAAM,OAAO,MAEvDA,EAAM,OAAO,QAAU,WACjBrB,EAAA,UAAUsB,CAAK,EAAE,YAAc,IAEjCJ,EAAAjB,EAAA,GAAKD,EAAS,CACxB,ECjBA,SAAwBwB,EAAkB,CAAE,EAAAR,EAAG,WAAAS,EAAY,MAAAX,EAAO,cAAAnB,EAAe,iBAAAC,GAAoB,CFLzF,IAAA8B,EAAAC,EEMV,KAAID,EAAA/B,GAAA,YAAAA,EAAe,YAAf,YAAA+B,EAA0B,UAAW,GAAKZ,EAAM,qBAAuB,GAAI,CACvE,MAAAd,EAAUC,EAAA,GAAKN,GACfiC,EAAMjB,EAAoBX,CAAO,EACvCA,EAAQ,UAAY4B,EACpBhC,EAAiBI,CAAO,CAC1B,CAEM,MAAAY,GAAejB,GAAA,YAAAA,EAAe,YAAY,UAAckB,EAAI,WAAa,MAAS,GAClFgB,GAAkBlC,GAAA,YAAAA,EAAe,YAAY,UAAckB,EAAI,WAAa,MAAU,GAEtFiB,EAAQC,EAAe7C,CAAM,EAC7B,CAAE,MAAA8C,CAAU,EAAAF,EAGhB,OAAAG,EAAA,IAAC,MAAA,CACC,UAAU,gCAEV,SAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,cACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAA,OAAC,UAAO,UAAU,sBAAsB,KAAK,YAAY,MAAOpB,EAAM,WAAa,GAAI,SAAWqB,GAAOf,EAAmBe,EAAInB,EAAGrB,EAAeC,CAAgB,EAChK,SAAA,CAAAqC,MAAC,UAAO,MAAM,GAAI,SAAGhD,EAAA,eAAgB,kBAAkB,EAAE,QACxD,WAAS,CAAA,MAAM,cAGZ,SAAYwC,GAAA,YAAAA,EAAA,OACTQ,EAAAA,IAAA,SAAA,CAA+B,MAAOG,EAAE,KACtC,WAAE,KADQ,EAAA,SAASA,EAAE,IAAI,EAE5B,EAGN,CAAA,QACC,SAAO,CAAA,MAAM,SAAU,SAAGnD,EAAA,YAAa,kBAAkB,EAAE,EAC5DgD,EAAAA,IAAC,WAAS,CAAA,MAAO,uBAAuBD,EAAQ,GAAK,OAAO,GACzD,SAASA,KAAAL,EAAApC,IAAA,YAAAoC,EAAe,IAAIS,SAC1B,SAA+B,CAAA,MAAOA,EAAE,KACtC,SAAEA,EAAA,KAAA,EADQ,SAASA,EAAE,IAAI,EAE5B,GAEJ,CAAA,CAAA,EAEF,EAECtB,EAAM,YAAc,UAAYmB,EAAA,IAACzC,EAAY,CAAA,SAAeE,GAAAL,EAAkBK,EAAGsB,EAAGrB,EAAeC,CAAgB,EAAG,MAAOX,EAAG,eAAgB,kBAAkB,EAAG,UAAU,OAAO,KAAK,OAAO,MAAO6B,EAAM,YAAa,YAAa7B,EAAG,eAAgB,kBAAkB,EAAG,WAAAwC,EAAwB,EAEzSS,EAAA,KAAA,SAAA,CAAO,UAAU,iBAAiB,SAAUlB,EAAIJ,EAAa,OAAQ,KAAK,qBAAqB,MAAOI,EAAIJ,EAAa,OAAUA,EAAaI,CAAC,EAAE,KAAO,GAAOF,EAAM,oBAAsB,GAAK,SAAWqB,GAAOf,EAAmBe,EAAInB,EAAGrB,EAAeC,CAAgB,EAC1Q,SAAA,CAAAqC,MAAC,UAAO,MAAM,GAAI,SAAGhD,EAAA,eAAgB,kBAAkB,EAAE,EAEvD+B,EAAIJ,EAAa,OACfqB,EAAA,IAAC,UAAiC,MAAOrB,EAAaI,CAAC,EAAE,IACtD,SAAAJ,EAAaI,CAAC,EAAE,OADNJ,EAAaI,CAAC,EAAE,GAE7B,EAEAa,EAAgB,IAAI,CAAC,CAAE,IAAAQ,EAAK,MAAAC,CAC1B,IAAAL,EAAA,IAAC,SAAiB,CAAA,MAAOI,EACtB,SAAAC,CAAA,EADUD,CAEb,CACD,CAAA,EAGP,CAAA,EACF,EAEErB,GAAKJ,EAAa,QAEdsB,EAAA,KAAAK,EAAA,SAAA,CAAA,SAAA,CAAAN,EAAA,IAAC,SAAA,CACC,QAAS,IAAMlB,EAAYC,EAAGrB,EAAeC,CAAgB,EAC7D,UAAU,0BACV,KAAK,SACN,SAAA,GAAA,CAED,QACC,SAAO,CAAA,QAAS,IAAMuB,EAAYH,EAAGrB,EAAeC,CAAgB,EAAG,UAAU,qBAAqB,KAAK,SAAS,aAAW,MAC9H,eAAC,OAAK,CAAA,UAAU,sBAAuB,CAAA,EACzC,CAAA,EACF,CAAA,EAGN,CAAA,CAAA,CAGN,CClFA,SAAwB4C,GAAqB,CAAE,WAAAf,EAAY,YAAAhC,EAAa,cAAAE,EAAe,iBAAAC,EAAkB,UAAA6C,EAAW,aAAA5C,EAAc,YAAAC,EAAa,YAAA4C,EAAa,OAAAC,EAAQ,KAAAC,CAAA,EAAQ,CHJhK,IAAAlB,EAAAC,EAAAkB,EAAAC,EAAAC,EGKVC,EAAAA,UAAU,IAAM,CACV,CAAC,IAAK,GAAG,EAAE,SAASrD,EAAc,UAAU,GAC7BQ,EAAAR,EAAeC,EAAkBC,CAAyB,EAEzE,CAAC,IAAK,GAAG,EAAE,SAASF,EAAc,UAAU,GACtBY,EAAAZ,EAAeC,EAAkBC,CAAyB,EAEhF,CAAC,IAAK,GAAG,EAAE,SAASF,EAAc,UAAU,GAC5Be,EAAAf,EAAeC,EAAkBC,CAAyB,CAC9E,EACC,CAACF,EAAc,UAAU,CAAC,EAEvB,MAAAsD,EAAgB,CAACC,EAAKC,IAAW,CAC/B,MAAAnD,EAAUC,EAAA,GAAKN,GACrBK,EAAQmD,CAAM,EAAID,EAEdC,IAAW,YACM1C,EAAAT,EAASJ,EAAkBC,CAAyB,EAErEsD,IAAW,2BACa3C,EAAAR,EAASJ,EAAkBC,CAAyB,EAG/DD,EAAAK,EAAA,GAAKD,EAAS,CAAA,EAEjC,OAEIkC,EAAA,KAAAK,WAAA,CAAA,SAAA,CAAAN,EAAA,IAAC,KAAG,EAAA,QACH,IAAE,CAAA,UAAU,iBAAkB,SAAGhD,EAAA,WAAY,kBAAkB,EAAE,EAClEiD,EAAAA,KAAC,SAAO,CAAA,SAAUzC,EAAa,KAAK,aAAa,MAAOE,EAAc,WAAY,UAAU,qBAC1F,SAAA,CAAAsC,MAAC,UAAO,MAAM,GAAI,SAAGhD,EAAA,iBAAkB,kBAAkB,EAAE,EAEzDU,EAAc,YAAcA,EAAc,WAAW,IAAI,CAAC,CAAE,IAAA0C,EAAK,MAAAC,CAAM,UACpE,SAAiB,CAAA,MAAOD,EACtB,SAAAC,CAAA,EADUD,CAEb,CACD,CAAA,EAEL,QACC,KAAG,EAAA,QACH,KAAG,EAAA,EACH,CAAC,IAAK,GAAG,EAAE,SAAS1C,EAAc,UAAU,GAEzCuC,EAAA,KAAAK,WAAA,CAAA,SAAA,CAACL,EAAAA,KAAA,MAAA,CAAI,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAGhD,EAAA,qBAAsB,kBAAkB,EAAE,EAC5EgD,EAAA,IAACmB,EAAA,CACC,UAAU,MACV,aAAczD,GAAA,YAAAA,EAAe,SAC7B,UAAS+B,EAAA/B,GAAA,YAAAA,EAAe,UAAf,YAAA+B,EAAwB,eAAgB/B,EAAc,QAAQ,aAAa,IAAK0D,IAAU,CAAE,MAAOA,EAAK,WAAY,MAAOA,EAAK,UAAU,YAAa,EAChK,aAAY,GACZ,SAAWH,GAAQD,EAAcC,EAAK,UAAU,CAAA,CAClD,EACAjB,EAAAA,IAAC,SAAO,CAAA,QAAS,IAAM9B,EAAiBR,EAAeC,EAAkBC,CAAyB,EAAG,UAAU,kCAAkC,MAAO,CAAE,gBAAiB,IAAIZ,EAAG,uBAAwB,kBAAkB,CAAC,GAAI,EAAG,KAAK,SAAS,SAAUwD,EAAW,SAAQ,GAAA,CAAA,CAAA,EACjR,QAEC,KAAG,EAAA,EACJP,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAGhD,EAAA,gBAAiB,kBAAkB,EAAE,EACvEgD,EAAA,IAACmB,EAAA,CACC,UAAU,MACV,aAAczD,GAAA,YAAAA,EAAe,aAC7B,UAASgC,EAAAhC,GAAA,YAAAA,EAAe,UAAf,YAAAgC,EAAwB,WAAYhC,EAAc,QAAQ,SAAS,IAAK2D,IAAU,CAAE,MAAOA,EAAK,WAAY,MAAOA,EAAK,GAAG,YAAa,EACjJ,aAAY,GACZ,SAAWJ,GAAQD,EAAcC,EAAK,cAAc,CAAA,CACtD,EACAjB,EAAAA,IAAC,SAAO,CAAA,QAAS,IAAMxB,EAAmBd,EAAeC,EAAkBC,CAAyB,EAAG,UAAU,kCAAkC,MAAO,CAAE,gBAAiB,IAAIZ,EAAG,aAAc,kBAAkB,CAAC,GAAI,EAAG,KAAK,SAAS,SAAUwD,EAAW,SAAQ,GAAA,CAAA,CAAA,EACzQ,CAAA,EACF,EAGD,CAAC,IAAK,GAAG,EAAE,SAAS9C,EAAc,UAAU,GAEzCuC,EAAA,KAAAK,WAAA,CAAA,SAAA,CAACL,EAAAA,KAAA,MAAA,CAAI,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAGhD,EAAA,4BAA6B,kBAAkB,EAAE,EACnFgD,EAAA,IAACmB,EAAA,CACC,UAAU,MACV,aAAczD,GAAA,YAAAA,EAAe,wBAC7B,UAASkD,EAAAlD,GAAA,YAAAA,EAAe,UAAf,YAAAkD,EAAwB,sBAAuBlD,EAAc,QAAQ,oBAAoB,IAAK0D,IAAU,CAAE,MAAOA,EAAK,WAAY,MAAOA,EAAK,UAAU,YAAa,EAC9K,aAAY,GACZ,SAAWH,GAAQD,EAAcC,EAAK,yBAAyB,CAAA,CACjE,EACAjB,EAAAA,IAAC,SAAO,CAAA,QAAS,IAAM1B,EAAwBZ,EAAeC,EAAkBC,CAAyB,EAAG,UAAU,kCAAkC,MAAO,CAAE,gBAAiB,IAAIZ,EAAG,8BAA+B,kBAAkB,CAAC,GAAI,EAAG,KAAK,SAAS,SAAUwD,EAAW,SAAQ,GAAA,CAAA,CAAA,EAC/R,QAEC,KAAG,EAAA,EACJP,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAGhD,EAAA,uBAAwB,kBAAkB,EAAE,EAC9EgD,EAAA,IAACmB,EAAA,CACC,UAAU,MACV,aAAczD,GAAA,YAAAA,EAAe,oBAC7B,UAASmD,EAAAnD,GAAA,YAAAA,EAAe,UAAf,YAAAmD,EAAwB,kBAAmBnD,EAAc,QAAQ,gBAAgB,IAAK2D,IAAU,CAAE,MAAOA,EAAK,WAAY,MAAOA,EAAK,GAAG,YAAa,EAC/J,aAAY,GACZ,SAAWJ,GAAQD,EAAcC,EAAK,qBAAqB,CAAA,CAC7D,EACAjB,EAAAA,IAAC,SAAO,CAAA,QAAS,IAAMzB,EAA0Bb,EAAeC,EAAkBC,CAAyB,EAAG,UAAU,kCAAkC,MAAO,CAAE,gBAAiB,IAAIZ,EAAG,oBAAqB,kBAAkB,CAAC,GAAI,EAAG,KAAK,SAAS,SAAUwD,EAAW,SAAQ,GAAA,CAAA,CAAA,EACvR,CAAA,EACF,EAED,CAAC,IAAK,GAAG,EAAE,SAAS9C,EAAc,UAAU,GAC3CuC,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAAAD,MAAC,KAAE,UAAU,iBAAkB,SAAGhD,EAAA,gBAAiB,kBAAkB,EAAE,EACvEgD,EAAA,IAACmB,EAAA,CACC,UAAU,MACV,aAAczD,GAAA,YAAAA,EAAe,kBAC7B,UAASoD,EAAApD,GAAA,YAAAA,EAAe,UAAf,YAAAoD,EAAwB,gBAAiBpD,EAAc,QAAQ,cAAc,IAAK0D,IAAU,CAAE,MAAOA,EAAK,WAAY,MAAOA,EAAK,UAAU,YAAa,EAClK,aAAY,GACZ,SAAWH,GAAQD,EAAcC,EAAK,mBAAmB,CAAA,CAC3D,EACAjB,EAAAA,IAAC,SAAO,CAAA,QAAS,IAAMvB,EAAkBf,EAAeC,EAAkBC,CAAyB,EAAG,UAAU,kCAAkC,MAAO,CAAE,gBAAiB,IAAIZ,EAAG,mBAAoB,kBAAkB,CAAC,GAAI,EAAG,KAAK,SAAS,SAAUwD,EAAW,SAAQ,GAAA,CAAA,CAAA,EAC9Q,QAGD,KAAG,EAAA,QACH,KAAG,EAAA,EACHA,GACCR,EAAA,IAACnD,EAAA,CAAO,MAAO,CACb,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,OAAQ,IACR,UAAW,YACb,CAAA,CACA,EAGD,CAAC,IAAK,GAAG,EAAE,SAASa,EAAc,UAAU,GAGvCuC,EAAA,KAAAK,WAAA,CAAA,SAAA,CAACN,EAAA,IAAA,MAAA,CAAI,UAAU,OACb,SAACA,EAAAA,IAAA,IAAA,CAAE,UAAU,UAAW,SAAGhD,EAAA,aAAc,kBAAkB,CAAE,CAAA,EAC/D,EACAgD,EAAAA,IAAC,MAAI,CAAA,UAAU,cAAe,CAAA,EAC9BC,EAAAA,KAAC,MAAI,CAAA,UAAU,iDACb,SAAA,CAACD,EAAAA,IAAA,MAAA,CAAI,UAAU,SAAS,SAAAA,EAAA,IAAC,KAAG,SAAGhD,EAAA,cAAe,kBAAkB,CAAA,CAAE,CAAI,CAAA,EACtEgD,EAAAA,IAAC,MAAI,CAAA,UAAU,SAAS,SAAAA,EAAA,IAAC,KAAG,SAAGhD,EAAA,mBAAoB,kBAAkB,CAAA,CAAE,CAAI,CAAA,CAAA,EAC7E,EAECU,EAAc,UAAU,IAAI,CAAC4D,EAAKvC,IACjCiB,EAAA,IAACT,EAAA,CAEC,EAAAR,EACA,MAAOuC,EACP,cAAA5D,EACA,WAAA8B,EACA,iBAAA7B,CAAA,EALK,UAAUoB,EAAI,CAAC,EAAA,CAOvB,EACDiB,EAAAA,IAAC,OAAI,UAAU,yCAAyC,eAAC,SAAO,CAAA,QAAS,IAAMlB,EAAYpB,EAAc,UAAU,OAAQA,EAAeC,CAAgB,EAAG,UAAU,gBAAgB,KAAK,SAAS,aAAC,CAAS,CAAA,QAE9M,KAAG,EAAA,QACH,KAAG,EAAA,CAAA,EACN,QAEH,KAAG,EAAA,EACJqC,EAAA,IAAC7C,EAAA,CACC,KAAK,uDAAA,CACP,CACF,CAAA,CAAA,CAEJ"}