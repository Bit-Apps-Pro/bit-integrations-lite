{"version":3,"file":"bi.520.847.js","sources":["../frontend-dev/src/components/AllIntegrations/DirectIq/DirectIqCommonFunc.js"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { __ } from '@wordpress/i18n'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, directIqConf, setDirectIqConf) => {\n  const newConf = { ...directIqConf }\n  newConf.name = e.target.value\n  setDirectIqConf({ ...newConf })\n}\n\n// refreshMappedLists\nexport const refreshDirectIqList = (directIqConf, setDirectIqConf, setIsLoading, setSnackbar) => {\n  const refreshListsRequestParams = {\n    client_id: directIqConf.client_id,\n    client_secret: directIqConf.client_secret,\n  }\n  bitsFetch(refreshListsRequestParams, 'directIq_lists')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...directIqConf }\n        if (result.data.directIqLists) {\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          newConf.default.directIqLists = result.data.directIqLists\n          setSnackbar({\n            show: true,\n            msg: __('DirectIQ lists refreshed', 'bit-integrations'),\n          })\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              'No DirectIQ lists found. Try changing the header row number or try again',\n              'bit-integrations',\n            ),\n          })\n        }\n\n        setDirectIqConf({ ...newConf })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            'DirectIQ lists refresh failed. please try again',\n            'bit-integrations',\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\n// refreshMappedFields\nexport const refreshDirectIqHeader = (directIqConf, setDirectIqConf, setIsLoading, setSnackbar) => {\n\n  const refreshListsRequestParams = {\n    client_id: directIqConf.client_id,\n    client_secret: directIqConf.client_secret,\n    list_id: directIqConf.listId\n  }\n\n  bitsFetch(refreshListsRequestParams, 'directIq_headers')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...directIqConf }\n        if (result.data.directIqField) {\n          if (!newConf.default) {\n            newConf.default = {}\n          }\n          newConf.default.fields = result.data.directIqField\n          const { fields } = newConf.default\n          newConf.field_map = Object.values(fields)\n            .filter((f) => f.required)\n            .map((f) => ({\n              formField: '',\n              directIqField: f.fieldId,\n              required: true,\n            }))\n          setSnackbar({\n            show: true,\n            msg: __('DirectIQ fields refreshed', 'bit-integrations'),\n          })\n        } else {\n          setSnackbar({\n            show: true,\n            msg: __(\n              'No DirectIQ fields found. Try changing the header row number or try again',\n              'bit-integrations',\n            ),\n          })\n        }\n\n        setDirectIqConf({ ...newConf })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            'DirectIQ fields refresh failed. please try again',\n            'bit-integrations',\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const checkMappedFields = (directIqConf) => {\n  const mappedFields = directIqConf?.field_map\n    ? directIqConf.field_map.filter(\n      (mappedField) => !mappedField.formField\n          && mappedField.directIqField\n          && mappedField.required,\n    )\n    : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n"],"names":["bitsFetch","__","handleInput","directIqConf","setDirectIqConf","newConf","__spreadValues","refreshDirectIqList","setIsLoading","setSnackbar","refreshListsRequestParams","result","refreshDirectIqHeader","fields","f","checkMappedFields","mappedField"],"mappings":"yVAAA,OAAA,KAAAA,EAAA,KAAAC,MAAA,iBAIY,MAACC,EAAc,CAAC,EAAGC,EAAcC,IAAoB,CAC/D,MAAMC,EAAUC,EAAA,GAAKH,GACrBE,EAAQ,KAAO,EAAE,OAAO,MACxBD,EAAgBE,EAAA,GAAKD,EAAS,CAChC,EAGaE,EAAsB,CAACJ,EAAcC,EAAiBI,EAAcC,IAAgB,CAC/F,MAAMC,EAA4B,CAChC,UAAWP,EAAa,UACxB,cAAeA,EAAa,aAC7B,EACDH,EAAUU,EAA2B,gBAAgB,EAClD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACjBQ,EAAO,KAAK,eACTN,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAEtBA,EAAQ,QAAQ,cAAgBM,EAAO,KAAK,cAC5CF,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,2BAA4B,kBAAkB,CAClE,CAAW,GAEDQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,2EACA,kBACD,CACb,CAAW,EAGHG,EAAgBE,EAAA,GAAKD,EAAS,CACtC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,kDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAGaI,EAAwB,CAACT,EAAcC,EAAiBI,EAAcC,IAAgB,CAEjG,MAAMC,EAA4B,CAChC,UAAWP,EAAa,UACxB,cAAeA,EAAa,cAC5B,QAASA,EAAa,MACvB,EAEDH,EAAUU,EAA2B,kBAAkB,EACpD,KAAMC,GAAW,CAChB,GAAIA,GAAUA,EAAO,QAAS,CAC5B,MAAMN,EAAUC,EAAA,GAAKH,GACrB,GAAIQ,EAAO,KAAK,cAAe,CACxBN,EAAQ,UACXA,EAAQ,QAAU,CAAE,GAEtBA,EAAQ,QAAQ,OAASM,EAAO,KAAK,cACrC,KAAM,CAAE,OAAAE,GAAWR,EAAQ,QAC3BA,EAAQ,UAAY,OAAO,OAAOQ,CAAM,EACrC,OAAQC,GAAMA,EAAE,QAAQ,EACxB,IAAKA,IAAO,CACX,UAAW,GACX,cAAeA,EAAE,QACjB,SAAU,EACxB,EAAc,EACJL,EAAY,CACV,KAAM,GACN,IAAKR,EAAG,4BAA6B,kBAAkB,CACnE,CAAW,CACX,MACUQ,EAAY,CACV,KAAM,GACN,IAAKR,EACH,4EACA,kBACD,CACb,CAAW,EAGHG,EAAgBE,EAAA,GAAKD,EAAS,CACtC,MACQI,EAAY,CACV,KAAM,GACN,IAAKR,EACH,mDACA,kBACD,CACX,CAAS,EAEHO,EAAa,EAAK,CACxB,CAAK,EACA,MAAM,IAAMA,EAAa,EAAK,CAAC,CACpC,EAEaO,EAAqBZ,GAQ5B,GAPiBA,GAAA,MAAAA,EAAc,UAC/BA,EAAa,UAAU,OACtBa,GAAgB,CAACA,EAAY,WACvBA,EAAY,eACZA,EAAY,QACpB,EACC,CAAE,GACW,OAAS"}