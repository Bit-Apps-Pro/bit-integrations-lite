{"version":3,"file":"bi.431.841.js","sources":["../frontend-dev/src/components/AllIntegrations/AgiledCRM/AgiledCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, agiledConf, setAgiledConf) => {\n  const newConf = { ...agiledConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setAgiledConf({ ...newConf })\n}\n\nexport const generateMappedField = (agiledConf) => {\n  let allRequiredFields = []\n  if (agiledConf.actionName === 'account') {\n    allRequiredFields = agiledConf?.accountFields\n  } else if (agiledConf.actionName === 'contact') {\n    allRequiredFields = agiledConf?.contactFields\n  } else {\n    allRequiredFields = agiledConf?.dealFields\n  }\n  const requiredFlds = allRequiredFields?.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', agiledFormField: field.key })) : [{ formField: '', agiledFormField: '' }]\n}\n\nexport const checkMappedFields = (agiledConf) => {\n  const mappedFields = agiledConf?.field_map ? agiledConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.agiledFormField || (mappedField.formField === 'custom' && !mappedField.customValue) || (mappedField.agiledFormField === 'customFieldKey' && !mappedField.customFieldKey))) : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const agiledAuthentication = (confTmp, setConf, setError, setIsAuthorized, loading, setLoading) => {\n  if (!confTmp.brand || !confTmp.auth_token) {\n    setError({\n      brand: !confTmp.brand ? __('Brand Name (Account URL) can\\'t be empty', 'bit-integrations') : '',\n      auth_token: !confTmp.auth_token ? __('Api Key can\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n\n  setError({})\n  setLoading({ ...loading, auth: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_authentication')\n    .then(result => {\n      if (result && result.success) {\n        setIsAuthorized(true)\n        setLoading({ ...loading, auth: false })\n        toast.success(__('Authorized successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...loading, auth: false })\n      toast.error(__('Authorized failed, Please enter valid brand name & API key', 'bit-integrations'))\n    })\n}\n\nexport const getAllOwners = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, owners: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_owners')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.owners = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, owners: false })\n\n        toast.success(__('Owners fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, owners: false })\n      toast.error(__('Owners fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllAccounts = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, accounts: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_accounts')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.accounts = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, accounts: false })\n\n        toast.success(__('Accounts fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, accounts: false })\n      toast.error(__('Accounts fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllSources = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, sources: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_sources')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.sources = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, sources: false })\n\n        toast.success(__('Sources fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, sources: false })\n      toast.error(__('Sources fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllStatuses = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, statuses: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_statuses')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.statuses = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, statuses: false })\n\n        toast.success(__('statuses fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, statuses: false })\n      toast.error(__('statuses fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllLifeCycleStage = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, lifeCycleStages: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_lifeCycleStages')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.lifeCycleStages = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, lifeCycleStages: false })\n\n        toast.success(__('Life cycle stages fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, lifeCycleStages: false })\n      toast.error(__('Life cycle stages fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllCRMPipelines = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPipelines: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_CRMPipelines')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.CRMPipelines = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, CRMPipelines: false })\n\n        toast.success(__('Pipelines fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, CRMPipelines: false })\n      toast.error(__('Pipelines fetching failed', 'bit-integrations'))\n    })\n}\n\nexport const getAllCRMPipelineStages = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPipelineStages: true })\n\n  const requestParams = { auth_token: confTmp.auth_token, brand: confTmp.brand, selectedCRMPipeline: confTmp.selectedCRMPipeline }\n\n  bitsFetch(requestParams, 'agiled_fetch_all_CRMPipelineStages')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.CRMPipelineStages = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, CRMPipelineStages: false })\n\n        toast.success(__('Pipeline stages fetched successfully', 'bit-integrations'))\n        return\n      }\n      setLoading({ ...setLoading, CRMPipelineStages: false })\n      toast.error(__('Pipeline stages fetching failed', 'bit-integrations'))\n    })\n}\n"],"names":["__","bitsFetch","_t","handleInput","e","agiledConf","setAgiledConf","newConf","__spreadValues","name","generateMappedField","allRequiredFields","requiredFlds","fld","field","checkMappedFields","mappedField","agiledAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getAllOwners","getAllAccounts","getAllSources","getAllStatuses","getAllLifeCycleStage","getAllCRMPipelines","getAllCRMPipelineStages"],"mappings":"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"}