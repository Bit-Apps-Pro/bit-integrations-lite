{"version":3,"file":"bi.566.760.js","sources":["../frontend-dev/src/components/AllIntegrations/Trello/TrelloCommonFunc.js"],"sourcesContent":["import bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (e, trelloConf, setTrelloConf) => {\n  const newConf = { ...trelloConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setTrelloConf({ ...newConf })\n}\n\nexport const fetchAllBoard = (formID, trelloConf, setTrelloConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const fetchBoardModulesRequestParams = {\n    formID,\n    clientId: trelloConf.clientId,\n    accessToken: trelloConf.accessToken,\n  }\n  bitsFetch(fetchBoardModulesRequestParams, 'trello_fetch_all_board')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...trelloConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data.allBoardlist) {\n          newConf.default.allBoardlist = result.data.allBoardlist\n        }\n        // if (result.data.tokenDetails) {\n        //   newConf.tokenDetails = result.data.tokenDetails\n        // }\n        setSnackbar({ show: true, msg: __('Board list refreshed', 'bit-integrations') })\n        setTrelloConf({ ...newConf })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: sprintf(__('Board list refresh failed Cause: %s. please try again', 'bit-integrations'), result.data.data || result.data) })\n      } else {\n        setSnackbar({ show: true, msg: __('Board list failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const fetchAllList = (trelloConf, setTrelloConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const fetchListModulesRequestParams = {\n    clientId: trelloConf.clientId,\n    boardId: trelloConf.boardId,\n    accessToken: trelloConf.accessToken,\n  }\n\n  bitsFetch(fetchListModulesRequestParams, 'trello_fetch_all_list_Individual_board')\n\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...trelloConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data?.alllists) {\n          newConf.default.alllists = result.data.alllists\n        }\n        setSnackbar({ show: true, msg: __('Board list refreshed', 'bit-integrations') })\n        setTrelloConf({ ...newConf })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: sprintf(__('Board list refresh failed Cause: %s. please try again', 'bit-integrations'), result.data.data || result.data) })\n      } else {\n        setSnackbar({ show: true, msg: __('Board list failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const setGrantTokenResponse = (integ) => {\n  const grantTokenResponse = {}\n  const authWindowLocation = window.location.href\n  const queryParams = authWindowLocation.replace(`${window.opener.location.href}`, '').split('&')\n  if (queryParams) {\n    queryParams.forEach(element => {\n      const gtKeyValue = element.split('=')\n      if (gtKeyValue[1]) {\n        // eslint-disable-next-line prefer-destructuring\n        grantTokenResponse[gtKeyValue[0]] = gtKeyValue[1]\n      }\n    })\n  }\n  localStorage.setItem(`__${integ}`, JSON.stringify(grantTokenResponse))\n  window.close()\n}\n\nexport const handleTrelloAuthorize = (integ, ajaxInteg, confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.clientId) {\n    setError({ clientId: !confTmp.clientId ? __('Client ID cann\\'t be empty', 'bit-integrations') : '' })\n    return\n  }\n  setIsLoading(true)\n\n  const apiEndpoint = `https://trello.com/1/authorize?expiration=never&name=MyPersonalToken&scope=read,write&response_type=token&key=${confTmp.clientId}&return_url=${encodeURIComponent(window.location.href)}/&response_type=token`\n\n  const authWindow = window.open(apiEndpoint, integ, 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isauthRedirectLocation = false\n      const bitsTrello = localStorage.getItem(`__${integ}`)\n\n      if (bitsTrello) {\n        isauthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsTrello)\n        localStorage.removeItem(`__${integ}`)\n\n        if (grantTokenResponse.token) {\n          grantTokenResponse.code = grantTokenResponse.token\n        }\n      }\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isauthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        setSnackbar({ show: true, msg: `${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}` })\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accessToken = grantTokenResponse.code\n        setConf(newConf)\n        setisAuthorized(true)\n        setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n      }\n    }\n    setIsLoading(false)\n  }, 500)\n}\nexport const generateMappedField = (trelloConf) => {\n  const requiredFlds = trelloConf?.cardFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', trelloFormField: field.key })) : [{ formField: '', trelloFormField: '' }]\n}\n\nexport const checkMappedFields = (trelloConf) => {\n  const mappedFleld = trelloConf.field_map ? trelloConf.field_map.filter(mapped => (!mapped.formField && !mapped.trelloFormField)) : []\n  if (mappedFleld.length > 0) {\n    return false\n  }\n  return true\n}\n"],"names":["handleInput","trelloConf","setTrelloConf","newConf","__spreadValues","name","fetchAllBoard","formID","setIsLoading","setSnackbar","fetchBoardModulesRequestParams","bitsFetch","result","__","sprintf","fetchAllList","fetchListModulesRequestParams","_a","setGrantTokenResponse","integ","grantTokenResponse","queryParams","element","gtKeyValue","handleTrelloAuthorize","ajaxInteg","confTmp","setConf","setError","setisAuthorized","apiEndpoint","authWindow","popupURLCheckTimer","isauthRedirectLocation","bitsTrello","errorCause","generateMappedField","requiredFlds","fld","field","checkMappedFields","mapped"],"mappings":"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"}