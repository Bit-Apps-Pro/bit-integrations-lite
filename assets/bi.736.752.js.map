{"version":3,"file":"bi.736.752.js","sources":["../frontend-dev/src/components/AllIntegrations/ElasticEmail/ElasticEmailCommonFunc.jsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport toast from 'react-hot-toast'\nimport { __ } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, elasticEmailConf, setElasticEmailConf, setIsLoading) => {\n  const newConf = { ...elasticEmailConf }\n  const { name } = e.target\n  if (e.target.value !== '') {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setElasticEmailConf({ ...newConf })\n}\nexport const checkMappedFields = (elasticEmailConf) => {\n  const mappedFields = elasticEmailConf?.field_map ? elasticEmailConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.elasticEmailField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\nexport const generateMappedField = (elasticEmailConf) => {\n  const requiredFlds = elasticEmailConf?.elasticEmailFields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', elasticEmailField: field.key })) : [{ formField: '', elasticEmailField: '' }]\n}\nexport const getAllList = (elasticEmailConf, setElasticEmailConf, setIsLoading) => {\n  setIsLoading(true)\n  const queryParams = { apiKey: elasticEmailConf.api_key }\n  const loadPostTypes = bitsFetch(null, 'get_all_lists', queryParams, 'GET')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...elasticEmailConf }\n        if (!newConf.default) newConf.default = {}\n        if (result.data.lists) {\n          newConf.default.lists = result.data.lists\n        }\n        setElasticEmailConf({ ...newConf })\n        setIsLoading(false)\n        return 'List refreshed successfully'\n      }\n      setIsLoading(false)\n      return 'List refresh failed. please try again'\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Lists...'),\n  })\n}\n"],"names":["handleInput","e","elasticEmailConf","setElasticEmailConf","setIsLoading","newConf","__spreadValues","name","checkMappedFields","mappedField","generateMappedField","requiredFlds","fld","field","getAllList","queryParams","loadPostTypes","bitsFetch","result","toast","data","__"],"mappings":"0YAKO,MAAMA,EAAc,CAACC,EAAGC,EAAkBC,EAAqBC,IAAiB,CAC/E,MAAAC,EAAUC,EAAA,GAAKJ,GACf,CAAE,KAAAK,CAAK,EAAIN,EAAE,OACfA,EAAE,OAAO,QAAU,GACbI,EAAAE,CAAI,EAAIN,EAAE,OAAO,MAEzB,OAAOI,EAAQE,CAAI,EAEDJ,EAAAG,EAAA,GAAKD,EAAS,CACpC,EACaG,EAAqBN,GAG5B,GAFiBA,GAAA,MAAAA,EAAkB,UAAYA,EAAiB,UAAU,OAAOO,GAAgB,CAACA,EAAY,WAAa,CAACA,EAAY,mBAAsB,CAACA,EAAY,YAAc,UAAY,CAACA,EAAY,WAAa,EAAI,IAEtN,OAAS,GAKfC,EAAuBR,GAAqB,CACvD,MAAMS,EAAeT,GAAA,YAAAA,EAAkB,mBAAmB,OAAcU,GAAAA,EAAI,WAAa,IAClF,OAAAD,EAAa,OAAS,EAAIA,EAAa,IAAcE,IAAA,CAAE,UAAW,GAAI,kBAAmBA,EAAM,KAAM,EAAI,CAAC,CAAE,UAAW,GAAI,kBAAmB,GAAI,CAC3J,EACaC,EAAa,CAACZ,EAAkBC,EAAqBC,IAAiB,CACjFA,EAAa,EAAI,EACjB,MAAMW,EAAc,CAAE,OAAQb,EAAiB,OAAQ,EACjDc,EAAgBC,EAAU,KAAM,gBAAiBF,EAAa,KAAK,EACtE,KAAeG,GAAA,CACV,GAAAA,GAAUA,EAAO,QAAS,CACtB,MAAAb,EAAUC,EAAA,GAAKJ,GACrB,OAAKG,EAAQ,UAASA,EAAQ,QAAU,IACpCa,EAAO,KAAK,QACNb,EAAA,QAAQ,MAAQa,EAAO,KAAK,OAElBf,EAAAG,EAAA,GAAKD,EAAS,EAClCD,EAAa,EAAK,EACX,6BACT,CACA,OAAAA,EAAa,EAAK,EACX,uCAAA,CACR,EACHe,EAAM,QAAQH,EAAe,CAC3B,QAAiBI,GAAAA,EACjB,MAAOC,EAAG,iBAAkB,kBAAkB,EAC9C,QAASA,EAAG,kBAAkB,CAAA,CAC/B,CACH"}