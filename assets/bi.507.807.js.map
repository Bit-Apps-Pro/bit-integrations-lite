{"version":3,"file":"bi.507.807.js","sources":["../frontend-dev/src/components/AllIntegrations/ConstantContact/ConstantContactCommonFunc.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport bitsFetch from '../../../Utils/bitsFetch'\nimport { deepCopy } from '../../../Utils/Helpers'\nimport { sprintf, __ } from '../../../Utils/i18nwrap'\n\nexport const handleInput = (\n  e,\n  constantContactConf,\n  setConstantContactConf,\n  id,\n  setIsLoading,\n  setSnackbar,\n  isNew,\n  error,\n  setError,\n) => {\n  let newConf = { ...constantContactConf }\n  if (isNew) {\n    const rmError = { ...error }\n    rmError[e.target.name] = ''\n    setError({ ...rmError })\n  }\n  newConf[e.target.name] = e.target.value\n  switch (e.target.name) {\n    case 'source_type':\n      newConf = listChange(newConf, setConstantContactConf)\n      break\n    default:\n      break\n  }\n  setConstantContactConf({ ...newConf })\n}\n\nexport const checkAddressFieldMapRequired = (constantContactConf) => {\n  const requiredFleld = constantContactConf?.address_field\n    ? constantContactConf.address_field.filter(\n      (field) => !field.formField\n        && field.constantContactAddressField\n        && field.required,\n    )\n    : []\n  if (requiredFleld.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const listChange = (constantContactConf, setConstantContactConf) => {\n  const newConf = deepCopy(constantContactConf)\n  newConf.field_map = [{ formField: '', constantContactFormField: '' }]\n  getAllCustomFields(constantContactConf, setConstantContactConf)\n  return newConf\n}\n\nexport const refreshList = (\n  id,\n  constantContactConf,\n  setConstantContactConf,\n  setIsLoading,\n  setSnackbar,\n) => {\n  setIsLoading(true)\n  const refreshModulesRequestParams = {\n    id,\n    clientId: constantContactConf.clientId,\n    clientSecret: constantContactConf.clientSecret,\n    tokenDetails: constantContactConf.tokenDetails,\n  }\n  bitsFetch(refreshModulesRequestParams, 'cContact_refresh_list')\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...constantContactConf }\n        if (!newConf.default) {\n          newConf.default = {}\n        }\n        if (result.data.contactList) {\n          newConf.default.contactList = result.data.contactList\n        }\n        if (result.data.tokenDetails) {\n          newConf.tokenDetails = result.data.tokenDetails\n        }\n        setSnackbar({\n          show: true,\n          msg: __('Contact list refreshed', 'bit-integrations'),\n        })\n        setConstantContactConf({ ...newConf })\n      } else if (\n        (result && result.data && result.data.data)\n        || (!result.success && typeof result.data === 'string')\n      ) {\n        setSnackbar({\n          show: true,\n          msg: sprintf(\n            __(\n              'Contact list refresh failed Cause: %s. please try again',\n              'bit-integrations',\n            ),\n            result.data.data || result.data,\n          ),\n        })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __('Contact list failed. please try again', 'bit-integrations'),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const getAllContactLists = (\n  id,\n  confTmp,\n  setConf,\n  isLoading,\n  setIsLoading,\n) => {\n  setIsLoading({ ...isLoading, list: true })\n\n  const requestParams = {\n    integId: id,\n    clientId: confTmp.clientId,\n    clientSecret: confTmp.clientSecret,\n    tokenDetails: confTmp.tokenDetails,\n  }\n\n  bitsFetch(requestParams, 'cContact_refresh_list').then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp }\n      if (result.data) {\n        newConf.lists = result.data.contactList\n      }\n      setConf(newConf)\n      setIsLoading({ ...isLoading, list: false })\n\n      toast.success(__('List fetch successfully', 'bit-integrations'))\n      return\n    }\n    setIsLoading({ ...isLoading, list: false })\n    toast.error(__('List fetch failed', 'bit-integrations'))\n  })\n}\nexport const getAllCustomFields = (confTmp, setConf) => {\n  const requestParams = {\n    clientId: confTmp.clientId,\n    clientSecret: confTmp.clientSecret,\n    tokenDetails: confTmp.tokenDetails,\n  }\n\n  bitsFetch(requestParams, 'cContact_custom_fields').then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp }\n      if (result.data) {\n        const mergedFields = newConf.default.constantContactFields.concat(\n          result.data.customFields,\n        )\n        newConf.default.constantContactFields = mergedFields\n      }\n      setConf(newConf)\n    }\n  })\n}\n\nexport const getContactTags = (id, confTmp, setConf, isLoading, setIsLoading) => {\n  setIsLoading({ ...isLoading, tag: true })\n\n  const requestParams = {\n    integId: id,\n    clientId: confTmp.clientId,\n    clientSecret: confTmp.clientSecret,\n    tokenDetails: confTmp.tokenDetails,\n  }\n\n  bitsFetch(requestParams, 'cContact_refresh_tags').then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp }\n      if (result.data) {\n        newConf.tags = result.data.contactTag\n      }\n      setConf(newConf)\n      setIsLoading({ ...isLoading, tag: false })\n\n      toast.success(__('Tags fetch successfully', 'bit-integrations'))\n      return\n    }\n    setIsLoading({ ...isLoading, tag: false })\n    toast.error(__('Tags fetch failed', 'bit-integrations'))\n  })\n}\n\nexport const setGrantTokenResponse = (integ) => {\n  const grantTokenResponse = {}\n  const authWindowLocation = window.location.href\n  const queryParams = authWindowLocation\n    .replace(`${window.opener.location.href}`, '')\n    .split('&')\n  if (queryParams) {\n    queryParams.forEach((element) => {\n      const gtKeyValue = element.split('=')\n      if (gtKeyValue[1]) {\n        // eslint-disable-next-line prefer-destructuring\n        grantTokenResponse[gtKeyValue[0]] = gtKeyValue[1]\n      }\n    })\n  }\n  localStorage.setItem(`__${integ}`, JSON.stringify(grantTokenResponse))\n  window.close()\n}\n\nexport const handleConstantContactAuthorize = (\n  integ,\n  ajaxInteg,\n  scopes,\n  confTmp,\n  setConf,\n  setError,\n  setisAuthorized,\n  setIsLoading,\n  setSnackbar,\n  btcbi,\n) => {\n  if (!confTmp.clientId) {\n    setError({\n      clientId: !confTmp.clientId\n        ? __(\"Client ID cann't be empty\", 'bit-integrations')\n        : '',\n      clientSecret: !confTmp.clientSecret\n        ? __(\"Secret key cann't be empty\", 'bit-integrations')\n        : '',\n    })\n    return\n  }\n  setIsLoading(true)\n\n  const apiEndpoint = `https://authz.constantcontact.com/oauth2/default/v1/authorize?scope=${scopes}&response_type=code&client_id=${confTmp.clientId\n    }&state=${encodeURIComponent(\n      window.location.href,\n    )}/redirect&redirect_uri=${encodeURIComponent(`${btcbi.api.base}`)}/redirect`\n\n  const authWindow = window.open(\n    apiEndpoint,\n    integ,\n    'width=400,height=609,toolbar=off',\n  )\n\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isauthRedirectLocation = false\n      const bitsConstantContact = localStorage.getItem(`__${integ}`)\n      if (bitsConstantContact) {\n        isauthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitsConstantContact)\n        localStorage.removeItem(`__${integ}`)\n        if (grantTokenResponse.code.search('#')) {\n          const [code] = grantTokenResponse.code.split('#')\n          grantTokenResponse.code = code\n        }\n      }\n      if (\n        !grantTokenResponse.code\n        || grantTokenResponse.error\n        || !grantTokenResponse\n        || !isauthRedirectLocation\n      ) {\n        const errorCause = grantTokenResponse.error\n          ? `Cause: ${grantTokenResponse.error}`\n          : ''\n        setSnackbar({\n          show: true,\n          msg: `${__(\n            'Authorization failed',\n            'bit-integrations',\n          )} ${errorCause}. ${__('please try again', 'bit-integrations')}`,\n        })\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(\n          ajaxInteg,\n          grantTokenResponse,\n          newConf,\n          setConf,\n          setisAuthorized,\n          setIsLoading,\n          setSnackbar,\n          btcbi,\n        )\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (\n  ajaxInteg,\n  grantToken,\n  confTmp,\n  setConf,\n  setisAuthorized,\n  setIsLoading,\n  setSnackbar,\n  btcbi,\n) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  tokenRequestParams.redirectURI = `${btcbi.api.base}/redirect`\n\n  bitsFetch(tokenRequestParams, `${ajaxInteg}_generate_token`)\n    .then((result) => result)\n    .then((result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setisAuthorized(true)\n        setSnackbar({\n          show: true,\n          msg: __('Authorized Successfully', 'bit-integrations'),\n        })\n      } else if (\n        (result && result.data && result.data.data)\n        || (!result.success && typeof result.data === 'string')\n      ) {\n        setSnackbar({\n          show: true,\n          msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data\n            }. ${__('please try again', 'bit-integrations')}`,\n        })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __('Authorization failed. please try again', 'bit-integrations'),\n        })\n      }\n      setIsLoading(false)\n    })\n}\n\nexport const checkMappedFields = (sheetconf) => {\n  const mappedFleld = sheetconf.field_map\n    ? sheetconf.field_map.filter(\n      (mapped) => !mapped.formField && !mapped.constantContactFormField,\n    )\n    : []\n  if (mappedFleld.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const generateMappedField = (constantContactConf) => {\n  const requiredFlds = constantContactConf?.default?.constantContactFields.filter(\n    (fld) => fld.required === true,\n  )\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n      formField: '',\n      constantContactFormField: field.key,\n    }))\n    : [{ formField: '', constantContactFormField: '' }]\n}\n"],"names":["__","bitsFetch","deepCopy","_t","handleInput","constantContactConf","setConstantContactConf","id","setIsLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","rmError","listChange","checkAddressFieldMapRequired","field","getAllCustomFields","getAllContactLists","confTmp","setConf","isLoading","__spreadProps","requestParams","result","toast","mergedFields","getContactTags","setGrantTokenResponse","integ","grantTokenResponse","queryParams","element","gtKeyValue","handleConstantContactAuthorize","ajaxInteg","scopes","setisAuthorized","btcbi","apiEndpoint","authWindow","popupURLCheckTimer","isauthRedirectLocation","bitsConstantContact","code","errorCause","tokenHelper","grantToken","tokenRequestParams","checkMappedFields","sheetconf","mapped","generateMappedField","_a","requiredFlds","fld"],"mappings":"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"}