{"version":3,"file":"bi.701.875.js","sources":["../frontend-dev/src/components/AllIntegrations/CopperCRM/CopperCRMCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\nimport { __ } from \"../../../Utils/i18nwrap\";\n\nexport const handleInput = (e, coppercrmConf, setCopperCRMConf) => {\n  const newConf = { ...coppercrmConf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setCopperCRMConf({ ...newConf });\n};\n\nexport const generateMappedField = (coppercrmConf) => {\n  let allRequiredFields = [];\n  if (coppercrmConf.actionName === \"company\") {\n    allRequiredFields = coppercrmConf?.companyFields;\n  } else if (coppercrmConf.actionName === \"person\") {\n    allRequiredFields = coppercrmConf?.personFields;\n  } else if (coppercrmConf.actionName === \"opportunity\") {\n    allRequiredFields = coppercrmConf?.opportunityFields;\n  } else if (coppercrmConf.actionName === \"task\") {\n    allRequiredFields = coppercrmConf?.taskFields;\n  }\n  const requiredFlds = allRequiredFields?.filter(\n    (fld) => fld.required === true\n  );\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n        formField: \"\",\n        coppercrmFormField: field.key,\n      }))\n    : [{ formField: \"\", coppercrmFormField: \"\" }];\n};\n\nexport const checkMappedFields = (coppercrmConf) => {\n  const mappedFields = coppercrmConf?.field_map\n    ? coppercrmConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.coppercrmFormField ||\n          (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n          (mappedField.coppercrmFormField === \"customFieldKey\" &&\n            !mappedField.customFieldKey)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const coppercrmAuthentication = (\n  confTmp,\n  setConf,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.api_email || !confTmp.api_key) {\n    setError({\n      api_email: !confTmp.api_email\n        ? __(\"API Email can't be empty\", \"bit-integrations\")\n        : \"\",\n      api_key: !confTmp.api_key\n        ? __(\"Api Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n\n  setError({});\n  setLoading({ ...loading, auth: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true);\n      setLoading({ ...loading, auth: false });\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, auth: false });\n    toast.error(\n      __(\n        \"Authorized failed, Please enter valid api_email name & API key\",\n        \"bit-integrations\"\n      )\n    );\n  });\n};\n\nexport const getCustomFields = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, customFields: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n    action: confTmp.actionName,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_custom_fields\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.customFields = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, customFields: false });\n      if (!result.data) {\n        toast.error(__(\"No custom fields found\", \"bit-integrations\"));\n      } else {\n        toast.success(\n          __(\"Custom fields also fetched successfully\", \"bit-integrations\")\n        );\n      }\n      return;\n    }\n    setLoading({ ...setLoading, customFields: false });\n    toast.error(__(\"Custom fields fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllOpportunities = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, opportunities: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_opportunities\").then(\n    (result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp };\n        if (result.data) {\n          newConf.opportunities = result.data;\n        }\n        setConf(newConf);\n        setLoading({ ...setLoading, opportunities: false });\n\n        toast.success(\n          __(\"Opportunities fetched successfully\", \"bit-integrations\")\n        );\n        return;\n      }\n      setLoading({ ...setLoading, opportunities: false });\n      toast.error(__(\"Opportunities fetching failed\", \"bit-integrations\"));\n    }\n  );\n};\n\nexport const getAllOwners = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, owners: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_owners\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.owners = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, owners: false });\n\n      toast.success(__(\"Owners fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, owners: false });\n    toast.error(__(\"Owners fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllCompanies = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, companies: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_companies\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.companies = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, companies: false });\n\n      toast.success(__(\"Companies fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, companies: false });\n    toast.error(__(\"Companies fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllPipelineStages = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, pipelineStages: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n    action_name: confTmp.actionName,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_pipelineStages\").then(\n    (result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp };\n        if (result.data) {\n          newConf.pipelineStages = result.data;\n        }\n        setConf(newConf);\n        setLoading({ ...setLoading, pipelineStages: false });\n\n        toast.success(\n          __(\"PipelineStages fetched successfully\", \"bit-integrations\")\n        );\n        return;\n      }\n      setLoading({ ...setLoading, pipelineStages: false });\n      toast.error(__(\"PipelineStages fetching failed\", \"bit-integrations\"));\n    }\n  );\n};\n\nexport const getAllCRMPeoples = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPeoples: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n    action_name: confTmp.actionName,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_CRMPeoples\").then((result) => {\n    if (result && result.success) {\n      const newConf = { ...confTmp };\n      if (result.data) {\n        newConf.CRMPeoples = result.data;\n      }\n      setConf(newConf);\n      setLoading({ ...setLoading, CRMPeoples: false });\n\n      toast.success(__(\"Peoples fetched successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, CRMPeoples: false });\n    toast.error(__(\"Peoples fetching failed\", \"bit-integrations\"));\n  });\n};\n\nexport const getAllCRMPipelines = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMPipelines: true });\n\n  const requestParams = {\n    api_key: confTmp.api_key,\n    api_email: confTmp.api_email,\n  };\n\n  bitsFetch(requestParams, \"coppercrm_fetch_all_CRMPipelines\").then(\n    (result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp };\n        if (result.data) {\n          newConf.CRMPipelines = result.data;\n        }\n        setConf(newConf);\n        setLoading({ ...setLoading, CRMPipelines: false });\n\n        toast.success(__(\"Pipelines fetched successfully\", \"bit-integrations\"));\n        return;\n      }\n      setLoading({ ...setLoading, CRMPipelines: false });\n      toast.error(__(\"Pipelines fetching failed\", \"bit-integrations\"));\n    }\n  );\n};\n"],"names":["__","bitsFetch","_t","handleInput","e","coppercrmConf","setCopperCRMConf","newConf","__spreadValues","name","generateMappedField","allRequiredFields","requiredFlds","fld","field","checkMappedFields","mappedField","coppercrmAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getCustomFields","getAllOpportunities","getAllOwners","getAllCompanies","getAllPipelineStages","getAllCRMPeoples","getAllCRMPipelines"],"mappings":"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"}