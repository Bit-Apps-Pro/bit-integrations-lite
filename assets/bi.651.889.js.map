{"version":3,"file":"bi.651.889.js","sources":["../frontend-dev/src/components/AllIntegrations/SuiteDash/SuiteDashCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\"\nimport bitsFetch from \"../../../Utils/bitsFetch\"\nimport { __ } from \"../../../Utils/i18nwrap\"\n\nexport const handleInput = (e, salesmateConf, setSalesmateConf) => {\n  const newConf = { ...salesmateConf }\n  const { name } = e.target\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setSalesmateConf({ ...newConf })\n}\n\nexport const refreshSuiteDashFields = (\n  suiteDashConf,\n  setSuiteDashConf,\n  setIsLoading,\n  setSnackbar,\n) => {\n  setIsLoading(true)\n  const requestParams = {\n    public_id: suiteDashConf.public_id,\n    secret_key: suiteDashConf.secret_key,\n    action_name: suiteDashConf.actionName,\n  }\n\n  bitsFetch(requestParams, \"suite_dash_fetch_all_fields\")\n    .then((result) => {\n      if (result && result.success) {\n        setSuiteDashConf(prevSuiteDashConf => {\n          const draftConf = { ...prevSuiteDashConf }\n          draftConf.field_map = [\n            { formField: '', suiteDashFormField: '' },\n          ]\n\n          if (result.data) {\n            draftConf.suiteDashFields = result.data\n            draftConf.field_map = generateMappedField(draftConf)\n          }\n          return draftConf\n        })\n        setSnackbar({\n          show: true,\n          msg: __(\"SuiteDash fields refreshed\", \"bit-integrations\"),\n        })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"SuiteDash fields refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (suiteDashConf) => {\n  const requiredFlds = suiteDashConf?.suiteDashFields && suiteDashConf?.suiteDashFields.filter(\n    (fld) => fld.required === true && fld.key !== 'owner' && fld.key !== 'pipeline'\n  )\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n      formField: \"\",\n      suiteDashFormField: field.key,\n    }))\n    : [{ formField: \"\", suiteDashFormField: \"\" }]\n}\n\nexport const checkMappedFields = (suiteDashConf) => {\n  const mappedFields = suiteDashConf?.field_map\n    ? suiteDashConf.field_map.filter(\n      (mappedField) =>\n        !mappedField.formField ||\n        !mappedField.suiteDashFormField ||\n        (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n        (mappedField.suiteDashFormField === \"customFieldKey\" &&\n          !mappedField.customFieldKey)\n    )\n    : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const suiteDashAuthentication = (\n  confTmp,\n  setConf,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.public_id || !confTmp.secret_key) {\n    setError({\n      public_id: !confTmp.public_id\n        ? __(\"Public Id can't be empty\", \"bit-integrations\")\n        : \"\",\n      secret_key: !confTmp.secret_key\n        ? __(\"Secret Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    })\n    return\n  }\n\n  setError({})\n  setLoading({ ...loading, auth: true })\n\n  const requestParams = {\n    public_id: confTmp.public_id,\n    secret_key: confTmp.secret_key\n  }\n\n  bitsFetch(requestParams, \"suite_dash_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true)\n      setLoading({ ...loading, auth: false })\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"))\n      return\n    }\n    setLoading({ ...loading, auth: false })\n    toast.error(\n      __(\"Authorized failed, Please enter valid Public Id & Secret Key\", \"bit-integrations\")\n    )\n  })\n}\n\nexport const getAllCompanies = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, companies: true })\n\n  const requestParams = {\n    public_id: confTmp.public_id,\n    secret_key: confTmp.secret_key\n  }\n\n  bitsFetch(requestParams, \"suite_dash_fetch_all_companies\").then(\n    (result) => {\n      if (result && result.success) {\n        if (result.data) {\n          setConf(prevConf => {\n            prevConf.companies = result.data\n            return prevConf\n          })\n\n          setLoading({ ...setLoading, companies: false })\n          toast.success(\n            __(\"Companies fetched successfully\", \"bit-integrations\")\n          )\n          return\n        }\n        setLoading({ ...setLoading, companies: false })\n        toast.error(\n          __(\"Companies Not Found!\", \"bit-integrations\")\n        )\n        return\n      }\n      setLoading({ ...setLoading, companies: false })\n      toast.error(\n        __(\"Companies fetching failed\", \"bit-integrations\")\n      )\n    }\n  )\n}\n"],"names":["__","bitsFetch","handleInput","e","salesmateConf","setSalesmateConf","newConf","__spreadValues","name","refreshSuiteDashFields","suiteDashConf","setSuiteDashConf","setIsLoading","setSnackbar","requestParams","result","prevSuiteDashConf","draftConf","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","suiteDashAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","toast","getAllCompanies","prevConf"],"mappings":"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"}