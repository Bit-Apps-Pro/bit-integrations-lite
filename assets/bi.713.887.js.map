{"version":3,"file":"bi.713.887.js","sources":["../frontend-dev/src/components/AllIntegrations/Salesmate/SalesmateCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\"\nimport bitsFetch from \"../../../Utils/bitsFetch\"\nimport { __ } from \"../../../Utils/i18nwrap\"\n\nexport const handleInput = (e, salesmateConf, setSalesmateConf) => {\n  const newConf = { ...salesmateConf }\n  const { name } = e.target\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value\n  } else {\n    delete newConf[name]\n  }\n  setSalesmateConf({ ...newConf })\n}\n\n// refreshMappedFields\nexport const refreshSalesmateFields = (\n  salesmateConf,\n  setSalesmateConf,\n  setIsLoading,\n  setSnackbar,\n) => {\n  const requestParams = {\n    session_token: salesmateConf.session_token,\n    link_name: salesmateConf.link_name,\n    action_id: salesmateConf.actionId,\n  }\n\n  bitsFetch(requestParams, \"Salesmate_fields\")\n    .then((result) => {\n      if (result && result.success) {\n        setSalesmateConf(prevSalesmateConf => {\n          const draftConf = { ...prevSalesmateConf }\n          draftConf.field_map = [\n            { formField: '', salesmateFormField: '' },\n          ]\n\n          if (result.data) {\n            draftConf.salesmateFields = result.data\n            draftConf.field_map = generateMappedField(draftConf)\n          }\n          return draftConf\n        })\n        setSnackbar({\n          show: true,\n          msg: __(\"Salesmate fields refreshed\", \"bit-integrations\"),\n        })\n      } else {\n        setSnackbar({\n          show: true,\n          msg: __(\n            \"Salesmate fields refresh failed. please try again\",\n            \"bit-integrations\"\n          ),\n        })\n      }\n      setIsLoading(false)\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const generateMappedField = (salesmateConf) => {\n  const requiredFlds = salesmateConf?.salesmateFields && salesmateConf?.salesmateFields.filter(\n    (fld) => fld.required === true && fld.key !== 'owner' && fld.key !== 'pipeline'\n  )\n  return requiredFlds.length > 0\n    ? requiredFlds.map((field) => ({\n      formField: \"\",\n      salesmateFormField: field.key,\n    }))\n    : [{ formField: \"\", salesmateFormField: \"\" }]\n}\n\nexport const checkMappedFields = (salesmateConf) => {\n  const mappedFields = salesmateConf?.field_map\n    ? salesmateConf.field_map.filter(\n      (mappedField) =>\n        !mappedField.formField ||\n        !mappedField.salesmateFormField ||\n        (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n        (mappedField.salesmateFormField === \"customFieldKey\" &&\n          !mappedField.customFieldKey)\n    )\n    : []\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\n\nexport const salesmateAuthentication = (\n  confTmp,\n  setConf,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.session_token || !confTmp.link_name) {\n    setError({\n      session_token: !confTmp.session_token\n        ? __(\"Session Token can't be empty\", \"bit-integrations\")\n        : \"\",\n      link_name: !confTmp.link_name\n        ? __(\"Link Name can't be empty\", \"bit-integrations\")\n        : \"\",\n    })\n    return\n  }\n\n  setError({})\n  setLoading({ ...loading, auth: true })\n\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name\n  }\n\n  bitsFetch(requestParams, \"salesmate_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true)\n      setLoading({ ...loading, auth: false })\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"))\n      return\n    }\n    setLoading({ ...loading, auth: false })\n    toast.error(\n      __(\"Authorized failed, Please enter valid Session Token or Link Name\", \"bit-integrations\")\n    )\n  })\n}\n\nexport const getAllTags = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, tags: true })\n\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_tags\").then(\n    (result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.tags = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, tags: false })\n\n        toast.success(\n          __(\"Tags fetched successfully\", \"bit-integrations\")\n        )\n        return\n      }\n      setLoading({ ...setLoading, tags: false })\n      toast.error(\n        __(\"Tags fetching failed\", \"bit-integrations\")\n      )\n    }\n  )\n}\n\nexport const getAllCRMTypes = setConf => {\n  const fieldOptions = [\"Customer\", \"Lead\", \"Vendor\", \"Partner\", \"Competitor\", \"Reseller\", \"Other\"]\n  setConf(prevConf => {\n    const newConf = { ...prevConf }\n    newConf.types = fieldOptions\n    return newConf\n  })\n\n  toast.success(\n    __(\"Types fetched successfully\", \"bit-integrations\")\n  )\n\n  return fieldOptions\n}\n\nexport const getAllCRMLostReasons = setConf => {\n  const fieldOptions = [\"No Reason\", \"Need\", \"Timing\", \"Price\", \"Competition\", \"Feature\", \"Poor Qualification\"]\n  setConf(prevConf => {\n    const newConf = { ...prevConf }\n    newConf.lostReasons = fieldOptions\n    return newConf\n  })\n\n  toast.success(\n    __(\"Lost Reason fetched successfully\", \"bit-integrations\")\n  )\n  return fieldOptions\n}\n\nexport const getAllCRMSources = setConf => {\n  const fieldOptions = [\"Ads\", \"Referrals\", \"Website\", \"Word of mouth\"]\n  setConf(prevConf => {\n    const newConf = { ...prevConf }\n    newConf.sources = fieldOptions\n    return newConf\n  })\n\n  toast.success(\n    __(\"Source fetched successfully\", \"bit-integrations\")\n  )\n  return fieldOptions\n}\n\nexport const getAllCRMStatus = setConf => {\n  const fieldOptions = [\"Open\", \"Won\", \"Lost\"]\n  setConf(prevConf => {\n    const newConf = { ...prevConf }\n    newConf.statuses = fieldOptions\n    return newConf\n  })\n\n  toast.success(\n    __(\"Status fetched successfully\", \"bit-integrations\")\n  )\n  return fieldOptions\n}\n\nexport const getAllCRMPriority = setConf => {\n  const fieldOptions = [\"High\", \"Medium\", \"Low\"]\n  setConf(prevConf => {\n    const newConf = { ...prevConf }\n    newConf.priorities = fieldOptions\n    return newConf\n  })\n\n  toast.success(\n    __(\"Priority fetched successfully\", \"bit-integrations\")\n  )\n  return fieldOptions\n}\n\nexport const getAllCRMCurrency = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMCurrency: true })\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_currencies\").then(\n    (result) => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        if (result.data) {\n          newConf.currencies = result.data\n        }\n        setConf(newConf)\n        setLoading({ ...setLoading, CRMCurrency: false })\n\n        toast.success(\n          __(\"Currencies fetched successfully\", \"bit-integrations\")\n        )\n        return\n      }\n      setLoading({ ...setLoading, CRMCurrency: false })\n      toast.error(\n        __(\"Currencies fetching failed\", \"bit-integrations\")\n      )\n    }\n  )\n}\n\nexport const getAllCRMCompany = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, CRMCompany: true })\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_CRMCompanies\").then(\n    (result) => {\n      if (result && result.success) {\n        if (!result.data) {\n          setLoading({ ...setLoading, CRMCompany: false })\n          toast.error(__(\"Companies Not Found!\", \"bit-integrations\"))\n          return\n        }\n\n        setConf(prevConf => {\n          const draftConf = { ...prevConf }\n          if (result.data) {\n            draftConf.companies = result.data\n          }\n          return draftConf\n        })\n        setLoading({ ...setLoading, CRMCompany: false })\n\n        toast.success(\n          __(\"Companies fetched successfully\", \"bit-integrations\")\n        )\n        return\n      }\n      setLoading({ ...setLoading, CRMCompany: false })\n      toast.error(\n        __(\"Companies fetching failed\", \"bit-integrations\")\n      )\n    }\n  )\n}\n\nexport const getAllCRMPipelines = (confTmp, setConf, loading, setLoading) => {\n  setLoading({ ...loading, CRMPipelines: true })\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_CRMPipelines\").then(\n    (result) => {\n      setLoading({ ...loading, CRMPipelines: false })\n      if (result && result.success) {\n        setConf(prevConf => {\n          const draftConf = { ...prevConf }\n          if (result.data) {\n            draftConf.CRMPipelines = result.data\n          }\n          return draftConf\n        })\n        toast.success(__(\"Pipelines fetched successfully\", \"bit-integrations\"))\n\n        return\n      }\n      toast.error(__(\"Pipelines fetching failed\", \"bit-integrations\"))\n    }\n  )\n}\nexport const getAllCRMPrimaryContact = (confTmp, setConf, loading, setLoading) => {\n  setLoading({ ...loading, CRMContacts: true })\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_CRMContacts\").then(\n    (result) => {\n      setLoading({ ...loading, CRMContacts: false })\n      if (result && result.success) {\n        if (!result.data) {\n          toast.error(__(\"Contacts Not Found!\", \"bit-integrations\"))\n          return\n        }\n\n        setConf(prevConf => {\n          const draftConf = { ...prevConf }\n          if (result.data) {\n            draftConf.CRMContacts = result.data\n          }\n          return draftConf\n        })\n        toast.success(__(\"Contacts fetched successfully\", \"bit-integrations\"))\n\n        return\n      }\n      toast.error(__(\"Contacts fetching failed\", \"bit-integrations\"))\n    }\n  )\n}\n\nexport const getAllCRMOwner = (confTmp, setConf, loading, setLoading) => {\n  setLoading({ ...loading, CRMOwners: true })\n  const requestParams = {\n    session_token: confTmp.session_token,\n    link_name: confTmp.link_name,\n  }\n\n  bitsFetch(requestParams, \"salesmate_fetch_all_CRMOwners\").then(\n    (result) => {\n      setLoading({ ...loading, CRMOwners: false })\n      if (result && result.success) {\n        setConf(prevConf => {\n          const draftConf = { ...prevConf }\n          if (result.data) {\n            draftConf.CRMOwners = result.data\n          }\n          return draftConf\n        })\n        toast.success(__(\"Owner fetched successfully\", \"bit-integrations\"))\n\n        return\n      }\n      toast.error(__(\"Owner fetching failed\", \"bit-integrations\"))\n    }\n  )\n}\n"],"names":["__","bitsFetch","_t","handleInput","e","salesmateConf","setSalesmateConf","newConf","__spreadValues","name","refreshSalesmateFields","setIsLoading","setSnackbar","requestParams","result","prevSalesmateConf","draftConf","generateMappedField","requiredFlds","fld","field","checkMappedFields","mappedField","salesmateAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","toast","getAllTags","getAllCRMTypes","fieldOptions","prevConf","getAllCRMLostReasons","getAllCRMSources","getAllCRMStatus","getAllCRMPriority","getAllCRMCurrency","getAllCRMCompany","getAllCRMPipelines","getAllCRMPrimaryContact","getAllCRMOwner"],"mappings":"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"}