{"version":3,"file":"bi.467.800.js","sources":["../frontend-dev/src/components/AllIntegrations/Salesforce/SalesforceCommonFunc.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport { __, sprintf } from '../../../Utils/i18nwrap'\nimport bitsFetch from '../../../Utils/bitsFetch'\n\nexport const handleInput = (e, salesforceConf, setSalesforceConf, formID, setIsLoading, setSnackbar, isNew, error, setError) => {\n  const newConf = { ...salesforceConf }\n  if (isNew) {\n    const rmError = { ...error }\n    rmError[e.target.name] = ''\n    setError({ ...rmError })\n  }\n  newConf[e.target.name] = e.target.value\n  setSalesforceConf({ ...newConf })\n}\n\n// export const getAllCampaignList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n//   setIsLoading(true)\n//   const campaignRequestParams = {\n//     formID,\n//     clientId: salesforceConf.clientId,\n//     clientSecret: salesforceConf.clientSecret,\n//     tokenDetails: salesforceConf.tokenDetails,\n//   }\n//   const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_campaign_list')\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...salesforceConf }\n//         if (!newConf.default) newConf.default = {}\n//         if (!newConf.default?.campaignLists) {\n//           newConf.default.campaignLists = {}\n//         }\n//         if (result.data.allCampaignLists) {\n//           newConf.default.campaignLists = result.data.allCampaignLists\n//         }\n//         if (result.data.tokenDetails) {\n//           newConf.tokenDetails = result.data.tokenDetails\n//         }\n//         setSalesforceConf({ ...newConf })\n//         setIsLoading(false)\n//         return 'Campaign list refreshed'\n//       }\n//       setIsLoading(false)\n//       return 'Campaign list refresh failed. please try again'\n//     })\n//   toast.promise(loadPostTypes, {\n//     success: data => data,\n//     error: __('Error Occurred', 'bit-integrations'),\n//     loading: __('Loading Campaign list...'),\n//   })\n// }\n\nexport const getAllCampaignList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const campaignRequestParams = {\n    formID,\n    clientId: salesforceConf.clientId,\n    clientSecret: salesforceConf.clientSecret,\n    tokenDetails: salesforceConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_campaign_list')\n    .then(result => {\n      if (result && result.success) {\n        setSalesforceConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) newConf.default = {}\n          if (!newConf.default?.campaignLists) {\n            newConf.default.campaignLists = {}\n          }\n          if (result.data.allCampaignLists) {\n            newConf.default.campaignLists = result.data.allCampaignLists\n          }\n          if (result.data.tokenDetails) {\n            newConf.tokenDetails = result.data.tokenDetails\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        return 'Campaign list refreshed'\n      }\n      setIsLoading(false)\n      return 'Campaign list refresh failed. please try again'\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Campaign list...'),\n  })\n}\n\n// export const getAllLeadList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n//   setIsLoading(true)\n//   const campaignRequestParams = {\n//     formID,\n//     clientId: salesforceConf.clientId,\n//     clientSecret: salesforceConf.clientSecret,\n//     tokenDetails: salesforceConf.tokenDetails,\n//   }\n//   bitsFetch(campaignRequestParams, 'selesforce_lead_list')\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...salesforceConf }\n//         if (!newConf.default) newConf.default = {}\n//         if (!newConf.default?.leadLists) {\n//           newConf.default.leadLists = {}\n//         }\n//         if (result.data.leadLists) {\n//           newConf.default.leadLists = result.data.leadLists\n//         }\n//         if (result.data.tokenDetails) {\n//           newConf.tokenDetails = result.data.tokenDetails\n//         }\n//         setSnackbar({ show: true, msg: __('lead list refreshed', 'bit-integrations') })\n//         setSalesforceConf({ ...newConf })\n//       } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n//         setSnackbar({ show: true, msg: `${__('Lead list refresh failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n//       } else {\n//         setSnackbar({ show: true, msg: __('Lead list refresh failed. please try again', 'bit-integrations') })\n//       }\n//       setIsLoading(false)\n//     })\n//     .catch(() => setIsLoading(false))\n// }\n// export const getAllContactList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n//   setIsLoading(true)\n//   const campaignRequestParams = {\n//     formID,\n//     clientId: salesforceConf.clientId,\n//     clientSecret: salesforceConf.clientSecret,\n//     tokenDetails: salesforceConf.tokenDetails,\n//   }\n//   const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_contact_list')\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...salesforceConf }\n//         if (!newConf.default) newConf.default = {}\n//         if (!newConf.default?.contactLists) {\n//           newConf.default.contactLists = {}\n//         }\n//         if (result.data.contactLists) {\n//           newConf.default.contactLists = result.data.contactLists\n//         }\n//         if (result.data.tokenDetails) {\n//           newConf.tokenDetails = result.data.tokenDetails\n//         }\n//         setSalesforceConf({ ...newConf })\n//         setIsLoading(false)\n//         return 'Contact list refreshed'\n//       }\n//       setIsLoading(false)\n//       return 'Contact list refresh failed. please try again'\n//     })\n//   toast.promise(loadPostTypes, {\n//     success: data => data,\n//     error: __('Error Occurred', 'bit-integrations'),\n//     loading: __('Loading Contact list...'),\n//   })\n// }\n\nexport const getAllLeadList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const campaignRequestParams = {\n    formID,\n    clientId: salesforceConf.clientId,\n    clientSecret: salesforceConf.clientSecret,\n    tokenDetails: salesforceConf.tokenDetails,\n  }\n  bitsFetch(campaignRequestParams, 'selesforce_lead_list')\n    .then(result => {\n      if (result && result.success) {\n        setSalesforceConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) newConf.default = {}\n          if (!newConf.default?.leadLists) {\n            newConf.default.leadLists = {}\n          }\n          if (result.data.leadLists) {\n            newConf.default.leadLists = result.data.leadLists\n          }\n          if (result.data.tokenDetails) {\n            newConf.tokenDetails = result.data.tokenDetails\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        return 'Lead list refreshed'\n      }\n      setIsLoading(false)\n      return 'Lead list refresh failed. please try again'\n    })\n    .catch(() => setIsLoading(false))\n}\n\nexport const getAllContactList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const campaignRequestParams = {\n    formID,\n    clientId: salesforceConf.clientId,\n    clientSecret: salesforceConf.clientSecret,\n    tokenDetails: salesforceConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_contact_list')\n    .then(result => {\n      if (result && result.success) {\n        setSalesforceConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) newConf.default = {}\n          if (!newConf.default?.contactLists) {\n            newConf.default.contactLists = {}\n          }\n          if (result.data.contactLists) {\n            newConf.default.contactLists = result.data.contactLists\n          }\n          if (result.data.tokenDetails) {\n            newConf.tokenDetails = result.data.tokenDetails\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        return 'Contact list refresh successfully.'\n      }\n      setIsLoading(false)\n      return 'Contact list refresh failed. please try again'\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Contact list...'),\n  })\n}\n\nexport const getAllCustomFields = (formID, actionName, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const customFieldRequestParams = {\n    formID,\n    actionName,\n    clientId: salesforceConf.clientId,\n    clientSecret: salesforceConf.clientSecret,\n    tokenDetails: salesforceConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(customFieldRequestParams, 'selesforce_custom_field')\n    .then(result => {\n      const customFields = result && result.success ? result?.data : []\n      const returnMsg = result && result.success ? 'Custom field refresh successfully.' : result?.data[0]?.message ? 'Custom field: ' + result?.data[0]?.message : 'Custom field refresh failed. please try again'\n\n      setSalesforceConf((prevConf) => {\n        const draftConf = prevConf;\n        draftConf.field_map = [{ formField: \"\", salesmateFormField: \"\" }];\n        if (result?.data) {\n          if (actionName === 'contact-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.contactFields,\n              ...customFields\n            ];\n          } else if (actionName === 'lead-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.leadFields,\n              ...customFields\n            ];\n          } else if (actionName === 'account-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.accountFields,\n              ...customFields\n            ];\n          } else if (actionName === 'campaign-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.campaignFields,\n              ...customFields\n            ];\n          } else if (actionName === 'add-campaign-member') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.campaignMemberStatus,\n              ...customFields\n            ];\n          } else if (actionName === 'opportunity-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.opportunityFields,\n              ...customFields\n            ];\n          } else if (actionName === 'event-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.eventFields,\n              ...customFields\n            ];\n          } else if (actionName === 'case-create') {\n            draftConf['selesforceFields'] = [\n              ...draftConf.caseFields,\n              ...customFields\n            ];\n          }\n        }\n        draftConf.field_map = generateMappedField(draftConf);\n        return draftConf;\n      });\n      setIsLoading(false)\n      return returnMsg\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __(`Loading ${actionName} list...`),\n  })\n}\n\n// export const getAllAccountList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n//   setIsLoading(true)\n//   const campaignRequestParams = {\n//     formID,\n//     clientId: salesforceConf.clientId,\n//     clientSecret: salesforceConf.clientSecret,\n//     tokenDetails: salesforceConf.tokenDetails,\n//   }\n//   const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_account_list')\n//     .then(result => {\n//       if (result && result.success) {\n//         const newConf = { ...salesforceConf }\n//         if (!newConf.default) newConf.default = {}\n//         if (!newConf.default?.accountLists) {\n//           newConf.default.accountLists = {}\n//         }\n//         if (result.data.accountLists) {\n//           newConf.default.accountLists = result.data.accountLists\n//         }\n//         if (result.data.tokenDetails) {\n//           newConf.tokenDetails = result.data.tokenDetails\n//         }\n//         setSalesforceConf({ ...newConf })\n//         setIsLoading(false)\n//         return 'Account list refreshed'\n//       }\n//       setIsLoading(false)\n//       return 'Account list refresh failed. please try again'\n//     })\n//   toast.promise(loadPostTypes, {\n//     success: data => data,\n//     error: __('Error Occurred', 'bit-integrations'),\n//     loading: __('Loading Account list...'),\n//   })\n// }\n\nexport const getAllAccountList = (formID, salesforceConf, setSalesforceConf, setIsLoading, setSnackbar) => {\n  setIsLoading(true)\n  const campaignRequestParams = {\n    formID,\n    clientId: salesforceConf.clientId,\n    clientSecret: salesforceConf.clientSecret,\n    tokenDetails: salesforceConf.tokenDetails,\n  }\n  const loadPostTypes = bitsFetch(campaignRequestParams, 'selesforce_account_list')\n    .then(result => {\n      if (result && result.success) {\n        setSalesforceConf((oldConf) => {\n          const newConf = { ...oldConf }\n          if (!newConf.default) newConf.default = {}\n          if (!newConf.default?.accountLists) {\n            newConf.default.accountLists = {}\n          }\n          if (result.data.accountLists) {\n            newConf.default.accountLists = result.data.accountLists\n          }\n          if (result.data.tokenDetails) {\n            newConf.tokenDetails = result.data.tokenDetails\n          }\n          return newConf\n        })\n        setIsLoading(false)\n        return 'Account list refreshed'\n      }\n      setIsLoading(false)\n      return 'Account list refresh failed. please try again'\n    })\n  toast.promise(loadPostTypes, {\n    success: data => data,\n    error: __('Error Occurred', 'bit-integrations'),\n    loading: __('Loading Account list...'),\n  })\n}\n\nexport const checkMappedFields = (salesforceConf) => {\n  const mappedFields = salesforceConf?.field_map ? salesforceConf.field_map.filter(mappedField => (!mappedField.formField || !mappedField.selesforceField || (!mappedField.formField === 'custom' && !mappedField.customValue))) : []\n\n  if (mappedFields.length > 0) {\n    return false\n  }\n  return true\n}\nexport const generateMappedField = (salesforceConf, actionName) => {\n  let fields = []\n  // if (actionName === 'contact-create') {\n  //   fields = salesforceConf?.contactFields\n  // } else if (actionName === 'lead-create') {\n  //   fields = salesforceConf?.leadFields\n  // } else if (actionName === 'account-create') {\n  //   fields = salesforceConf?.accountFields\n  // } else if (actionName === 'campaign-create') {\n  //   fields = salesforceConf?.campaignFields\n  // } else if (actionName === 'add-campaign-member') {\n  //   fields = salesforceConf?.campaignMemberFields\n  // } else if (actionName === 'opportunity-create') {\n  //   fields = salesforceConf?.opportunityFields\n  // } else if (actionName === 'event-create') {\n  //   fields = salesforceConf?.eventFields\n  // } else if (actionName === 'case-create') {\n  //   fields = salesforceConf?.caseFields\n  // }\n  fields = salesforceConf?.selesforceFields || []\n  const requiredFlds = fields.filter(fld => fld.required === true)\n  return requiredFlds.length > 0 ? requiredFlds.map(field => ({ formField: '', selesforceField: field.key })) : [{ formField: '', selesforceField: '' }]\n}\nexport const handleAuthorize = (confTmp, setConf, setError, setisAuthorized, setIsLoading, setSnackbar) => {\n  if (!confTmp.clientId || !confTmp.clientSecret) {\n    setError({\n      clientId: !confTmp.clientId ? __('Client ID cann\\'t be empty', 'bit-integrations') : '',\n      clientSecret: !confTmp.clientSecret ? __('Secret key cann\\'t be empty', 'bit-integrations') : '',\n    })\n    return\n  }\n\n  setIsLoading(true)\n  const apiEndpoint = `https://login.salesforce.com/services/oauth2/authorize?response_type=code&client_id=${confTmp.clientId}&prompt=login%20consent&redirect_uri=${encodeURIComponent(window.location.href)}/redirect`\n  const authWindow = window.open(apiEndpoint, 'salesforce', 'width=400,height=609,toolbar=off')\n  const popupURLCheckTimer = setInterval(() => {\n    if (authWindow.closed) {\n      clearInterval(popupURLCheckTimer)\n      let grantTokenResponse = {}\n      let isauthRedirectLocation = false\n      const bitformsZoho = localStorage.getItem('__salesforce')\n      if (bitformsZoho) {\n        isauthRedirectLocation = true\n        grantTokenResponse = JSON.parse(bitformsZoho)\n        localStorage.removeItem('__salesforce')\n      }\n      console.log(grantTokenResponse)\n      if (!grantTokenResponse.code || grantTokenResponse.error || !grantTokenResponse || !isauthRedirectLocation) {\n        const errorCause = grantTokenResponse.error ? `Cause: ${grantTokenResponse.error}` : ''\n        setSnackbar({ show: true, msg: `${__('Authorization failed', 'bit-integrations')} ${errorCause}. ${__('please try again', 'bit-integrations')}` })\n        setIsLoading(false)\n      } else {\n        const newConf = { ...confTmp }\n        newConf.accountServer = grantTokenResponse['accounts-server']\n        tokenHelper(grantTokenResponse, newConf, setConf, setisAuthorized, setIsLoading, setSnackbar)\n      }\n    }\n  }, 500)\n}\n\nconst tokenHelper = (grantToken, confTmp, setConf, setisAuthorized, setIsLoading, setSnackbar) => {\n  const tokenRequestParams = { ...grantToken }\n  tokenRequestParams.clientId = confTmp.clientId\n  tokenRequestParams.clientSecret = confTmp.clientSecret\n  tokenRequestParams.redirectURI = `${encodeURIComponent(window.location.href)}/redirect`\n  bitsFetch(tokenRequestParams, 'selesforce_generate_token')\n    .then(result => {\n      if (result && result.success) {\n        const newConf = { ...confTmp }\n        newConf.tokenDetails = result.data\n        setConf(newConf)\n        setisAuthorized(true)\n        setSnackbar({ show: true, msg: __('Authorized Successfully', 'bit-integrations') })\n      } else if ((result && result.data && result.data.data) || (!result.success && typeof result.data === 'string')) {\n        setSnackbar({ show: true, msg: `${__('Authorization failed Cause:', 'bit-integrations')}${result.data.data || result.data}. ${__('please try again', 'bit-integrations')}` })\n      } else {\n        setSnackbar({ show: true, msg: __('Authorization failed. please try again', 'bit-integrations') })\n      }\n      setIsLoading(false)\n    })\n}\n"],"names":["handleInput","e","salesforceConf","setSalesforceConf","formID","setIsLoading","setSnackbar","isNew","error","setError","newConf","__spreadValues","rmError","getAllCampaignList","campaignRequestParams","loadPostTypes","bitsFetch","result","oldConf","_a","toast","data","__","getAllLeadList","getAllContactList","getAllCustomFields","actionName","customFieldRequestParams","customFields","returnMsg","_b","prevConf","draftConf","generateMappedField","getAllAccountList","checkMappedFields","mappedField","fields","requiredFlds","fld","field","handleAuthorize","confTmp","setConf","setisAuthorized","apiEndpoint","authWindow","popupURLCheckTimer","grantTokenResponse","isauthRedirectLocation","bitformsZoho","errorCause","tokenHelper","grantToken","tokenRequestParams"],"mappings":"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"}