{"version":3,"file":"bi.151.901.js","sources":["../frontend-dev/src/components/AllIntegrations/Nimble/NimbleCommonFunc.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-else-return */\nimport toast from \"react-hot-toast\";\nimport bitsFetch from \"../../../Utils/bitsFetch\";\nimport { __ } from \"../../../Utils/i18nwrap\";\n\nexport const handleInput = (e, salesmateConf, setSalesmateConf) => {\n  const newConf = { ...salesmateConf };\n  const { name } = e.target;\n  if (e.target.value !== \"\") {\n    newConf[name] = e.target.value;\n  } else {\n    delete newConf[name];\n  }\n  setSalesmateConf({ ...newConf });\n};\n\nexport const generateMappedField = (nimbleFields) => {\n  const requiredFlds = nimbleFields?.filter((fld) => fld.required === true);\n  return requiredFlds?.length > 0\n    ? requiredFlds?.map((field) => ({\n        formField: \"\",\n        nimbleFormField: field.key,\n      }))\n    : [{ formField: \"\", nimbleFormField: \"\" }];\n};\n\nexport const checkMappedFields = (nimbleConf) => {\n  const mappedFields = nimbleConf?.field_map\n    ? nimbleConf.field_map.filter(\n        (mappedField) =>\n          !mappedField.formField ||\n          !mappedField.nimbleFormField ||\n          (mappedField.formField === \"custom\" && !mappedField.customValue) ||\n          (mappedField.nimbleFormField === \"customFieldKey\" &&\n            !mappedField.customFieldKey)\n      )\n    : [];\n  if (mappedFields.length > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const nimbleAuthentication = (\n  confTmp,\n  setConf,\n  setError,\n  setIsAuthorized,\n  loading,\n  setLoading\n) => {\n  if (!confTmp.api_key) {\n    setError({\n      api_key: !confTmp.api_key\n        ? __(\"API Key can't be empty\", \"bit-integrations\")\n        : \"\",\n    });\n    return;\n  }\n\n  setError({});\n  setLoading({ ...loading, auth: true });\n  const requestParams = { api_key: confTmp.api_key };\n\n  bitsFetch(requestParams, \"nimble_authentication\").then((result) => {\n    if (result && result.success) {\n      setIsAuthorized(true);\n      setLoading({ ...loading, auth: false });\n      toast.success(__(\"Authorized successfully\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...loading, auth: false });\n    toast.error(\n      __(\"Authorized failed, Please enter valid API Key\", \"bit-integrations\")\n    );\n  });\n};\n\nexport const getAllFields = (confTmp, setConf, setLoading) => {\n  setLoading({ ...setLoading, allFields: true });\n  const requestParams = { api_key: confTmp.api_key };\n\n  bitsFetch(requestParams, \"nimble_fetch_all_fields\").then((result) => {\n    if (result && result.success) {\n      if (result.data) {\n        setConf((prevConf) => {\n          prevConf.peopleFields = result.data.person;\n          prevConf.companyFields = result.data.company;\n          prevConf.xofEmployees = result.data.xofEmployees;\n          prevConf.ratings = result.data.ratings;\n          prevConf.leadStatus = result.data.leadStatus;\n          prevConf.leadSource = result.data.leadSource;\n          prevConf.leadTypes = result.data.leadTypes;\n          return prevConf;\n        });\n\n        setLoading({ ...setLoading, event: false });\n        toast.success(__(\"Fields fetched successfully\", \"bit-integrations\"));\n        return;\n      }\n      setLoading({ ...setLoading, event: false });\n      toast.error(__(\"Fields Not Found!\", \"bit-integrations\"));\n      return;\n    }\n    setLoading({ ...setLoading, event: false });\n    toast.error(__(\"Fields fetching failed\", \"bit-integrations\"));\n  });\n};\n"],"names":["__","bitsFetch","_t","handleInput","e","salesmateConf","setSalesmateConf","newConf","__spreadValues","name","generateMappedField","nimbleFields","requiredFlds","fld","field","checkMappedFields","nimbleConf","mappedField","nimbleAuthentication","confTmp","setConf","setError","setIsAuthorized","loading","setLoading","__spreadProps","requestParams","result","toast","getAllFields","prevConf"],"mappings":"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"}